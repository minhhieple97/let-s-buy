import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const CartScalarFieldEnumSchema = z.enum(['id','userId','couponId','shippingFees','subTotal','total','createdAt','updatedAt']);

export const CartItemScalarFieldEnumSchema = z.enum(['id','productId','variantId','sizeId','productSlug','variantSlug','sku','name','image','size','price','quantity','shippingFee','totalPrice','cartId','storeId','createdAt','updatedAt']);

export const CategoryScalarFieldEnumSchema = z.enum(['id','name','image','url','featured','createdAt','updatedAt']);

export const ColorScalarFieldEnumSchema = z.enum(['id','name','productVariantId','createdAt','updatedAt']);

export const CountryScalarFieldEnumSchema = z.enum(['id','name','code','createdAt','updatedAt']);

export const CouponScalarFieldEnumSchema = z.enum(['id','code','startDate','endDate','discount','storeId','createdAt','updatedAt']);

export const FreeShippingCountryScalarFieldEnumSchema = z.enum(['id','freeShippingId','countryId','createdAt','updatedAt']);

export const FreeShippingScalarFieldEnumSchema = z.enum(['id','productId','createdAt','updatedAt']);

export const OfferTagScalarFieldEnumSchema = z.enum(['id','name','url','createdAt','updatedAt']);

export const OrderGroupScalarFieldEnumSchema = z.enum(['id','status','shippingService','shippingDeliveryMin','shippingDeliveryMax','shippingFees','subTotal','total','orderId','storeId','couponId','createdAt','updatedAt']);

export const OrderItemScalarFieldEnumSchema = z.enum(['id','productId','variantId','sizeId','productSlug','variantSlug','sku','name','image','size','quantity','shippingFee','price','totalPrice','orderGroupId','status','createdAt','updatedAt']);

export const OrderScalarFieldEnumSchema = z.enum(['id','shippingFees','subTotal','total','orderStatus','paymentStatus','paymentMethod','shippingAddressId','userId','createdAt','updatedAt']);

export const PaymentDetailsScalarFieldEnumSchema = z.enum(['id','paymentInetntId','paymentMethod','status','amount','currency','orderId','userId','createdAt','updatedAt']);

export const ProductVariantScalarFieldEnumSchema = z.enum(['id','variantName','variantDescription','variantImage','slug','isSale','saleEndDate','sku','keywords','sales','weight','productId','createdAt','updatedAt']);

export const ProductScalarFieldEnumSchema = z.enum(['id','name','description','slug','brand','rating','sales','numReviews','shippingFeeMethod','views','freeShippingForAllCountries','createdAt','updatedAt','storeId','categoryId','subCategoryId','offerTagId']);

export const ProductVariantImageScalarFieldEnumSchema = z.enum(['id','url','alt','order','productVariantId','createdAt','updatedAt']);

export const QuestionScalarFieldEnumSchema = z.enum(['id','question','answer','productId','createdAt','updatedAt']);

export const ReviewImageScalarFieldEnumSchema = z.enum(['id','url','alt','reviewId','createdAt','updatedAt']);

export const ReviewScalarFieldEnumSchema = z.enum(['id','variant','review','rating','color','size','quantity','likes','userId','productId','createdAt','updatedAt']);

export const ShippingAddressScalarFieldEnumSchema = z.enum(['id','firstName','lastName','phone','address1','address2','state','city','zip_code','default','userId','countryId','createdAt','updatedAt']);

export const ShippingRateScalarFieldEnumSchema = z.enum(['id','shippingService','shippingFeePerItem','shippingFeeForAdditionalItem','shippingFeePerKg','shippingFeeFixed','deliveryTimeMin','deliveryTimeMax','returnPolicy','countryId','storeId','createdAt','updatedAt']);

export const SizeScalarFieldEnumSchema = z.enum(['id','size','quantity','price','discount','productVariantId','createdAt','updatedAt']);

export const SpecScalarFieldEnumSchema = z.enum(['id','name','value','productId','variantId','createdAt','updatedAt']);

export const StoreScalarFieldEnumSchema = z.enum(['id','name','description','email','phone','url','logo','cover','status','averageRating','numReviews','featured','returnPolicy','defaultShippingService','defaultShippingFeePerItem','defaultShippingFeeForAdditionalItem','defaultShippingFeePerKg','defaultShippingFeeFixed','defaultDeliveryTimeMin','defaultDeliveryTimeMax','createdAt','updatedAt','userId']);

export const SubCategoryScalarFieldEnumSchema = z.enum(['id','name','image','url','featured','categoryId','createdAt','updatedAt']);

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','picture','role','createdAt','updatedAt']);

export const WishlistScalarFieldEnumSchema = z.enum(['id','userId','productId','variantId','sizeId','createdAt','updatedAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const ProductStatusSchema = z.enum(['Pending','Processing','ReadyForShipment','Shipped','Delivered','Canceled','Returned','Refunded','FailedDelivery','OnHold','Backordered','PartiallyShipped','ExchangeRequested','AwaitingPickup']);

export type ProductStatusType = `${z.infer<typeof ProductStatusSchema>}`

export const OrderStatusSchema = z.enum(['Pending','Confirmed','Processing','Shipped','OutforDelivery','Delivered','Cancelled','Failed','Refunded','Returned','PartiallyShipped','OnHold']);

export type OrderStatusType = `${z.infer<typeof OrderStatusSchema>}`

export const PaymentStatusSchema = z.enum(['Pending','Paid','Failed','Declined','Cancelled','Refunded','PartiallyRefunded','Chargeback']);

export type PaymentStatusType = `${z.infer<typeof PaymentStatusSchema>}`

export const PaymentMethodSchema = z.enum(['Paypal','Stripe']);

export type PaymentMethodType = `${z.infer<typeof PaymentMethodSchema>}`

export const ShippingFeeMethodSchema = z.enum(['ITEM','WEIGHT','FIXED']);

export type ShippingFeeMethodType = `${z.infer<typeof ShippingFeeMethodSchema>}`

export const StoreStatusSchema = z.enum(['PENDING','ACTIVE','BANNED','DISABLED']);

export type StoreStatusType = `${z.infer<typeof StoreStatusSchema>}`

export const RoleSchema = z.enum(['USER','ADMIN','SELLER']);

export type RoleType = `${z.infer<typeof RoleSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// CART SCHEMA
/////////////////////////////////////////

export const CartSchema = z.object({
  id: z.string().uuid(),
  userId: z.string(),
  couponId: z.string().nullable(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Cart = z.infer<typeof CartSchema>

/////////////////////////////////////////
// CART ITEM SCHEMA
/////////////////////////////////////////

export const CartItemSchema = z.object({
  id: z.string().uuid(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int(),
  shippingFee: z.number(),
  totalPrice: z.number(),
  cartId: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type CartItem = z.infer<typeof CartItemSchema>

/////////////////////////////////////////
// CATEGORY SCHEMA
/////////////////////////////////////////

export const CategorySchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Category = z.infer<typeof CategorySchema>

/////////////////////////////////////////
// COLOR SCHEMA
/////////////////////////////////////////

export const ColorSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  productVariantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Color = z.infer<typeof ColorSchema>

/////////////////////////////////////////
// COUNTRY SCHEMA
/////////////////////////////////////////

export const CountrySchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Country = z.infer<typeof CountrySchema>

/////////////////////////////////////////
// COUPON SCHEMA
/////////////////////////////////////////

export const CouponSchema = z.object({
  id: z.string().uuid(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  storeId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Coupon = z.infer<typeof CouponSchema>

/////////////////////////////////////////
// FREE SHIPPING COUNTRY SCHEMA
/////////////////////////////////////////

export const FreeShippingCountrySchema = z.object({
  id: z.string().uuid(),
  freeShippingId: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FreeShippingCountry = z.infer<typeof FreeShippingCountrySchema>

/////////////////////////////////////////
// FREE SHIPPING SCHEMA
/////////////////////////////////////////

export const FreeShippingSchema = z.object({
  id: z.string().uuid(),
  productId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FreeShipping = z.infer<typeof FreeShippingSchema>

/////////////////////////////////////////
// OFFER TAG SCHEMA
/////////////////////////////////////////

export const OfferTagSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  url: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type OfferTag = z.infer<typeof OfferTagSchema>

/////////////////////////////////////////
// ORDER GROUP SCHEMA
/////////////////////////////////////////

export const OrderGroupSchema = z.object({
  status: OrderStatusSchema,
  id: z.string().uuid(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderId: z.string(),
  storeId: z.string(),
  couponId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type OrderGroup = z.infer<typeof OrderGroupSchema>

/////////////////////////////////////////
// ORDER ITEM SCHEMA
/////////////////////////////////////////

export const OrderItemSchema = z.object({
  status: ProductStatusSchema,
  id: z.string().uuid(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  quantity: z.number().int(),
  shippingFee: z.number(),
  price: z.number(),
  totalPrice: z.number(),
  orderGroupId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type OrderItem = z.infer<typeof OrderItemSchema>

/////////////////////////////////////////
// ORDER SCHEMA
/////////////////////////////////////////

export const OrderSchema = z.object({
  orderStatus: OrderStatusSchema,
  paymentStatus: PaymentStatusSchema,
  paymentMethod: PaymentMethodSchema.nullable(),
  id: z.string().uuid(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  shippingAddressId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Order = z.infer<typeof OrderSchema>

/////////////////////////////////////////
// PAYMENT DETAILS SCHEMA
/////////////////////////////////////////

export const PaymentDetailsSchema = z.object({
  id: z.string().uuid(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  orderId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type PaymentDetails = z.infer<typeof PaymentDetailsSchema>

/////////////////////////////////////////
// PRODUCT VARIANT SCHEMA
/////////////////////////////////////////

export const ProductVariantSchema = z.object({
  id: z.string().uuid(),
  variantName: z.string(),
  variantDescription: z.string().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean(),
  saleEndDate: z.string().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int(),
  weight: z.number(),
  productId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ProductVariant = z.infer<typeof ProductVariantSchema>

/////////////////////////////////////////
// PRODUCT SCHEMA
/////////////////////////////////////////

export const ProductSchema = z.object({
  shippingFeeMethod: ShippingFeeMethodSchema,
  id: z.string().uuid(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number(),
  sales: z.number().int(),
  numReviews: z.number().int(),
  views: z.number().int(),
  freeShippingForAllCountries: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().nullable(),
})

export type Product = z.infer<typeof ProductSchema>

/////////////////////////////////////////
// PRODUCT VARIANT IMAGE SCHEMA
/////////////////////////////////////////

export const ProductVariantImageSchema = z.object({
  id: z.string().uuid(),
  url: z.string(),
  alt: z.string(),
  order: z.number().int().nullable(),
  productVariantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ProductVariantImage = z.infer<typeof ProductVariantImageSchema>

/////////////////////////////////////////
// QUESTION SCHEMA
/////////////////////////////////////////

export const QuestionSchema = z.object({
  id: z.string().uuid(),
  question: z.string(),
  answer: z.string(),
  productId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Question = z.infer<typeof QuestionSchema>

/////////////////////////////////////////
// REVIEW IMAGE SCHEMA
/////////////////////////////////////////

export const ReviewImageSchema = z.object({
  id: z.string().uuid(),
  url: z.string(),
  alt: z.string(),
  reviewId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ReviewImage = z.infer<typeof ReviewImageSchema>

/////////////////////////////////////////
// REVIEW SCHEMA
/////////////////////////////////////////

export const ReviewSchema = z.object({
  id: z.string().uuid(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int(),
  userId: z.string(),
  productId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Review = z.infer<typeof ReviewSchema>

/////////////////////////////////////////
// SHIPPING ADDRESS SCHEMA
/////////////////////////////////////////

export const ShippingAddressSchema = z.object({
  id: z.string().uuid(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean(),
  userId: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ShippingAddress = z.infer<typeof ShippingAddressSchema>

/////////////////////////////////////////
// SHIPPING RATE SCHEMA
/////////////////////////////////////////

export const ShippingRateSchema = z.object({
  id: z.string().uuid(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  countryId: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ShippingRate = z.infer<typeof ShippingRateSchema>

/////////////////////////////////////////
// SIZE SCHEMA
/////////////////////////////////////////

export const SizeSchema = z.object({
  id: z.string().uuid(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number(),
  productVariantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Size = z.infer<typeof SizeSchema>

/////////////////////////////////////////
// SPEC SCHEMA
/////////////////////////////////////////

export const SpecSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  value: z.string(),
  productId: z.string().nullable(),
  variantId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Spec = z.infer<typeof SpecSchema>

/////////////////////////////////////////
// STORE SCHEMA
/////////////////////////////////////////

export const StoreSchema = z.object({
  status: StoreStatusSchema,
  id: z.string().uuid(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  averageRating: z.number(),
  numReviews: z.number().int(),
  featured: z.boolean(),
  returnPolicy: z.string(),
  defaultShippingService: z.string(),
  defaultShippingFeePerItem: z.number(),
  defaultShippingFeeForAdditionalItem: z.number(),
  defaultShippingFeePerKg: z.number(),
  defaultShippingFeeFixed: z.number(),
  defaultDeliveryTimeMin: z.number().int(),
  defaultDeliveryTimeMax: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  userId: z.string(),
})

export type Store = z.infer<typeof StoreSchema>

/////////////////////////////////////////
// SUB CATEGORY SCHEMA
/////////////////////////////////////////

export const SubCategorySchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean(),
  categoryId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type SubCategory = z.infer<typeof SubCategorySchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  role: RoleSchema,
  id: z.string().uuid(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// WISHLIST SCHEMA
/////////////////////////////////////////

export const WishlistSchema = z.object({
  id: z.string().uuid(),
  userId: z.string(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Wishlist = z.infer<typeof WishlistSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// CART
//------------------------------------------------------

export const CartIncludeSchema: z.ZodType<Prisma.CartInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  coupon: z.union([z.boolean(),z.lazy(() => CouponArgsSchema)]).optional(),
  cartItems: z.union([z.boolean(),z.lazy(() => CartItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CartCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CartArgsSchema: z.ZodType<Prisma.CartDefaultArgs> = z.object({
  select: z.lazy(() => CartSelectSchema).optional(),
  include: z.lazy(() => CartIncludeSchema).optional(),
}).strict();

export const CartCountOutputTypeArgsSchema: z.ZodType<Prisma.CartCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CartCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CartCountOutputTypeSelectSchema: z.ZodType<Prisma.CartCountOutputTypeSelect> = z.object({
  cartItems: z.boolean().optional(),
}).strict();

export const CartSelectSchema: z.ZodType<Prisma.CartSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  couponId: z.boolean().optional(),
  shippingFees: z.boolean().optional(),
  subTotal: z.boolean().optional(),
  total: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  coupon: z.union([z.boolean(),z.lazy(() => CouponArgsSchema)]).optional(),
  cartItems: z.union([z.boolean(),z.lazy(() => CartItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CartCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CART ITEM
//------------------------------------------------------

export const CartItemIncludeSchema: z.ZodType<Prisma.CartItemInclude> = z.object({
  cart: z.union([z.boolean(),z.lazy(() => CartArgsSchema)]).optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
}).strict()

export const CartItemArgsSchema: z.ZodType<Prisma.CartItemDefaultArgs> = z.object({
  select: z.lazy(() => CartItemSelectSchema).optional(),
  include: z.lazy(() => CartItemIncludeSchema).optional(),
}).strict();

export const CartItemSelectSchema: z.ZodType<Prisma.CartItemSelect> = z.object({
  id: z.boolean().optional(),
  productId: z.boolean().optional(),
  variantId: z.boolean().optional(),
  sizeId: z.boolean().optional(),
  productSlug: z.boolean().optional(),
  variantSlug: z.boolean().optional(),
  sku: z.boolean().optional(),
  name: z.boolean().optional(),
  image: z.boolean().optional(),
  size: z.boolean().optional(),
  price: z.boolean().optional(),
  quantity: z.boolean().optional(),
  shippingFee: z.boolean().optional(),
  totalPrice: z.boolean().optional(),
  cartId: z.boolean().optional(),
  storeId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  cart: z.union([z.boolean(),z.lazy(() => CartArgsSchema)]).optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
}).strict()

// CATEGORY
//------------------------------------------------------

export const CategoryIncludeSchema: z.ZodType<Prisma.CategoryInclude> = z.object({
  subCategories: z.union([z.boolean(),z.lazy(() => SubCategoryFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CategoryArgsSchema: z.ZodType<Prisma.CategoryDefaultArgs> = z.object({
  select: z.lazy(() => CategorySelectSchema).optional(),
  include: z.lazy(() => CategoryIncludeSchema).optional(),
}).strict();

export const CategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.CategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.CategoryCountOutputTypeSelect> = z.object({
  subCategories: z.boolean().optional(),
  products: z.boolean().optional(),
}).strict();

export const CategorySelectSchema: z.ZodType<Prisma.CategorySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  image: z.boolean().optional(),
  url: z.boolean().optional(),
  featured: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  subCategories: z.union([z.boolean(),z.lazy(() => SubCategoryFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COLOR
//------------------------------------------------------

export const ColorIncludeSchema: z.ZodType<Prisma.ColorInclude> = z.object({
  productVariant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
}).strict()

export const ColorArgsSchema: z.ZodType<Prisma.ColorDefaultArgs> = z.object({
  select: z.lazy(() => ColorSelectSchema).optional(),
  include: z.lazy(() => ColorIncludeSchema).optional(),
}).strict();

export const ColorSelectSchema: z.ZodType<Prisma.ColorSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  productVariantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  productVariant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
}).strict()

// COUNTRY
//------------------------------------------------------

export const CountryIncludeSchema: z.ZodType<Prisma.CountryInclude> = z.object({
  shippingRates: z.union([z.boolean(),z.lazy(() => ShippingRateFindManyArgsSchema)]).optional(),
  freeShippingCountries: z.union([z.boolean(),z.lazy(() => FreeShippingCountryFindManyArgsSchema)]).optional(),
  shippingAddresses: z.union([z.boolean(),z.lazy(() => ShippingAddressFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CountryArgsSchema: z.ZodType<Prisma.CountryDefaultArgs> = z.object({
  select: z.lazy(() => CountrySelectSchema).optional(),
  include: z.lazy(() => CountryIncludeSchema).optional(),
}).strict();

export const CountryCountOutputTypeArgsSchema: z.ZodType<Prisma.CountryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CountryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CountryCountOutputTypeSelectSchema: z.ZodType<Prisma.CountryCountOutputTypeSelect> = z.object({
  shippingRates: z.boolean().optional(),
  freeShippingCountries: z.boolean().optional(),
  shippingAddresses: z.boolean().optional(),
}).strict();

export const CountrySelectSchema: z.ZodType<Prisma.CountrySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  shippingRates: z.union([z.boolean(),z.lazy(() => ShippingRateFindManyArgsSchema)]).optional(),
  freeShippingCountries: z.union([z.boolean(),z.lazy(() => FreeShippingCountryFindManyArgsSchema)]).optional(),
  shippingAddresses: z.union([z.boolean(),z.lazy(() => ShippingAddressFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COUPON
//------------------------------------------------------

export const CouponIncludeSchema: z.ZodType<Prisma.CouponInclude> = z.object({
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => OrderGroupFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  carts: z.union([z.boolean(),z.lazy(() => CartFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CouponCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CouponArgsSchema: z.ZodType<Prisma.CouponDefaultArgs> = z.object({
  select: z.lazy(() => CouponSelectSchema).optional(),
  include: z.lazy(() => CouponIncludeSchema).optional(),
}).strict();

export const CouponCountOutputTypeArgsSchema: z.ZodType<Prisma.CouponCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CouponCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CouponCountOutputTypeSelectSchema: z.ZodType<Prisma.CouponCountOutputTypeSelect> = z.object({
  orders: z.boolean().optional(),
  users: z.boolean().optional(),
  carts: z.boolean().optional(),
}).strict();

export const CouponSelectSchema: z.ZodType<Prisma.CouponSelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  discount: z.boolean().optional(),
  storeId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => OrderGroupFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  carts: z.union([z.boolean(),z.lazy(() => CartFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CouponCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FREE SHIPPING COUNTRY
//------------------------------------------------------

export const FreeShippingCountryIncludeSchema: z.ZodType<Prisma.FreeShippingCountryInclude> = z.object({
  freeShipping: z.union([z.boolean(),z.lazy(() => FreeShippingArgsSchema)]).optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
}).strict()

export const FreeShippingCountryArgsSchema: z.ZodType<Prisma.FreeShippingCountryDefaultArgs> = z.object({
  select: z.lazy(() => FreeShippingCountrySelectSchema).optional(),
  include: z.lazy(() => FreeShippingCountryIncludeSchema).optional(),
}).strict();

export const FreeShippingCountrySelectSchema: z.ZodType<Prisma.FreeShippingCountrySelect> = z.object({
  id: z.boolean().optional(),
  freeShippingId: z.boolean().optional(),
  countryId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  freeShipping: z.union([z.boolean(),z.lazy(() => FreeShippingArgsSchema)]).optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
}).strict()

// FREE SHIPPING
//------------------------------------------------------

export const FreeShippingIncludeSchema: z.ZodType<Prisma.FreeShippingInclude> = z.object({
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  eligibaleCountries: z.union([z.boolean(),z.lazy(() => FreeShippingCountryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FreeShippingCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const FreeShippingArgsSchema: z.ZodType<Prisma.FreeShippingDefaultArgs> = z.object({
  select: z.lazy(() => FreeShippingSelectSchema).optional(),
  include: z.lazy(() => FreeShippingIncludeSchema).optional(),
}).strict();

export const FreeShippingCountOutputTypeArgsSchema: z.ZodType<Prisma.FreeShippingCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => FreeShippingCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FreeShippingCountOutputTypeSelectSchema: z.ZodType<Prisma.FreeShippingCountOutputTypeSelect> = z.object({
  eligibaleCountries: z.boolean().optional(),
}).strict();

export const FreeShippingSelectSchema: z.ZodType<Prisma.FreeShippingSelect> = z.object({
  id: z.boolean().optional(),
  productId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  eligibaleCountries: z.union([z.boolean(),z.lazy(() => FreeShippingCountryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FreeShippingCountOutputTypeArgsSchema)]).optional(),
}).strict()

// OFFER TAG
//------------------------------------------------------

export const OfferTagIncludeSchema: z.ZodType<Prisma.OfferTagInclude> = z.object({
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OfferTagCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OfferTagArgsSchema: z.ZodType<Prisma.OfferTagDefaultArgs> = z.object({
  select: z.lazy(() => OfferTagSelectSchema).optional(),
  include: z.lazy(() => OfferTagIncludeSchema).optional(),
}).strict();

export const OfferTagCountOutputTypeArgsSchema: z.ZodType<Prisma.OfferTagCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OfferTagCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OfferTagCountOutputTypeSelectSchema: z.ZodType<Prisma.OfferTagCountOutputTypeSelect> = z.object({
  products: z.boolean().optional(),
}).strict();

export const OfferTagSelectSchema: z.ZodType<Prisma.OfferTagSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OfferTagCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ORDER GROUP
//------------------------------------------------------

export const OrderGroupIncludeSchema: z.ZodType<Prisma.OrderGroupInclude> = z.object({
  items: z.union([z.boolean(),z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  order: z.union([z.boolean(),z.lazy(() => OrderArgsSchema)]).optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
  coupon: z.union([z.boolean(),z.lazy(() => CouponArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrderGroupCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrderGroupArgsSchema: z.ZodType<Prisma.OrderGroupDefaultArgs> = z.object({
  select: z.lazy(() => OrderGroupSelectSchema).optional(),
  include: z.lazy(() => OrderGroupIncludeSchema).optional(),
}).strict();

export const OrderGroupCountOutputTypeArgsSchema: z.ZodType<Prisma.OrderGroupCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrderGroupCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrderGroupCountOutputTypeSelectSchema: z.ZodType<Prisma.OrderGroupCountOutputTypeSelect> = z.object({
  items: z.boolean().optional(),
}).strict();

export const OrderGroupSelectSchema: z.ZodType<Prisma.OrderGroupSelect> = z.object({
  id: z.boolean().optional(),
  status: z.boolean().optional(),
  shippingService: z.boolean().optional(),
  shippingDeliveryMin: z.boolean().optional(),
  shippingDeliveryMax: z.boolean().optional(),
  shippingFees: z.boolean().optional(),
  subTotal: z.boolean().optional(),
  total: z.boolean().optional(),
  orderId: z.boolean().optional(),
  storeId: z.boolean().optional(),
  couponId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  items: z.union([z.boolean(),z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  order: z.union([z.boolean(),z.lazy(() => OrderArgsSchema)]).optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
  coupon: z.union([z.boolean(),z.lazy(() => CouponArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrderGroupCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ORDER ITEM
//------------------------------------------------------

export const OrderItemIncludeSchema: z.ZodType<Prisma.OrderItemInclude> = z.object({
  orderGroup: z.union([z.boolean(),z.lazy(() => OrderGroupArgsSchema)]).optional(),
}).strict()

export const OrderItemArgsSchema: z.ZodType<Prisma.OrderItemDefaultArgs> = z.object({
  select: z.lazy(() => OrderItemSelectSchema).optional(),
  include: z.lazy(() => OrderItemIncludeSchema).optional(),
}).strict();

export const OrderItemSelectSchema: z.ZodType<Prisma.OrderItemSelect> = z.object({
  id: z.boolean().optional(),
  productId: z.boolean().optional(),
  variantId: z.boolean().optional(),
  sizeId: z.boolean().optional(),
  productSlug: z.boolean().optional(),
  variantSlug: z.boolean().optional(),
  sku: z.boolean().optional(),
  name: z.boolean().optional(),
  image: z.boolean().optional(),
  size: z.boolean().optional(),
  quantity: z.boolean().optional(),
  shippingFee: z.boolean().optional(),
  price: z.boolean().optional(),
  totalPrice: z.boolean().optional(),
  orderGroupId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  orderGroup: z.union([z.boolean(),z.lazy(() => OrderGroupArgsSchema)]).optional(),
}).strict()

// ORDER
//------------------------------------------------------

export const OrderIncludeSchema: z.ZodType<Prisma.OrderInclude> = z.object({
  groups: z.union([z.boolean(),z.lazy(() => OrderGroupFindManyArgsSchema)]).optional(),
  paymentDetails: z.union([z.boolean(),z.lazy(() => PaymentDetailsArgsSchema)]).optional(),
  shippingAddress: z.union([z.boolean(),z.lazy(() => ShippingAddressArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrderCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrderArgsSchema: z.ZodType<Prisma.OrderDefaultArgs> = z.object({
  select: z.lazy(() => OrderSelectSchema).optional(),
  include: z.lazy(() => OrderIncludeSchema).optional(),
}).strict();

export const OrderCountOutputTypeArgsSchema: z.ZodType<Prisma.OrderCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrderCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrderCountOutputTypeSelectSchema: z.ZodType<Prisma.OrderCountOutputTypeSelect> = z.object({
  groups: z.boolean().optional(),
}).strict();

export const OrderSelectSchema: z.ZodType<Prisma.OrderSelect> = z.object({
  id: z.boolean().optional(),
  shippingFees: z.boolean().optional(),
  subTotal: z.boolean().optional(),
  total: z.boolean().optional(),
  orderStatus: z.boolean().optional(),
  paymentStatus: z.boolean().optional(),
  paymentMethod: z.boolean().optional(),
  shippingAddressId: z.boolean().optional(),
  userId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  groups: z.union([z.boolean(),z.lazy(() => OrderGroupFindManyArgsSchema)]).optional(),
  paymentDetails: z.union([z.boolean(),z.lazy(() => PaymentDetailsArgsSchema)]).optional(),
  shippingAddress: z.union([z.boolean(),z.lazy(() => ShippingAddressArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrderCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PAYMENT DETAILS
//------------------------------------------------------

export const PaymentDetailsIncludeSchema: z.ZodType<Prisma.PaymentDetailsInclude> = z.object({
  order: z.union([z.boolean(),z.lazy(() => OrderArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PaymentDetailsArgsSchema: z.ZodType<Prisma.PaymentDetailsDefaultArgs> = z.object({
  select: z.lazy(() => PaymentDetailsSelectSchema).optional(),
  include: z.lazy(() => PaymentDetailsIncludeSchema).optional(),
}).strict();

export const PaymentDetailsSelectSchema: z.ZodType<Prisma.PaymentDetailsSelect> = z.object({
  id: z.boolean().optional(),
  paymentInetntId: z.boolean().optional(),
  paymentMethod: z.boolean().optional(),
  status: z.boolean().optional(),
  amount: z.boolean().optional(),
  currency: z.boolean().optional(),
  orderId: z.boolean().optional(),
  userId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  order: z.union([z.boolean(),z.lazy(() => OrderArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// PRODUCT VARIANT
//------------------------------------------------------

export const ProductVariantIncludeSchema: z.ZodType<Prisma.ProductVariantInclude> = z.object({
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  sizes: z.union([z.boolean(),z.lazy(() => SizeFindManyArgsSchema)]).optional(),
  images: z.union([z.boolean(),z.lazy(() => ProductVariantImageFindManyArgsSchema)]).optional(),
  colors: z.union([z.boolean(),z.lazy(() => ColorFindManyArgsSchema)]).optional(),
  specs: z.union([z.boolean(),z.lazy(() => SpecFindManyArgsSchema)]).optional(),
  wishlist: z.union([z.boolean(),z.lazy(() => WishlistFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductVariantCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProductVariantArgsSchema: z.ZodType<Prisma.ProductVariantDefaultArgs> = z.object({
  select: z.lazy(() => ProductVariantSelectSchema).optional(),
  include: z.lazy(() => ProductVariantIncludeSchema).optional(),
}).strict();

export const ProductVariantCountOutputTypeArgsSchema: z.ZodType<Prisma.ProductVariantCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProductVariantCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProductVariantCountOutputTypeSelectSchema: z.ZodType<Prisma.ProductVariantCountOutputTypeSelect> = z.object({
  sizes: z.boolean().optional(),
  images: z.boolean().optional(),
  colors: z.boolean().optional(),
  specs: z.boolean().optional(),
  wishlist: z.boolean().optional(),
}).strict();

export const ProductVariantSelectSchema: z.ZodType<Prisma.ProductVariantSelect> = z.object({
  id: z.boolean().optional(),
  variantName: z.boolean().optional(),
  variantDescription: z.boolean().optional(),
  variantImage: z.boolean().optional(),
  slug: z.boolean().optional(),
  isSale: z.boolean().optional(),
  saleEndDate: z.boolean().optional(),
  sku: z.boolean().optional(),
  keywords: z.boolean().optional(),
  sales: z.boolean().optional(),
  weight: z.boolean().optional(),
  productId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  sizes: z.union([z.boolean(),z.lazy(() => SizeFindManyArgsSchema)]).optional(),
  images: z.union([z.boolean(),z.lazy(() => ProductVariantImageFindManyArgsSchema)]).optional(),
  colors: z.union([z.boolean(),z.lazy(() => ColorFindManyArgsSchema)]).optional(),
  specs: z.union([z.boolean(),z.lazy(() => SpecFindManyArgsSchema)]).optional(),
  wishlist: z.union([z.boolean(),z.lazy(() => WishlistFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductVariantCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PRODUCT
//------------------------------------------------------

export const ProductIncludeSchema: z.ZodType<Prisma.ProductInclude> = z.object({
  freeShipping: z.union([z.boolean(),z.lazy(() => FreeShippingArgsSchema)]).optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
  variants: z.union([z.boolean(),z.lazy(() => ProductVariantFindManyArgsSchema)]).optional(),
  specs: z.union([z.boolean(),z.lazy(() => SpecFindManyArgsSchema)]).optional(),
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  reviews: z.union([z.boolean(),z.lazy(() => ReviewFindManyArgsSchema)]).optional(),
  wishlist: z.union([z.boolean(),z.lazy(() => WishlistFindManyArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  subCategory: z.union([z.boolean(),z.lazy(() => SubCategoryArgsSchema)]).optional(),
  offerTag: z.union([z.boolean(),z.lazy(() => OfferTagArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProductArgsSchema: z.ZodType<Prisma.ProductDefaultArgs> = z.object({
  select: z.lazy(() => ProductSelectSchema).optional(),
  include: z.lazy(() => ProductIncludeSchema).optional(),
}).strict();

export const ProductCountOutputTypeArgsSchema: z.ZodType<Prisma.ProductCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProductCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProductCountOutputTypeSelectSchema: z.ZodType<Prisma.ProductCountOutputTypeSelect> = z.object({
  variants: z.boolean().optional(),
  specs: z.boolean().optional(),
  questions: z.boolean().optional(),
  reviews: z.boolean().optional(),
  wishlist: z.boolean().optional(),
}).strict();

export const ProductSelectSchema: z.ZodType<Prisma.ProductSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  slug: z.boolean().optional(),
  brand: z.boolean().optional(),
  rating: z.boolean().optional(),
  sales: z.boolean().optional(),
  numReviews: z.boolean().optional(),
  shippingFeeMethod: z.boolean().optional(),
  views: z.boolean().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  storeId: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  subCategoryId: z.boolean().optional(),
  offerTagId: z.boolean().optional(),
  freeShipping: z.union([z.boolean(),z.lazy(() => FreeShippingArgsSchema)]).optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
  variants: z.union([z.boolean(),z.lazy(() => ProductVariantFindManyArgsSchema)]).optional(),
  specs: z.union([z.boolean(),z.lazy(() => SpecFindManyArgsSchema)]).optional(),
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  reviews: z.union([z.boolean(),z.lazy(() => ReviewFindManyArgsSchema)]).optional(),
  wishlist: z.union([z.boolean(),z.lazy(() => WishlistFindManyArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  subCategory: z.union([z.boolean(),z.lazy(() => SubCategoryArgsSchema)]).optional(),
  offerTag: z.union([z.boolean(),z.lazy(() => OfferTagArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PRODUCT VARIANT IMAGE
//------------------------------------------------------

export const ProductVariantImageIncludeSchema: z.ZodType<Prisma.ProductVariantImageInclude> = z.object({
  productVariant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
}).strict()

export const ProductVariantImageArgsSchema: z.ZodType<Prisma.ProductVariantImageDefaultArgs> = z.object({
  select: z.lazy(() => ProductVariantImageSelectSchema).optional(),
  include: z.lazy(() => ProductVariantImageIncludeSchema).optional(),
}).strict();

export const ProductVariantImageSelectSchema: z.ZodType<Prisma.ProductVariantImageSelect> = z.object({
  id: z.boolean().optional(),
  url: z.boolean().optional(),
  alt: z.boolean().optional(),
  order: z.boolean().optional(),
  productVariantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  productVariant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
}).strict()

// QUESTION
//------------------------------------------------------

export const QuestionIncludeSchema: z.ZodType<Prisma.QuestionInclude> = z.object({
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
}).strict()

export const QuestionArgsSchema: z.ZodType<Prisma.QuestionDefaultArgs> = z.object({
  select: z.lazy(() => QuestionSelectSchema).optional(),
  include: z.lazy(() => QuestionIncludeSchema).optional(),
}).strict();

export const QuestionSelectSchema: z.ZodType<Prisma.QuestionSelect> = z.object({
  id: z.boolean().optional(),
  question: z.boolean().optional(),
  answer: z.boolean().optional(),
  productId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
}).strict()

// REVIEW IMAGE
//------------------------------------------------------

export const ReviewImageIncludeSchema: z.ZodType<Prisma.ReviewImageInclude> = z.object({
  review: z.union([z.boolean(),z.lazy(() => ReviewArgsSchema)]).optional(),
}).strict()

export const ReviewImageArgsSchema: z.ZodType<Prisma.ReviewImageDefaultArgs> = z.object({
  select: z.lazy(() => ReviewImageSelectSchema).optional(),
  include: z.lazy(() => ReviewImageIncludeSchema).optional(),
}).strict();

export const ReviewImageSelectSchema: z.ZodType<Prisma.ReviewImageSelect> = z.object({
  id: z.boolean().optional(),
  url: z.boolean().optional(),
  alt: z.boolean().optional(),
  reviewId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  review: z.union([z.boolean(),z.lazy(() => ReviewArgsSchema)]).optional(),
}).strict()

// REVIEW
//------------------------------------------------------

export const ReviewIncludeSchema: z.ZodType<Prisma.ReviewInclude> = z.object({
  images: z.union([z.boolean(),z.lazy(() => ReviewImageFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ReviewCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ReviewArgsSchema: z.ZodType<Prisma.ReviewDefaultArgs> = z.object({
  select: z.lazy(() => ReviewSelectSchema).optional(),
  include: z.lazy(() => ReviewIncludeSchema).optional(),
}).strict();

export const ReviewCountOutputTypeArgsSchema: z.ZodType<Prisma.ReviewCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ReviewCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ReviewCountOutputTypeSelectSchema: z.ZodType<Prisma.ReviewCountOutputTypeSelect> = z.object({
  images: z.boolean().optional(),
}).strict();

export const ReviewSelectSchema: z.ZodType<Prisma.ReviewSelect> = z.object({
  id: z.boolean().optional(),
  variant: z.boolean().optional(),
  review: z.boolean().optional(),
  rating: z.boolean().optional(),
  color: z.boolean().optional(),
  size: z.boolean().optional(),
  quantity: z.boolean().optional(),
  likes: z.boolean().optional(),
  userId: z.boolean().optional(),
  productId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  images: z.union([z.boolean(),z.lazy(() => ReviewImageFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ReviewCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SHIPPING ADDRESS
//------------------------------------------------------

export const ShippingAddressIncludeSchema: z.ZodType<Prisma.ShippingAddressInclude> = z.object({
  orders: z.union([z.boolean(),z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ShippingAddressCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ShippingAddressArgsSchema: z.ZodType<Prisma.ShippingAddressDefaultArgs> = z.object({
  select: z.lazy(() => ShippingAddressSelectSchema).optional(),
  include: z.lazy(() => ShippingAddressIncludeSchema).optional(),
}).strict();

export const ShippingAddressCountOutputTypeArgsSchema: z.ZodType<Prisma.ShippingAddressCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ShippingAddressCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ShippingAddressCountOutputTypeSelectSchema: z.ZodType<Prisma.ShippingAddressCountOutputTypeSelect> = z.object({
  orders: z.boolean().optional(),
}).strict();

export const ShippingAddressSelectSchema: z.ZodType<Prisma.ShippingAddressSelect> = z.object({
  id: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  phone: z.boolean().optional(),
  address1: z.boolean().optional(),
  address2: z.boolean().optional(),
  state: z.boolean().optional(),
  city: z.boolean().optional(),
  zip_code: z.boolean().optional(),
  default: z.boolean().optional(),
  userId: z.boolean().optional(),
  countryId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  orders: z.union([z.boolean(),z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ShippingAddressCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SHIPPING RATE
//------------------------------------------------------

export const ShippingRateIncludeSchema: z.ZodType<Prisma.ShippingRateInclude> = z.object({
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
}).strict()

export const ShippingRateArgsSchema: z.ZodType<Prisma.ShippingRateDefaultArgs> = z.object({
  select: z.lazy(() => ShippingRateSelectSchema).optional(),
  include: z.lazy(() => ShippingRateIncludeSchema).optional(),
}).strict();

export const ShippingRateSelectSchema: z.ZodType<Prisma.ShippingRateSelect> = z.object({
  id: z.boolean().optional(),
  shippingService: z.boolean().optional(),
  shippingFeePerItem: z.boolean().optional(),
  shippingFeeForAdditionalItem: z.boolean().optional(),
  shippingFeePerKg: z.boolean().optional(),
  shippingFeeFixed: z.boolean().optional(),
  deliveryTimeMin: z.boolean().optional(),
  deliveryTimeMax: z.boolean().optional(),
  returnPolicy: z.boolean().optional(),
  countryId: z.boolean().optional(),
  storeId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
  store: z.union([z.boolean(),z.lazy(() => StoreArgsSchema)]).optional(),
}).strict()

// SIZE
//------------------------------------------------------

export const SizeIncludeSchema: z.ZodType<Prisma.SizeInclude> = z.object({
  wishlist: z.union([z.boolean(),z.lazy(() => WishlistFindManyArgsSchema)]).optional(),
  productVariant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SizeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SizeArgsSchema: z.ZodType<Prisma.SizeDefaultArgs> = z.object({
  select: z.lazy(() => SizeSelectSchema).optional(),
  include: z.lazy(() => SizeIncludeSchema).optional(),
}).strict();

export const SizeCountOutputTypeArgsSchema: z.ZodType<Prisma.SizeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SizeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SizeCountOutputTypeSelectSchema: z.ZodType<Prisma.SizeCountOutputTypeSelect> = z.object({
  wishlist: z.boolean().optional(),
}).strict();

export const SizeSelectSchema: z.ZodType<Prisma.SizeSelect> = z.object({
  id: z.boolean().optional(),
  size: z.boolean().optional(),
  quantity: z.boolean().optional(),
  price: z.boolean().optional(),
  discount: z.boolean().optional(),
  productVariantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  wishlist: z.union([z.boolean(),z.lazy(() => WishlistFindManyArgsSchema)]).optional(),
  productVariant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SizeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SPEC
//------------------------------------------------------

export const SpecIncludeSchema: z.ZodType<Prisma.SpecInclude> = z.object({
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  variant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
}).strict()

export const SpecArgsSchema: z.ZodType<Prisma.SpecDefaultArgs> = z.object({
  select: z.lazy(() => SpecSelectSchema).optional(),
  include: z.lazy(() => SpecIncludeSchema).optional(),
}).strict();

export const SpecSelectSchema: z.ZodType<Prisma.SpecSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  value: z.boolean().optional(),
  productId: z.boolean().optional(),
  variantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  variant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
}).strict()

// STORE
//------------------------------------------------------

export const StoreIncludeSchema: z.ZodType<Prisma.StoreInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  shippingRates: z.union([z.boolean(),z.lazy(() => ShippingRateFindManyArgsSchema)]).optional(),
  followers: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  cartItems: z.union([z.boolean(),z.lazy(() => CartItemFindManyArgsSchema)]).optional(),
  orderGroups: z.union([z.boolean(),z.lazy(() => OrderGroupFindManyArgsSchema)]).optional(),
  coupons: z.union([z.boolean(),z.lazy(() => CouponFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => StoreCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const StoreArgsSchema: z.ZodType<Prisma.StoreDefaultArgs> = z.object({
  select: z.lazy(() => StoreSelectSchema).optional(),
  include: z.lazy(() => StoreIncludeSchema).optional(),
}).strict();

export const StoreCountOutputTypeArgsSchema: z.ZodType<Prisma.StoreCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => StoreCountOutputTypeSelectSchema).nullish(),
}).strict();

export const StoreCountOutputTypeSelectSchema: z.ZodType<Prisma.StoreCountOutputTypeSelect> = z.object({
  products: z.boolean().optional(),
  shippingRates: z.boolean().optional(),
  followers: z.boolean().optional(),
  cartItems: z.boolean().optional(),
  orderGroups: z.boolean().optional(),
  coupons: z.boolean().optional(),
}).strict();

export const StoreSelectSchema: z.ZodType<Prisma.StoreSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  url: z.boolean().optional(),
  logo: z.boolean().optional(),
  cover: z.boolean().optional(),
  status: z.boolean().optional(),
  averageRating: z.boolean().optional(),
  numReviews: z.boolean().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.boolean().optional(),
  defaultShippingService: z.boolean().optional(),
  defaultShippingFeePerItem: z.boolean().optional(),
  defaultShippingFeeForAdditionalItem: z.boolean().optional(),
  defaultShippingFeePerKg: z.boolean().optional(),
  defaultShippingFeeFixed: z.boolean().optional(),
  defaultDeliveryTimeMin: z.boolean().optional(),
  defaultDeliveryTimeMax: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  shippingRates: z.union([z.boolean(),z.lazy(() => ShippingRateFindManyArgsSchema)]).optional(),
  followers: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  cartItems: z.union([z.boolean(),z.lazy(() => CartItemFindManyArgsSchema)]).optional(),
  orderGroups: z.union([z.boolean(),z.lazy(() => OrderGroupFindManyArgsSchema)]).optional(),
  coupons: z.union([z.boolean(),z.lazy(() => CouponFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => StoreCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SUB CATEGORY
//------------------------------------------------------

export const SubCategoryIncludeSchema: z.ZodType<Prisma.SubCategoryInclude> = z.object({
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SubCategoryArgsSchema: z.ZodType<Prisma.SubCategoryDefaultArgs> = z.object({
  select: z.lazy(() => SubCategorySelectSchema).optional(),
  include: z.lazy(() => SubCategoryIncludeSchema).optional(),
}).strict();

export const SubCategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.SubCategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SubCategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SubCategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.SubCategoryCountOutputTypeSelect> = z.object({
  products: z.boolean().optional(),
}).strict();

export const SubCategorySelectSchema: z.ZodType<Prisma.SubCategorySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  image: z.boolean().optional(),
  url: z.boolean().optional(),
  featured: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  stores: z.union([z.boolean(),z.lazy(() => StoreFindManyArgsSchema)]).optional(),
  following: z.union([z.boolean(),z.lazy(() => StoreFindManyArgsSchema)]).optional(),
  reviews: z.union([z.boolean(),z.lazy(() => ReviewFindManyArgsSchema)]).optional(),
  cart: z.union([z.boolean(),z.lazy(() => CartArgsSchema)]).optional(),
  shippingAddresses: z.union([z.boolean(),z.lazy(() => ShippingAddressFindManyArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  wishlist: z.union([z.boolean(),z.lazy(() => WishlistFindManyArgsSchema)]).optional(),
  payments: z.union([z.boolean(),z.lazy(() => PaymentDetailsFindManyArgsSchema)]).optional(),
  coupons: z.union([z.boolean(),z.lazy(() => CouponFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  stores: z.boolean().optional(),
  following: z.boolean().optional(),
  reviews: z.boolean().optional(),
  shippingAddresses: z.boolean().optional(),
  orders: z.boolean().optional(),
  wishlist: z.boolean().optional(),
  payments: z.boolean().optional(),
  coupons: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  picture: z.boolean().optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  stores: z.union([z.boolean(),z.lazy(() => StoreFindManyArgsSchema)]).optional(),
  following: z.union([z.boolean(),z.lazy(() => StoreFindManyArgsSchema)]).optional(),
  reviews: z.union([z.boolean(),z.lazy(() => ReviewFindManyArgsSchema)]).optional(),
  cart: z.union([z.boolean(),z.lazy(() => CartArgsSchema)]).optional(),
  shippingAddresses: z.union([z.boolean(),z.lazy(() => ShippingAddressFindManyArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  wishlist: z.union([z.boolean(),z.lazy(() => WishlistFindManyArgsSchema)]).optional(),
  payments: z.union([z.boolean(),z.lazy(() => PaymentDetailsFindManyArgsSchema)]).optional(),
  coupons: z.union([z.boolean(),z.lazy(() => CouponFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// WISHLIST
//------------------------------------------------------

export const WishlistIncludeSchema: z.ZodType<Prisma.WishlistInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  variant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
  size: z.union([z.boolean(),z.lazy(() => SizeArgsSchema)]).optional(),
}).strict()

export const WishlistArgsSchema: z.ZodType<Prisma.WishlistDefaultArgs> = z.object({
  select: z.lazy(() => WishlistSelectSchema).optional(),
  include: z.lazy(() => WishlistIncludeSchema).optional(),
}).strict();

export const WishlistSelectSchema: z.ZodType<Prisma.WishlistSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  productId: z.boolean().optional(),
  variantId: z.boolean().optional(),
  sizeId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  variant: z.union([z.boolean(),z.lazy(() => ProductVariantArgsSchema)]).optional(),
  size: z.union([z.boolean(),z.lazy(() => SizeArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const CartWhereInputSchema: z.ZodType<Prisma.CartWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CartWhereInputSchema),z.lazy(() => CartWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CartWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CartWhereInputSchema),z.lazy(() => CartWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  couponId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  coupon: z.union([ z.lazy(() => CouponNullableScalarRelationFilterSchema),z.lazy(() => CouponWhereInputSchema) ]).optional().nullable(),
  cartItems: z.lazy(() => CartItemListRelationFilterSchema).optional()
}).strict();

export const CartOrderByWithRelationInputSchema: z.ZodType<Prisma.CartOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  coupon: z.lazy(() => CouponOrderByWithRelationInputSchema).optional(),
  cartItems: z.lazy(() => CartItemOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CartWhereUniqueInputSchema: z.ZodType<Prisma.CartWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    userId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    userId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  userId: z.string().optional(),
  AND: z.union([ z.lazy(() => CartWhereInputSchema),z.lazy(() => CartWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CartWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CartWhereInputSchema),z.lazy(() => CartWhereInputSchema).array() ]).optional(),
  couponId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  coupon: z.union([ z.lazy(() => CouponNullableScalarRelationFilterSchema),z.lazy(() => CouponWhereInputSchema) ]).optional().nullable(),
  cartItems: z.lazy(() => CartItemListRelationFilterSchema).optional()
}).strict());

export const CartOrderByWithAggregationInputSchema: z.ZodType<Prisma.CartOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CartCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CartAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CartMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CartMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CartSumOrderByAggregateInputSchema).optional()
}).strict();

export const CartScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CartScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CartScalarWhereWithAggregatesInputSchema),z.lazy(() => CartScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CartScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CartScalarWhereWithAggregatesInputSchema),z.lazy(() => CartScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  couponId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  shippingFees: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CartItemWhereInputSchema: z.ZodType<Prisma.CartItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CartItemWhereInputSchema),z.lazy(() => CartItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CartItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CartItemWhereInputSchema),z.lazy(() => CartItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingFee: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cartId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  cart: z.union([ z.lazy(() => CartScalarRelationFilterSchema),z.lazy(() => CartWhereInputSchema) ]).optional(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
}).strict();

export const CartItemOrderByWithRelationInputSchema: z.ZodType<Prisma.CartItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  cartId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  cart: z.lazy(() => CartOrderByWithRelationInputSchema).optional(),
  store: z.lazy(() => StoreOrderByWithRelationInputSchema).optional()
}).strict();

export const CartItemWhereUniqueInputSchema: z.ZodType<Prisma.CartItemWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => CartItemWhereInputSchema),z.lazy(() => CartItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CartItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CartItemWhereInputSchema),z.lazy(() => CartItemWhereInputSchema).array() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  shippingFee: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cartId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  cart: z.union([ z.lazy(() => CartScalarRelationFilterSchema),z.lazy(() => CartWhereInputSchema) ]).optional(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
}).strict());

export const CartItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.CartItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  cartId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CartItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CartItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CartItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CartItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CartItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const CartItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CartItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CartItemScalarWhereWithAggregatesInputSchema),z.lazy(() => CartItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CartItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CartItemScalarWhereWithAggregatesInputSchema),z.lazy(() => CartItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productSlug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantSlug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sku: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  shippingFee: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  totalPrice: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  cartId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CategoryWhereInputSchema: z.ZodType<Prisma.CategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  subCategories: z.lazy(() => SubCategoryListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict();

export const CategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.CategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  subCategories: z.lazy(() => SubCategoryOrderByRelationAggregateInputSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CategoryWhereUniqueInputSchema: z.ZodType<Prisma.CategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    url: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    url: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  url: z.string().optional(),
  AND: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  subCategories: z.lazy(() => SubCategoryListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict());

export const CategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.CategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CategoryCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CategoryMinOrderByAggregateInputSchema).optional()
}).strict();

export const CategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  featured: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ColorWhereInputSchema: z.ZodType<Prisma.ColorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ColorWhereInputSchema),z.lazy(() => ColorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ColorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ColorWhereInputSchema),z.lazy(() => ColorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  productVariant: z.union([ z.lazy(() => ProductVariantScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
}).strict();

export const ColorOrderByWithRelationInputSchema: z.ZodType<Prisma.ColorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  productVariant: z.lazy(() => ProductVariantOrderByWithRelationInputSchema).optional()
}).strict();

export const ColorWhereUniqueInputSchema: z.ZodType<Prisma.ColorWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => ColorWhereInputSchema),z.lazy(() => ColorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ColorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ColorWhereInputSchema),z.lazy(() => ColorWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  productVariant: z.union([ z.lazy(() => ProductVariantScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
}).strict());

export const ColorOrderByWithAggregationInputSchema: z.ZodType<Prisma.ColorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ColorCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ColorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ColorMinOrderByAggregateInputSchema).optional()
}).strict();

export const ColorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ColorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ColorScalarWhereWithAggregatesInputSchema),z.lazy(() => ColorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ColorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ColorScalarWhereWithAggregatesInputSchema),z.lazy(() => ColorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productVariantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CountryWhereInputSchema: z.ZodType<Prisma.CountryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  shippingRates: z.lazy(() => ShippingRateListRelationFilterSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryListRelationFilterSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressListRelationFilterSchema).optional()
}).strict();

export const CountryOrderByWithRelationInputSchema: z.ZodType<Prisma.CountryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateOrderByRelationAggregateInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryOrderByRelationAggregateInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CountryWhereUniqueInputSchema: z.ZodType<Prisma.CountryWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    name: z.string(),
    code: z.string()
  }),
  z.object({
    id: z.string().uuid(),
    name: z.string(),
  }),
  z.object({
    id: z.string().uuid(),
    code: z.string(),
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    name: z.string(),
    code: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  name: z.string().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  shippingRates: z.lazy(() => ShippingRateListRelationFilterSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryListRelationFilterSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressListRelationFilterSchema).optional()
}).strict());

export const CountryOrderByWithAggregationInputSchema: z.ZodType<Prisma.CountryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CountryCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CountryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CountryMinOrderByAggregateInputSchema).optional()
}).strict();

export const CountryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CountryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CountryScalarWhereWithAggregatesInputSchema),z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryScalarWhereWithAggregatesInputSchema),z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CouponWhereInputSchema: z.ZodType<Prisma.CouponWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CouponWhereInputSchema),z.lazy(() => CouponWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CouponWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CouponWhereInputSchema),z.lazy(() => CouponWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  endDate: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  discount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
  orders: z.lazy(() => OrderGroupListRelationFilterSchema).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  carts: z.lazy(() => CartListRelationFilterSchema).optional()
}).strict();

export const CouponOrderByWithRelationInputSchema: z.ZodType<Prisma.CouponOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  store: z.lazy(() => StoreOrderByWithRelationInputSchema).optional(),
  orders: z.lazy(() => OrderGroupOrderByRelationAggregateInputSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  carts: z.lazy(() => CartOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CouponWhereUniqueInputSchema: z.ZodType<Prisma.CouponWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    code: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => CouponWhereInputSchema),z.lazy(() => CouponWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CouponWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CouponWhereInputSchema),z.lazy(() => CouponWhereInputSchema).array() ]).optional(),
  startDate: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  endDate: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  discount: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
  orders: z.lazy(() => OrderGroupListRelationFilterSchema).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  carts: z.lazy(() => CartListRelationFilterSchema).optional()
}).strict());

export const CouponOrderByWithAggregationInputSchema: z.ZodType<Prisma.CouponOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CouponCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CouponAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CouponMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CouponMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CouponSumOrderByAggregateInputSchema).optional()
}).strict();

export const CouponScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CouponScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CouponScalarWhereWithAggregatesInputSchema),z.lazy(() => CouponScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CouponScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CouponScalarWhereWithAggregatesInputSchema),z.lazy(() => CouponScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  endDate: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  discount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  storeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FreeShippingCountryWhereInputSchema: z.ZodType<Prisma.FreeShippingCountryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FreeShippingCountryWhereInputSchema),z.lazy(() => FreeShippingCountryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FreeShippingCountryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FreeShippingCountryWhereInputSchema),z.lazy(() => FreeShippingCountryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  freeShippingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  freeShipping: z.union([ z.lazy(() => FreeShippingScalarRelationFilterSchema),z.lazy(() => FreeShippingWhereInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryOrderByWithRelationInputSchema: z.ZodType<Prisma.FreeShippingCountryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  freeShippingId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  freeShipping: z.lazy(() => FreeShippingOrderByWithRelationInputSchema).optional(),
  country: z.lazy(() => CountryOrderByWithRelationInputSchema).optional()
}).strict();

export const FreeShippingCountryWhereUniqueInputSchema: z.ZodType<Prisma.FreeShippingCountryWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => FreeShippingCountryWhereInputSchema),z.lazy(() => FreeShippingCountryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FreeShippingCountryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FreeShippingCountryWhereInputSchema),z.lazy(() => FreeShippingCountryWhereInputSchema).array() ]).optional(),
  freeShippingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  freeShipping: z.union([ z.lazy(() => FreeShippingScalarRelationFilterSchema),z.lazy(() => FreeShippingWhereInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
}).strict());

export const FreeShippingCountryOrderByWithAggregationInputSchema: z.ZodType<Prisma.FreeShippingCountryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  freeShippingId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FreeShippingCountryCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FreeShippingCountryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FreeShippingCountryMinOrderByAggregateInputSchema).optional()
}).strict();

export const FreeShippingCountryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FreeShippingCountryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FreeShippingCountryScalarWhereWithAggregatesInputSchema),z.lazy(() => FreeShippingCountryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FreeShippingCountryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FreeShippingCountryScalarWhereWithAggregatesInputSchema),z.lazy(() => FreeShippingCountryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  freeShippingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FreeShippingWhereInputSchema: z.ZodType<Prisma.FreeShippingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FreeShippingWhereInputSchema),z.lazy(() => FreeShippingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FreeShippingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FreeShippingWhereInputSchema),z.lazy(() => FreeShippingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryListRelationFilterSchema).optional()
}).strict();

export const FreeShippingOrderByWithRelationInputSchema: z.ZodType<Prisma.FreeShippingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryOrderByRelationAggregateInputSchema).optional()
}).strict();

export const FreeShippingWhereUniqueInputSchema: z.ZodType<Prisma.FreeShippingWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    productId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    productId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  productId: z.string().optional(),
  AND: z.union([ z.lazy(() => FreeShippingWhereInputSchema),z.lazy(() => FreeShippingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FreeShippingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FreeShippingWhereInputSchema),z.lazy(() => FreeShippingWhereInputSchema).array() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryListRelationFilterSchema).optional()
}).strict());

export const FreeShippingOrderByWithAggregationInputSchema: z.ZodType<Prisma.FreeShippingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FreeShippingCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FreeShippingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FreeShippingMinOrderByAggregateInputSchema).optional()
}).strict();

export const FreeShippingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FreeShippingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FreeShippingScalarWhereWithAggregatesInputSchema),z.lazy(() => FreeShippingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FreeShippingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FreeShippingScalarWhereWithAggregatesInputSchema),z.lazy(() => FreeShippingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OfferTagWhereInputSchema: z.ZodType<Prisma.OfferTagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OfferTagWhereInputSchema),z.lazy(() => OfferTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OfferTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OfferTagWhereInputSchema),z.lazy(() => OfferTagWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict();

export const OfferTagOrderByWithRelationInputSchema: z.ZodType<Prisma.OfferTagOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OfferTagWhereUniqueInputSchema: z.ZodType<Prisma.OfferTagWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    url: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    url: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  url: z.string().optional(),
  AND: z.union([ z.lazy(() => OfferTagWhereInputSchema),z.lazy(() => OfferTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OfferTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OfferTagWhereInputSchema),z.lazy(() => OfferTagWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict());

export const OfferTagOrderByWithAggregationInputSchema: z.ZodType<Prisma.OfferTagOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OfferTagCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OfferTagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OfferTagMinOrderByAggregateInputSchema).optional()
}).strict();

export const OfferTagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OfferTagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OfferTagScalarWhereWithAggregatesInputSchema),z.lazy(() => OfferTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OfferTagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OfferTagScalarWhereWithAggregatesInputSchema),z.lazy(() => OfferTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrderGroupWhereInputSchema: z.ZodType<Prisma.OrderGroupWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderGroupWhereInputSchema),z.lazy(() => OrderGroupWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderGroupWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderGroupWhereInputSchema),z.lazy(() => OrderGroupWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  shippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingDeliveryMin: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingDeliveryMax: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  couponId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  items: z.lazy(() => OrderItemListRelationFilterSchema).optional(),
  order: z.union([ z.lazy(() => OrderScalarRelationFilterSchema),z.lazy(() => OrderWhereInputSchema) ]).optional(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
  coupon: z.union([ z.lazy(() => CouponNullableScalarRelationFilterSchema),z.lazy(() => CouponWhereInputSchema) ]).optional().nullable(),
}).strict();

export const OrderGroupOrderByWithRelationInputSchema: z.ZodType<Prisma.OrderGroupOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMin: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMax: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  items: z.lazy(() => OrderItemOrderByRelationAggregateInputSchema).optional(),
  order: z.lazy(() => OrderOrderByWithRelationInputSchema).optional(),
  store: z.lazy(() => StoreOrderByWithRelationInputSchema).optional(),
  coupon: z.lazy(() => CouponOrderByWithRelationInputSchema).optional()
}).strict();

export const OrderGroupWhereUniqueInputSchema: z.ZodType<Prisma.OrderGroupWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => OrderGroupWhereInputSchema),z.lazy(() => OrderGroupWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderGroupWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderGroupWhereInputSchema),z.lazy(() => OrderGroupWhereInputSchema).array() ]).optional(),
  status: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  shippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingDeliveryMin: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  shippingDeliveryMax: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  couponId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  items: z.lazy(() => OrderItemListRelationFilterSchema).optional(),
  order: z.union([ z.lazy(() => OrderScalarRelationFilterSchema),z.lazy(() => OrderWhereInputSchema) ]).optional(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
  coupon: z.union([ z.lazy(() => CouponNullableScalarRelationFilterSchema),z.lazy(() => CouponWhereInputSchema) ]).optional().nullable(),
}).strict());

export const OrderGroupOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrderGroupOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMin: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMax: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrderGroupCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrderGroupAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrderGroupMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrderGroupMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrderGroupSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrderGroupScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrderGroupScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrderGroupScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderGroupScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderGroupScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderGroupScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderGroupScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumOrderStatusWithAggregatesFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  shippingService: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  shippingDeliveryMin: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  shippingDeliveryMax: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  shippingFees: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  orderId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  couponId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrderItemWhereInputSchema: z.ZodType<Prisma.OrderItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderItemWhereInputSchema),z.lazy(() => OrderItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderItemWhereInputSchema),z.lazy(() => OrderItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingFee: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderGroupId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumProductStatusFilterSchema),z.lazy(() => ProductStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  orderGroup: z.union([ z.lazy(() => OrderGroupScalarRelationFilterSchema),z.lazy(() => OrderGroupWhereInputSchema) ]).optional(),
}).strict();

export const OrderItemOrderByWithRelationInputSchema: z.ZodType<Prisma.OrderItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  orderGroupId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  orderGroup: z.lazy(() => OrderGroupOrderByWithRelationInputSchema).optional()
}).strict();

export const OrderItemWhereUniqueInputSchema: z.ZodType<Prisma.OrderItemWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => OrderItemWhereInputSchema),z.lazy(() => OrderItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderItemWhereInputSchema),z.lazy(() => OrderItemWhereInputSchema).array() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  shippingFee: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderGroupId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumProductStatusFilterSchema),z.lazy(() => ProductStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  orderGroup: z.union([ z.lazy(() => OrderGroupScalarRelationFilterSchema),z.lazy(() => OrderGroupWhereInputSchema) ]).optional(),
}).strict());

export const OrderItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrderItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  orderGroupId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrderItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrderItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrderItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrderItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrderItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrderItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrderItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productSlug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantSlug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sku: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  shippingFee: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  totalPrice: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  orderGroupId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumProductStatusWithAggregatesFilterSchema),z.lazy(() => ProductStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrderWhereInputSchema: z.ZodType<Prisma.OrderWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderWhereInputSchema),z.lazy(() => OrderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderWhereInputSchema),z.lazy(() => OrderWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderStatus: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => EnumPaymentMethodNullableFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  groups: z.lazy(() => OrderGroupListRelationFilterSchema).optional(),
  paymentDetails: z.union([ z.lazy(() => PaymentDetailsNullableScalarRelationFilterSchema),z.lazy(() => PaymentDetailsWhereInputSchema) ]).optional().nullable(),
  shippingAddress: z.union([ z.lazy(() => ShippingAddressScalarRelationFilterSchema),z.lazy(() => ShippingAddressWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const OrderOrderByWithRelationInputSchema: z.ZodType<Prisma.OrderOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  shippingAddressId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  groups: z.lazy(() => OrderGroupOrderByRelationAggregateInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsOrderByWithRelationInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const OrderWhereUniqueInputSchema: z.ZodType<Prisma.OrderWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => OrderWhereInputSchema),z.lazy(() => OrderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderWhereInputSchema),z.lazy(() => OrderWhereInputSchema).array() ]).optional(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderStatus: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => EnumPaymentMethodNullableFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  groups: z.lazy(() => OrderGroupListRelationFilterSchema).optional(),
  paymentDetails: z.union([ z.lazy(() => PaymentDetailsNullableScalarRelationFilterSchema),z.lazy(() => PaymentDetailsWhereInputSchema) ]).optional().nullable(),
  shippingAddress: z.union([ z.lazy(() => ShippingAddressScalarRelationFilterSchema),z.lazy(() => ShippingAddressWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const OrderOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrderOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  shippingAddressId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrderCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrderAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrderMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrderMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrderSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrderScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrderScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrderScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  shippingFees: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  orderStatus: z.union([ z.lazy(() => EnumOrderStatusWithAggregatesFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => EnumPaymentStatusWithAggregatesFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => EnumPaymentMethodNullableWithAggregatesFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PaymentDetailsWhereInputSchema: z.ZodType<Prisma.PaymentDetailsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentDetailsWhereInputSchema),z.lazy(() => PaymentDetailsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentDetailsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentDetailsWhereInputSchema),z.lazy(() => PaymentDetailsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  paymentInetntId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  paymentMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  orderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  order: z.union([ z.lazy(() => OrderScalarRelationFilterSchema),z.lazy(() => OrderWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PaymentDetailsOrderByWithRelationInputSchema: z.ZodType<Prisma.PaymentDetailsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  paymentInetntId: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => OrderOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PaymentDetailsWhereUniqueInputSchema: z.ZodType<Prisma.PaymentDetailsWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    orderId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    orderId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  orderId: z.string().optional(),
  AND: z.union([ z.lazy(() => PaymentDetailsWhereInputSchema),z.lazy(() => PaymentDetailsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentDetailsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentDetailsWhereInputSchema),z.lazy(() => PaymentDetailsWhereInputSchema).array() ]).optional(),
  paymentInetntId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  paymentMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  order: z.union([ z.lazy(() => OrderScalarRelationFilterSchema),z.lazy(() => OrderWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PaymentDetailsOrderByWithAggregationInputSchema: z.ZodType<Prisma.PaymentDetailsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  paymentInetntId: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PaymentDetailsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PaymentDetailsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PaymentDetailsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PaymentDetailsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PaymentDetailsSumOrderByAggregateInputSchema).optional()
}).strict();

export const PaymentDetailsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PaymentDetailsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentDetailsScalarWhereWithAggregatesInputSchema),z.lazy(() => PaymentDetailsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentDetailsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentDetailsScalarWhereWithAggregatesInputSchema),z.lazy(() => PaymentDetailsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  paymentInetntId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  paymentMethod: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  orderId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductVariantWhereInputSchema: z.ZodType<Prisma.ProductVariantWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductVariantWhereInputSchema),z.lazy(() => ProductVariantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductVariantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductVariantWhereInputSchema),z.lazy(() => ProductVariantWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  variantImage: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isSale: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  saleEndDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  keywords: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sales: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeListRelationFilterSchema).optional(),
  images: z.lazy(() => ProductVariantImageListRelationFilterSchema).optional(),
  colors: z.lazy(() => ColorListRelationFilterSchema).optional(),
  specs: z.lazy(() => SpecListRelationFilterSchema).optional(),
  wishlist: z.lazy(() => WishlistListRelationFilterSchema).optional()
}).strict();

export const ProductVariantOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductVariantOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variantName: z.lazy(() => SortOrderSchema).optional(),
  variantDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  variantImage: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  isSale: z.lazy(() => SortOrderSchema).optional(),
  saleEndDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  keywords: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional(),
  sizes: z.lazy(() => SizeOrderByRelationAggregateInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageOrderByRelationAggregateInputSchema).optional(),
  colors: z.lazy(() => ColorOrderByRelationAggregateInputSchema).optional(),
  specs: z.lazy(() => SpecOrderByRelationAggregateInputSchema).optional(),
  wishlist: z.lazy(() => WishlistOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProductVariantWhereUniqueInputSchema: z.ZodType<Prisma.ProductVariantWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    slug: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => ProductVariantWhereInputSchema),z.lazy(() => ProductVariantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductVariantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductVariantWhereInputSchema),z.lazy(() => ProductVariantWhereInputSchema).array() ]).optional(),
  variantName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  variantImage: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isSale: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  saleEndDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  keywords: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sales: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  weight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeListRelationFilterSchema).optional(),
  images: z.lazy(() => ProductVariantImageListRelationFilterSchema).optional(),
  colors: z.lazy(() => ColorListRelationFilterSchema).optional(),
  specs: z.lazy(() => SpecListRelationFilterSchema).optional(),
  wishlist: z.lazy(() => WishlistListRelationFilterSchema).optional()
}).strict());

export const ProductVariantOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductVariantOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variantName: z.lazy(() => SortOrderSchema).optional(),
  variantDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  variantImage: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  isSale: z.lazy(() => SortOrderSchema).optional(),
  saleEndDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  keywords: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductVariantCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProductVariantAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductVariantMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductVariantMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProductVariantSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProductVariantScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductVariantScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductVariantScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductVariantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductVariantScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductVariantScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductVariantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantDescription: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  variantImage: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isSale: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  saleEndDate: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sku: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  keywords: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sales: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  weight: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductWhereInputSchema: z.ZodType<Prisma.ProductWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  brand: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sales: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  numReviews: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => EnumShippingFeeMethodFilterSchema),z.lazy(() => ShippingFeeMethodSchema) ]).optional(),
  views: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  freeShippingForAllCountries: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subCategoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  offerTagId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  freeShipping: z.union([ z.lazy(() => FreeShippingNullableScalarRelationFilterSchema),z.lazy(() => FreeShippingWhereInputSchema) ]).optional().nullable(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
  variants: z.lazy(() => ProductVariantListRelationFilterSchema).optional(),
  specs: z.lazy(() => SpecListRelationFilterSchema).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  reviews: z.lazy(() => ReviewListRelationFilterSchema).optional(),
  wishlist: z.lazy(() => WishlistListRelationFilterSchema).optional(),
  category: z.union([ z.lazy(() => CategoryScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  subCategory: z.union([ z.lazy(() => SubCategoryScalarRelationFilterSchema),z.lazy(() => SubCategoryWhereInputSchema) ]).optional(),
  offerTag: z.union([ z.lazy(() => OfferTagNullableScalarRelationFilterSchema),z.lazy(() => OfferTagWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ProductOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeMethod: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  freeShippingForAllCountries: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subCategoryId: z.lazy(() => SortOrderSchema).optional(),
  offerTagId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingOrderByWithRelationInputSchema).optional(),
  store: z.lazy(() => StoreOrderByWithRelationInputSchema).optional(),
  variants: z.lazy(() => ProductVariantOrderByRelationAggregateInputSchema).optional(),
  specs: z.lazy(() => SpecOrderByRelationAggregateInputSchema).optional(),
  questions: z.lazy(() => QuestionOrderByRelationAggregateInputSchema).optional(),
  reviews: z.lazy(() => ReviewOrderByRelationAggregateInputSchema).optional(),
  wishlist: z.lazy(() => WishlistOrderByRelationAggregateInputSchema).optional(),
  category: z.lazy(() => CategoryOrderByWithRelationInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryOrderByWithRelationInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagOrderByWithRelationInputSchema).optional()
}).strict();

export const ProductWhereUniqueInputSchema: z.ZodType<Prisma.ProductWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    slug: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  brand: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sales: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  numReviews: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => EnumShippingFeeMethodFilterSchema),z.lazy(() => ShippingFeeMethodSchema) ]).optional(),
  views: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  freeShippingForAllCountries: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subCategoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  offerTagId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  freeShipping: z.union([ z.lazy(() => FreeShippingNullableScalarRelationFilterSchema),z.lazy(() => FreeShippingWhereInputSchema) ]).optional().nullable(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
  variants: z.lazy(() => ProductVariantListRelationFilterSchema).optional(),
  specs: z.lazy(() => SpecListRelationFilterSchema).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  reviews: z.lazy(() => ReviewListRelationFilterSchema).optional(),
  wishlist: z.lazy(() => WishlistListRelationFilterSchema).optional(),
  category: z.union([ z.lazy(() => CategoryScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  subCategory: z.union([ z.lazy(() => SubCategoryScalarRelationFilterSchema),z.lazy(() => SubCategoryWhereInputSchema) ]).optional(),
  offerTag: z.union([ z.lazy(() => OfferTagNullableScalarRelationFilterSchema),z.lazy(() => OfferTagWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ProductOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeMethod: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  freeShippingForAllCountries: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subCategoryId: z.lazy(() => SortOrderSchema).optional(),
  offerTagId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProductCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProductAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProductSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProductScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  brand: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  sales: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  numReviews: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => EnumShippingFeeMethodWithAggregatesFilterSchema),z.lazy(() => ShippingFeeMethodSchema) ]).optional(),
  views: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  freeShippingForAllCountries: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  storeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  subCategoryId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  offerTagId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProductVariantImageWhereInputSchema: z.ZodType<Prisma.ProductVariantImageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductVariantImageWhereInputSchema),z.lazy(() => ProductVariantImageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductVariantImageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductVariantImageWhereInputSchema),z.lazy(() => ProductVariantImageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alt: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  productVariant: z.union([ z.lazy(() => ProductVariantScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
}).strict();

export const ProductVariantImageOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductVariantImageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  order: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  productVariant: z.lazy(() => ProductVariantOrderByWithRelationInputSchema).optional()
}).strict();

export const ProductVariantImageWhereUniqueInputSchema: z.ZodType<Prisma.ProductVariantImageWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => ProductVariantImageWhereInputSchema),z.lazy(() => ProductVariantImageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductVariantImageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductVariantImageWhereInputSchema),z.lazy(() => ProductVariantImageWhereInputSchema).array() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alt: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  productVariant: z.union([ z.lazy(() => ProductVariantScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
}).strict());

export const ProductVariantImageOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductVariantImageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  order: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductVariantImageCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProductVariantImageAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductVariantImageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductVariantImageMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProductVariantImageSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProductVariantImageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductVariantImageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductVariantImageScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductVariantImageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductVariantImageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductVariantImageScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductVariantImageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  alt: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  productVariantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const QuestionWhereInputSchema: z.ZodType<Prisma.QuestionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionWhereInputSchema),z.lazy(() => QuestionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionWhereInputSchema),z.lazy(() => QuestionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  question: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  answer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict();

export const QuestionOrderByWithRelationInputSchema: z.ZodType<Prisma.QuestionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  question: z.lazy(() => SortOrderSchema).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional()
}).strict();

export const QuestionWhereUniqueInputSchema: z.ZodType<Prisma.QuestionWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => QuestionWhereInputSchema),z.lazy(() => QuestionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionWhereInputSchema),z.lazy(() => QuestionWhereInputSchema).array() ]).optional(),
  question: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  answer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict());

export const QuestionOrderByWithAggregationInputSchema: z.ZodType<Prisma.QuestionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  question: z.lazy(() => SortOrderSchema).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => QuestionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => QuestionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => QuestionMinOrderByAggregateInputSchema).optional()
}).strict();

export const QuestionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.QuestionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema),z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema),z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  question: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  answer: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ReviewImageWhereInputSchema: z.ZodType<Prisma.ReviewImageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReviewImageWhereInputSchema),z.lazy(() => ReviewImageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReviewImageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReviewImageWhereInputSchema),z.lazy(() => ReviewImageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alt: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  review: z.union([ z.lazy(() => ReviewScalarRelationFilterSchema),z.lazy(() => ReviewWhereInputSchema) ]).optional(),
}).strict();

export const ReviewImageOrderByWithRelationInputSchema: z.ZodType<Prisma.ReviewImageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  reviewId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  review: z.lazy(() => ReviewOrderByWithRelationInputSchema).optional()
}).strict();

export const ReviewImageWhereUniqueInputSchema: z.ZodType<Prisma.ReviewImageWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => ReviewImageWhereInputSchema),z.lazy(() => ReviewImageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReviewImageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReviewImageWhereInputSchema),z.lazy(() => ReviewImageWhereInputSchema).array() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alt: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  review: z.union([ z.lazy(() => ReviewScalarRelationFilterSchema),z.lazy(() => ReviewWhereInputSchema) ]).optional(),
}).strict());

export const ReviewImageOrderByWithAggregationInputSchema: z.ZodType<Prisma.ReviewImageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  reviewId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ReviewImageCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ReviewImageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ReviewImageMinOrderByAggregateInputSchema).optional()
}).strict();

export const ReviewImageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ReviewImageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ReviewImageScalarWhereWithAggregatesInputSchema),z.lazy(() => ReviewImageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReviewImageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReviewImageScalarWhereWithAggregatesInputSchema),z.lazy(() => ReviewImageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  alt: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reviewId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ReviewWhereInputSchema: z.ZodType<Prisma.ReviewWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReviewWhereInputSchema),z.lazy(() => ReviewWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReviewWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReviewWhereInputSchema),z.lazy(() => ReviewWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variant: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  review: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  likes: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  images: z.lazy(() => ReviewImageListRelationFilterSchema).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict();

export const ReviewOrderByWithRelationInputSchema: z.ZodType<Prisma.ReviewOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variant: z.lazy(() => SortOrderSchema).optional(),
  review: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  images: z.lazy(() => ReviewImageOrderByRelationAggregateInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional()
}).strict();

export const ReviewWhereUniqueInputSchema: z.ZodType<Prisma.ReviewWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => ReviewWhereInputSchema),z.lazy(() => ReviewWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReviewWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReviewWhereInputSchema),z.lazy(() => ReviewWhereInputSchema).array() ]).optional(),
  variant: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  review: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  likes: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  images: z.lazy(() => ReviewImageListRelationFilterSchema).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict());

export const ReviewOrderByWithAggregationInputSchema: z.ZodType<Prisma.ReviewOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variant: z.lazy(() => SortOrderSchema).optional(),
  review: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ReviewCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ReviewAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ReviewMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ReviewMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ReviewSumOrderByAggregateInputSchema).optional()
}).strict();

export const ReviewScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ReviewScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ReviewScalarWhereWithAggregatesInputSchema),z.lazy(() => ReviewScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReviewScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReviewScalarWhereWithAggregatesInputSchema),z.lazy(() => ReviewScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variant: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  review: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  color: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  likes: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ShippingAddressWhereInputSchema: z.ZodType<Prisma.ShippingAddressWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShippingAddressWhereInputSchema),z.lazy(() => ShippingAddressWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShippingAddressWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShippingAddressWhereInputSchema),z.lazy(() => ShippingAddressWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zip_code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  default: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  orders: z.lazy(() => OrderListRelationFilterSchema).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
}).strict();

export const ShippingAddressOrderByWithRelationInputSchema: z.ZodType<Prisma.ShippingAddressOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address1: z.lazy(() => SortOrderSchema).optional(),
  address2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zip_code: z.lazy(() => SortOrderSchema).optional(),
  default: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  orders: z.lazy(() => OrderOrderByRelationAggregateInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  country: z.lazy(() => CountryOrderByWithRelationInputSchema).optional()
}).strict();

export const ShippingAddressWhereUniqueInputSchema: z.ZodType<Prisma.ShippingAddressWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => ShippingAddressWhereInputSchema),z.lazy(() => ShippingAddressWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShippingAddressWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShippingAddressWhereInputSchema),z.lazy(() => ShippingAddressWhereInputSchema).array() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zip_code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  default: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  orders: z.lazy(() => OrderListRelationFilterSchema).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
}).strict());

export const ShippingAddressOrderByWithAggregationInputSchema: z.ZodType<Prisma.ShippingAddressOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address1: z.lazy(() => SortOrderSchema).optional(),
  address2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zip_code: z.lazy(() => SortOrderSchema).optional(),
  default: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ShippingAddressCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ShippingAddressMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ShippingAddressMinOrderByAggregateInputSchema).optional()
}).strict();

export const ShippingAddressScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ShippingAddressScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ShippingAddressScalarWhereWithAggregatesInputSchema),z.lazy(() => ShippingAddressScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShippingAddressScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShippingAddressScalarWhereWithAggregatesInputSchema),z.lazy(() => ShippingAddressScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address1: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  zip_code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  default: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ShippingRateWhereInputSchema: z.ZodType<Prisma.ShippingRateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShippingRateWhereInputSchema),z.lazy(() => ShippingRateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShippingRateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShippingRateWhereInputSchema),z.lazy(() => ShippingRateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingFeePerItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeePerKg: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeeFixed: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  deliveryTimeMin: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  deliveryTimeMax: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  returnPolicy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
}).strict();

export const ShippingRateOrderByWithRelationInputSchema: z.ZodType<Prisma.ShippingRateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => CountryOrderByWithRelationInputSchema).optional(),
  store: z.lazy(() => StoreOrderByWithRelationInputSchema).optional()
}).strict();

export const ShippingRateWhereUniqueInputSchema: z.ZodType<Prisma.ShippingRateWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => ShippingRateWhereInputSchema),z.lazy(() => ShippingRateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShippingRateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShippingRateWhereInputSchema),z.lazy(() => ShippingRateWhereInputSchema).array() ]).optional(),
  shippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingFeePerItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeePerKg: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeeFixed: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  deliveryTimeMin: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  deliveryTimeMax: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  returnPolicy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
  store: z.union([ z.lazy(() => StoreScalarRelationFilterSchema),z.lazy(() => StoreWhereInputSchema) ]).optional(),
}).strict());

export const ShippingRateOrderByWithAggregationInputSchema: z.ZodType<Prisma.ShippingRateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ShippingRateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ShippingRateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ShippingRateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ShippingRateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ShippingRateSumOrderByAggregateInputSchema).optional()
}).strict();

export const ShippingRateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ShippingRateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ShippingRateScalarWhereWithAggregatesInputSchema),z.lazy(() => ShippingRateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShippingRateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShippingRateScalarWhereWithAggregatesInputSchema),z.lazy(() => ShippingRateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  shippingService: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  shippingFeePerItem: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  shippingFeePerKg: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  shippingFeeFixed: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  deliveryTimeMin: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  deliveryTimeMax: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  returnPolicy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SizeWhereInputSchema: z.ZodType<Prisma.SizeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SizeWhereInputSchema),z.lazy(() => SizeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SizeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SizeWhereInputSchema),z.lazy(() => SizeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  discount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  wishlist: z.lazy(() => WishlistListRelationFilterSchema).optional(),
  productVariant: z.union([ z.lazy(() => ProductVariantScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
}).strict();

export const SizeOrderByWithRelationInputSchema: z.ZodType<Prisma.SizeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  wishlist: z.lazy(() => WishlistOrderByRelationAggregateInputSchema).optional(),
  productVariant: z.lazy(() => ProductVariantOrderByWithRelationInputSchema).optional()
}).strict();

export const SizeWhereUniqueInputSchema: z.ZodType<Prisma.SizeWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => SizeWhereInputSchema),z.lazy(() => SizeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SizeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SizeWhereInputSchema),z.lazy(() => SizeWhereInputSchema).array() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  discount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  wishlist: z.lazy(() => WishlistListRelationFilterSchema).optional(),
  productVariant: z.union([ z.lazy(() => ProductVariantScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
}).strict());

export const SizeOrderByWithAggregationInputSchema: z.ZodType<Prisma.SizeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SizeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SizeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SizeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SizeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SizeSumOrderByAggregateInputSchema).optional()
}).strict();

export const SizeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SizeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SizeScalarWhereWithAggregatesInputSchema),z.lazy(() => SizeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SizeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SizeScalarWhereWithAggregatesInputSchema),z.lazy(() => SizeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  discount: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  productVariantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SpecWhereInputSchema: z.ZodType<Prisma.SpecWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpecWhereInputSchema),z.lazy(() => SpecWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecWhereInputSchema),z.lazy(() => SpecWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  variantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductNullableScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional().nullable(),
  variant: z.union([ z.lazy(() => ProductVariantNullableScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional().nullable(),
}).strict();

export const SpecOrderByWithRelationInputSchema: z.ZodType<Prisma.SpecOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  variantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional(),
  variant: z.lazy(() => ProductVariantOrderByWithRelationInputSchema).optional()
}).strict();

export const SpecWhereUniqueInputSchema: z.ZodType<Prisma.SpecWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => SpecWhereInputSchema),z.lazy(() => SpecWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecWhereInputSchema),z.lazy(() => SpecWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  variantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductNullableScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional().nullable(),
  variant: z.union([ z.lazy(() => ProductVariantNullableScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional().nullable(),
}).strict());

export const SpecOrderByWithAggregationInputSchema: z.ZodType<Prisma.SpecOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  variantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SpecCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SpecMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SpecMinOrderByAggregateInputSchema).optional()
}).strict();

export const SpecScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SpecScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SpecScalarWhereWithAggregatesInputSchema),z.lazy(() => SpecScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecScalarWhereWithAggregatesInputSchema),z.lazy(() => SpecScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  variantId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const StoreWhereInputSchema: z.ZodType<Prisma.StoreWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StoreWhereInputSchema),z.lazy(() => StoreWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StoreWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StoreWhereInputSchema),z.lazy(() => StoreWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cover: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumStoreStatusFilterSchema),z.lazy(() => StoreStatusSchema) ]).optional(),
  averageRating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  numReviews: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  returnPolicy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  defaultShippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  defaultShippingFeePerItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeePerKg: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeeFixed: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateListRelationFilterSchema).optional(),
  followers: z.lazy(() => UserListRelationFilterSchema).optional(),
  cartItems: z.lazy(() => CartItemListRelationFilterSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupListRelationFilterSchema).optional(),
  coupons: z.lazy(() => CouponListRelationFilterSchema).optional()
}).strict();

export const StoreOrderByWithRelationInputSchema: z.ZodType<Prisma.StoreOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  cover: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingService: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateOrderByRelationAggregateInputSchema).optional(),
  followers: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  cartItems: z.lazy(() => CartItemOrderByRelationAggregateInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupOrderByRelationAggregateInputSchema).optional(),
  coupons: z.lazy(() => CouponOrderByRelationAggregateInputSchema).optional()
}).strict();

export const StoreWhereUniqueInputSchema: z.ZodType<Prisma.StoreWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    email: z.string(),
    url: z.string()
  }),
  z.object({
    id: z.string().uuid(),
    email: z.string(),
  }),
  z.object({
    id: z.string().uuid(),
    url: z.string(),
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    email: z.string(),
    url: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
  z.object({
    url: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  email: z.string().optional(),
  url: z.string().optional(),
  AND: z.union([ z.lazy(() => StoreWhereInputSchema),z.lazy(() => StoreWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StoreWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StoreWhereInputSchema),z.lazy(() => StoreWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cover: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumStoreStatusFilterSchema),z.lazy(() => StoreStatusSchema) ]).optional(),
  averageRating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  numReviews: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  returnPolicy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  defaultShippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  defaultShippingFeePerItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeePerKg: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeeFixed: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateListRelationFilterSchema).optional(),
  followers: z.lazy(() => UserListRelationFilterSchema).optional(),
  cartItems: z.lazy(() => CartItemListRelationFilterSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupListRelationFilterSchema).optional(),
  coupons: z.lazy(() => CouponListRelationFilterSchema).optional()
}).strict());

export const StoreOrderByWithAggregationInputSchema: z.ZodType<Prisma.StoreOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  cover: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingService: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => StoreCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => StoreAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => StoreMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => StoreMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => StoreSumOrderByAggregateInputSchema).optional()
}).strict();

export const StoreScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.StoreScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => StoreScalarWhereWithAggregatesInputSchema),z.lazy(() => StoreScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => StoreScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StoreScalarWhereWithAggregatesInputSchema),z.lazy(() => StoreScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cover: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumStoreStatusWithAggregatesFilterSchema),z.lazy(() => StoreStatusSchema) ]).optional(),
  averageRating: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  numReviews: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  featured: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  returnPolicy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  defaultShippingService: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  defaultShippingFeePerItem: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  defaultShippingFeePerKg: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  defaultShippingFeeFixed: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const SubCategoryWhereInputSchema: z.ZodType<Prisma.SubCategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubCategoryWhereInputSchema),z.lazy(() => SubCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubCategoryWhereInputSchema),z.lazy(() => SubCategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => CategoryScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict();

export const SubCategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.SubCategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => CategoryOrderByWithRelationInputSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SubCategoryWhereUniqueInputSchema: z.ZodType<Prisma.SubCategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    url: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    url: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  url: z.string().optional(),
  AND: z.union([ z.lazy(() => SubCategoryWhereInputSchema),z.lazy(() => SubCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubCategoryWhereInputSchema),z.lazy(() => SubCategoryWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => CategoryScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict());

export const SubCategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.SubCategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SubCategoryCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SubCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SubCategoryMinOrderByAggregateInputSchema).optional()
}).strict();

export const SubCategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SubCategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SubCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => SubCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => SubCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  featured: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  picture: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  stores: z.lazy(() => StoreListRelationFilterSchema).optional(),
  following: z.lazy(() => StoreListRelationFilterSchema).optional(),
  reviews: z.lazy(() => ReviewListRelationFilterSchema).optional(),
  cart: z.union([ z.lazy(() => CartNullableScalarRelationFilterSchema),z.lazy(() => CartWhereInputSchema) ]).optional().nullable(),
  shippingAddresses: z.lazy(() => ShippingAddressListRelationFilterSchema).optional(),
  orders: z.lazy(() => OrderListRelationFilterSchema).optional(),
  wishlist: z.lazy(() => WishlistListRelationFilterSchema).optional(),
  payments: z.lazy(() => PaymentDetailsListRelationFilterSchema).optional(),
  coupons: z.lazy(() => CouponListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  picture: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  stores: z.lazy(() => StoreOrderByRelationAggregateInputSchema).optional(),
  following: z.lazy(() => StoreOrderByRelationAggregateInputSchema).optional(),
  reviews: z.lazy(() => ReviewOrderByRelationAggregateInputSchema).optional(),
  cart: z.lazy(() => CartOrderByWithRelationInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressOrderByRelationAggregateInputSchema).optional(),
  orders: z.lazy(() => OrderOrderByRelationAggregateInputSchema).optional(),
  wishlist: z.lazy(() => WishlistOrderByRelationAggregateInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsOrderByRelationAggregateInputSchema).optional(),
  coupons: z.lazy(() => CouponOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    email: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  picture: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  stores: z.lazy(() => StoreListRelationFilterSchema).optional(),
  following: z.lazy(() => StoreListRelationFilterSchema).optional(),
  reviews: z.lazy(() => ReviewListRelationFilterSchema).optional(),
  cart: z.union([ z.lazy(() => CartNullableScalarRelationFilterSchema),z.lazy(() => CartWhereInputSchema) ]).optional().nullable(),
  shippingAddresses: z.lazy(() => ShippingAddressListRelationFilterSchema).optional(),
  orders: z.lazy(() => OrderListRelationFilterSchema).optional(),
  wishlist: z.lazy(() => WishlistListRelationFilterSchema).optional(),
  payments: z.lazy(() => PaymentDetailsListRelationFilterSchema).optional(),
  coupons: z.lazy(() => CouponListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  picture: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  picture: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleWithAggregatesFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WishlistWhereInputSchema: z.ZodType<Prisma.WishlistWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WishlistWhereInputSchema),z.lazy(() => WishlistWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WishlistWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WishlistWhereInputSchema),z.lazy(() => WishlistWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  variant: z.union([ z.lazy(() => ProductVariantScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
  size: z.union([ z.lazy(() => SizeNullableScalarRelationFilterSchema),z.lazy(() => SizeWhereInputSchema) ]).optional().nullable(),
}).strict();

export const WishlistOrderByWithRelationInputSchema: z.ZodType<Prisma.WishlistOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional(),
  variant: z.lazy(() => ProductVariantOrderByWithRelationInputSchema).optional(),
  size: z.lazy(() => SizeOrderByWithRelationInputSchema).optional()
}).strict();

export const WishlistWhereUniqueInputSchema: z.ZodType<Prisma.WishlistWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => WishlistWhereInputSchema),z.lazy(() => WishlistWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WishlistWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WishlistWhereInputSchema),z.lazy(() => WishlistWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  variant: z.union([ z.lazy(() => ProductVariantScalarRelationFilterSchema),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
  size: z.union([ z.lazy(() => SizeNullableScalarRelationFilterSchema),z.lazy(() => SizeWhereInputSchema) ]).optional().nullable(),
}).strict());

export const WishlistOrderByWithAggregationInputSchema: z.ZodType<Prisma.WishlistOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => WishlistCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => WishlistMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => WishlistMinOrderByAggregateInputSchema).optional()
}).strict();

export const WishlistScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.WishlistScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => WishlistScalarWhereWithAggregatesInputSchema),z.lazy(() => WishlistScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => WishlistScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WishlistScalarWhereWithAggregatesInputSchema),z.lazy(() => WishlistScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CartCreateInputSchema: z.ZodType<Prisma.CartCreateInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutCartInputSchema),
  coupon: z.lazy(() => CouponCreateNestedOneWithoutCartsInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutCartInputSchema).optional()
}).strict();

export const CartUncheckedCreateInputSchema: z.ZodType<Prisma.CartUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  couponId: z.string().optional().nullable(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutCartInputSchema).optional()
}).strict();

export const CartUpdateInputSchema: z.ZodType<Prisma.CartUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutCartNestedInputSchema).optional(),
  coupon: z.lazy(() => CouponUpdateOneWithoutCartsNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutCartNestedInputSchema).optional()
}).strict();

export const CartUncheckedUpdateInputSchema: z.ZodType<Prisma.CartUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutCartNestedInputSchema).optional()
}).strict();

export const CartCreateManyInputSchema: z.ZodType<Prisma.CartCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  couponId: z.string().optional().nullable(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartUpdateManyMutationInputSchema: z.ZodType<Prisma.CartUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CartUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartItemCreateInputSchema: z.ZodType<Prisma.CartItemCreateInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutCartItemsInputSchema),
  store: z.lazy(() => StoreCreateNestedOneWithoutCartItemsInputSchema)
}).strict();

export const CartItemUncheckedCreateInputSchema: z.ZodType<Prisma.CartItemUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  cartId: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartItemUpdateInputSchema: z.ZodType<Prisma.CartItemUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cart: z.lazy(() => CartUpdateOneRequiredWithoutCartItemsNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutCartItemsNestedInputSchema).optional()
}).strict();

export const CartItemUncheckedUpdateInputSchema: z.ZodType<Prisma.CartItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cartId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartItemCreateManyInputSchema: z.ZodType<Prisma.CartItemCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  cartId: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartItemUpdateManyMutationInputSchema: z.ZodType<Prisma.CartItemUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CartItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cartId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryCreateInputSchema: z.ZodType<Prisma.CategoryCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subCategories: z.lazy(() => SubCategoryCreateNestedManyWithoutCategoryInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUncheckedCreateInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subCategories: z.lazy(() => SubCategoryUncheckedCreateNestedManyWithoutCategoryInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUpdateInputSchema: z.ZodType<Prisma.CategoryUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subCategories: z.lazy(() => SubCategoryUpdateManyWithoutCategoryNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subCategories: z.lazy(() => SubCategoryUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryCreateManyInputSchema: z.ZodType<Prisma.CategoryCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.CategoryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ColorCreateInputSchema: z.ZodType<Prisma.ColorCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  productVariant: z.lazy(() => ProductVariantCreateNestedOneWithoutColorsInputSchema)
}).strict();

export const ColorUncheckedCreateInputSchema: z.ZodType<Prisma.ColorUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  productVariantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ColorUpdateInputSchema: z.ZodType<Prisma.ColorUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  productVariant: z.lazy(() => ProductVariantUpdateOneRequiredWithoutColorsNestedInputSchema).optional()
}).strict();

export const ColorUncheckedUpdateInputSchema: z.ZodType<Prisma.ColorUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productVariantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ColorCreateManyInputSchema: z.ZodType<Prisma.ColorCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  productVariantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ColorUpdateManyMutationInputSchema: z.ZodType<Prisma.ColorUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ColorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ColorUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productVariantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountryCreateInputSchema: z.ZodType<Prisma.CountryCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutCountryInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryCreateNestedManyWithoutCountryInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateInputSchema: z.ZodType<Prisma.CountryUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUpdateInputSchema: z.ZodType<Prisma.CountryUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutCountryNestedInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUpdateManyWithoutCountryNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryCreateManyInputSchema: z.ZodType<Prisma.CountryCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountryUpdateManyMutationInputSchema: z.ZodType<Prisma.CountryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CouponCreateInputSchema: z.ZodType<Prisma.CouponCreateInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutCouponsInputSchema),
  orders: z.lazy(() => OrderGroupCreateNestedManyWithoutCouponInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutCouponsInputSchema).optional(),
  carts: z.lazy(() => CartCreateNestedManyWithoutCouponInputSchema).optional()
}).strict();

export const CouponUncheckedCreateInputSchema: z.ZodType<Prisma.CouponUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutCouponInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutCouponsInputSchema).optional(),
  carts: z.lazy(() => CartUncheckedCreateNestedManyWithoutCouponInputSchema).optional()
}).strict();

export const CouponUpdateInputSchema: z.ZodType<Prisma.CouponUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutCouponsNestedInputSchema).optional(),
  orders: z.lazy(() => OrderGroupUpdateManyWithoutCouponNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutCouponsNestedInputSchema).optional(),
  carts: z.lazy(() => CartUpdateManyWithoutCouponNestedInputSchema).optional()
}).strict();

export const CouponUncheckedUpdateInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutCouponNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutCouponsNestedInputSchema).optional(),
  carts: z.lazy(() => CartUncheckedUpdateManyWithoutCouponNestedInputSchema).optional()
}).strict();

export const CouponCreateManyInputSchema: z.ZodType<Prisma.CouponCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CouponUpdateManyMutationInputSchema: z.ZodType<Prisma.CouponUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CouponUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryCreateInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutEligibaleCountriesInputSchema),
  country: z.lazy(() => CountryCreateNestedOneWithoutFreeShippingCountriesInputSchema)
}).strict();

export const FreeShippingCountryUncheckedCreateInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  freeShippingId: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FreeShippingCountryUpdateInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneRequiredWithoutEligibaleCountriesNestedInputSchema).optional(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutFreeShippingCountriesNestedInputSchema).optional()
}).strict();

export const FreeShippingCountryUncheckedUpdateInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryCreateManyInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  freeShippingId: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FreeShippingCountryUpdateManyMutationInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingCreateInputSchema: z.ZodType<Prisma.FreeShippingCreateInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutFreeShippingInputSchema),
  eligibaleCountries: z.lazy(() => FreeShippingCountryCreateNestedManyWithoutFreeShippingInputSchema).optional()
}).strict();

export const FreeShippingUncheckedCreateInputSchema: z.ZodType<Prisma.FreeShippingUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryUncheckedCreateNestedManyWithoutFreeShippingInputSchema).optional()
}).strict();

export const FreeShippingUpdateInputSchema: z.ZodType<Prisma.FreeShippingUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutFreeShippingNestedInputSchema).optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryUpdateManyWithoutFreeShippingNestedInputSchema).optional()
}).strict();

export const FreeShippingUncheckedUpdateInputSchema: z.ZodType<Prisma.FreeShippingUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryUncheckedUpdateManyWithoutFreeShippingNestedInputSchema).optional()
}).strict();

export const FreeShippingCreateManyInputSchema: z.ZodType<Prisma.FreeShippingCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FreeShippingUpdateManyMutationInputSchema: z.ZodType<Prisma.FreeShippingUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FreeShippingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OfferTagCreateInputSchema: z.ZodType<Prisma.OfferTagCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  url: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOfferTagInputSchema).optional()
}).strict();

export const OfferTagUncheckedCreateInputSchema: z.ZodType<Prisma.OfferTagUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  url: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOfferTagInputSchema).optional()
}).strict();

export const OfferTagUpdateInputSchema: z.ZodType<Prisma.OfferTagUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOfferTagNestedInputSchema).optional()
}).strict();

export const OfferTagUncheckedUpdateInputSchema: z.ZodType<Prisma.OfferTagUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOfferTagNestedInputSchema).optional()
}).strict();

export const OfferTagCreateManyInputSchema: z.ZodType<Prisma.OfferTagCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  url: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OfferTagUpdateManyMutationInputSchema: z.ZodType<Prisma.OfferTagUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OfferTagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OfferTagUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderGroupCreateInputSchema: z.ZodType<Prisma.OrderGroupCreateInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemCreateNestedManyWithoutOrderGroupInputSchema).optional(),
  order: z.lazy(() => OrderCreateNestedOneWithoutGroupsInputSchema),
  store: z.lazy(() => StoreCreateNestedOneWithoutOrderGroupsInputSchema),
  coupon: z.lazy(() => CouponCreateNestedOneWithoutOrdersInputSchema).optional()
}).strict();

export const OrderGroupUncheckedCreateInputSchema: z.ZodType<Prisma.OrderGroupUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderId: z.string(),
  storeId: z.string(),
  couponId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderGroupInputSchema).optional()
}).strict();

export const OrderGroupUpdateInputSchema: z.ZodType<Prisma.OrderGroupUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUpdateManyWithoutOrderGroupNestedInputSchema).optional(),
  order: z.lazy(() => OrderUpdateOneRequiredWithoutGroupsNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutOrderGroupsNestedInputSchema).optional(),
  coupon: z.lazy(() => CouponUpdateOneWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderGroupUncheckedUpdateInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderGroupNestedInputSchema).optional()
}).strict();

export const OrderGroupCreateManyInputSchema: z.ZodType<Prisma.OrderGroupCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderId: z.string(),
  storeId: z.string(),
  couponId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderGroupUpdateManyMutationInputSchema: z.ZodType<Prisma.OrderGroupUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderGroupUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemCreateInputSchema: z.ZodType<Prisma.OrderItemCreateInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  price: z.number(),
  totalPrice: z.number(),
  status: z.lazy(() => ProductStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orderGroup: z.lazy(() => OrderGroupCreateNestedOneWithoutItemsInputSchema)
}).strict();

export const OrderItemUncheckedCreateInputSchema: z.ZodType<Prisma.OrderItemUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  price: z.number(),
  totalPrice: z.number(),
  orderGroupId: z.string(),
  status: z.lazy(() => ProductStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderItemUpdateInputSchema: z.ZodType<Prisma.OrderItemUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => EnumProductStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orderGroup: z.lazy(() => OrderGroupUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();

export const OrderItemUncheckedUpdateInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderGroupId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => EnumProductStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemCreateManyInputSchema: z.ZodType<Prisma.OrderItemCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  price: z.number(),
  totalPrice: z.number(),
  orderGroupId: z.string(),
  status: z.lazy(() => ProductStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderItemUpdateManyMutationInputSchema: z.ZodType<Prisma.OrderItemUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => EnumProductStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderGroupId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => EnumProductStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderCreateInputSchema: z.ZodType<Prisma.OrderCreateInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  groups: z.lazy(() => OrderGroupCreateNestedManyWithoutOrderInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsCreateNestedOneWithoutOrderInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressCreateNestedOneWithoutOrdersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const OrderUncheckedCreateInputSchema: z.ZodType<Prisma.OrderUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  shippingAddressId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  groups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutOrderInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUncheckedCreateNestedOneWithoutOrderInputSchema).optional()
}).strict();

export const OrderUpdateInputSchema: z.ZodType<Prisma.OrderUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  groups: z.lazy(() => OrderGroupUpdateManyWithoutOrderNestedInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUpdateOneWithoutOrderNestedInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  groups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutOrderNestedInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUncheckedUpdateOneWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderCreateManyInputSchema: z.ZodType<Prisma.OrderCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  shippingAddressId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderUpdateManyMutationInputSchema: z.ZodType<Prisma.OrderUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentDetailsCreateInputSchema: z.ZodType<Prisma.PaymentDetailsCreateInput> = z.object({
  id: z.string().uuid().optional(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  order: z.lazy(() => OrderCreateNestedOneWithoutPaymentDetailsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutPaymentsInputSchema)
}).strict();

export const PaymentDetailsUncheckedCreateInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  orderId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentDetailsUpdateInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.lazy(() => OrderUpdateOneRequiredWithoutPaymentDetailsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPaymentsNestedInputSchema).optional()
}).strict();

export const PaymentDetailsUncheckedUpdateInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentDetailsCreateManyInputSchema: z.ZodType<Prisma.PaymentDetailsCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  orderId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentDetailsUpdateManyMutationInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentDetailsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantCreateInputSchema: z.ZodType<Prisma.ProductVariantCreateInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutVariantsInputSchema),
  sizes: z.lazy(() => SizeCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantUncheckedCreateInputSchema: z.ZodType<Prisma.ProductVariantUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sizes: z.lazy(() => SizeUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantUpdateInputSchema: z.ZodType<Prisma.ProductVariantUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutVariantsNestedInputSchema).optional(),
  sizes: z.lazy(() => SizeUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantCreateManyInputSchema: z.ZodType<Prisma.ProductVariantCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductVariantUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductVariantUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCreateInputSchema: z.ZodType<Prisma.ProductCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateInputSchema: z.ZodType<Prisma.ProductUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductUpdateInputSchema: z.ZodType<Prisma.ProductUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductCreateManyInputSchema: z.ZodType<Prisma.ProductCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable()
}).strict();

export const ProductUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProductVariantImageCreateInputSchema: z.ZodType<Prisma.ProductVariantImageCreateInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  order: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  productVariant: z.lazy(() => ProductVariantCreateNestedOneWithoutImagesInputSchema)
}).strict();

export const ProductVariantImageUncheckedCreateInputSchema: z.ZodType<Prisma.ProductVariantImageUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  order: z.number().int().optional().nullable(),
  productVariantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductVariantImageUpdateInputSchema: z.ZodType<Prisma.ProductVariantImageUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  productVariant: z.lazy(() => ProductVariantUpdateOneRequiredWithoutImagesNestedInputSchema).optional()
}).strict();

export const ProductVariantImageUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductVariantImageUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productVariantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantImageCreateManyInputSchema: z.ZodType<Prisma.ProductVariantImageCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  order: z.number().int().optional().nullable(),
  productVariantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductVariantImageUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductVariantImageUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantImageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductVariantImageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productVariantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionCreateInputSchema: z.ZodType<Prisma.QuestionCreateInput> = z.object({
  id: z.string().uuid().optional(),
  question: z.string(),
  answer: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutQuestionsInputSchema)
}).strict();

export const QuestionUncheckedCreateInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  question: z.string(),
  answer: z.string(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuestionUpdateInputSchema: z.ZodType<Prisma.QuestionUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionCreateManyInputSchema: z.ZodType<Prisma.QuestionCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  question: z.string(),
  answer: z.string(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuestionUpdateManyMutationInputSchema: z.ZodType<Prisma.QuestionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewImageCreateInputSchema: z.ZodType<Prisma.ReviewImageCreateInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  review: z.lazy(() => ReviewCreateNestedOneWithoutImagesInputSchema)
}).strict();

export const ReviewImageUncheckedCreateInputSchema: z.ZodType<Prisma.ReviewImageUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  reviewId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewImageUpdateInputSchema: z.ZodType<Prisma.ReviewImageUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.lazy(() => ReviewUpdateOneRequiredWithoutImagesNestedInputSchema).optional()
}).strict();

export const ReviewImageUncheckedUpdateInputSchema: z.ZodType<Prisma.ReviewImageUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewImageCreateManyInputSchema: z.ZodType<Prisma.ReviewImageCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  reviewId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewImageUpdateManyMutationInputSchema: z.ZodType<Prisma.ReviewImageUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewImageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ReviewImageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewCreateInputSchema: z.ZodType<Prisma.ReviewCreateInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  images: z.lazy(() => ReviewImageCreateNestedManyWithoutReviewInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutReviewsInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutReviewsInputSchema)
}).strict();

export const ReviewUncheckedCreateInputSchema: z.ZodType<Prisma.ReviewUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  userId: z.string(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  images: z.lazy(() => ReviewImageUncheckedCreateNestedManyWithoutReviewInputSchema).optional()
}).strict();

export const ReviewUpdateInputSchema: z.ZodType<Prisma.ReviewUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  images: z.lazy(() => ReviewImageUpdateManyWithoutReviewNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutReviewsNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutReviewsNestedInputSchema).optional()
}).strict();

export const ReviewUncheckedUpdateInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  images: z.lazy(() => ReviewImageUncheckedUpdateManyWithoutReviewNestedInputSchema).optional()
}).strict();

export const ReviewCreateManyInputSchema: z.ZodType<Prisma.ReviewCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  userId: z.string(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewUpdateManyMutationInputSchema: z.ZodType<Prisma.ReviewUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingAddressCreateInputSchema: z.ZodType<Prisma.ShippingAddressCreateInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutShippingAddressInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutShippingAddressesInputSchema),
  country: z.lazy(() => CountryCreateNestedOneWithoutShippingAddressesInputSchema)
}).strict();

export const ShippingAddressUncheckedCreateInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  userId: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutShippingAddressInputSchema).optional()
}).strict();

export const ShippingAddressUpdateInputSchema: z.ZodType<Prisma.ShippingAddressUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutShippingAddressNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutShippingAddressesNestedInputSchema).optional(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutShippingAddressesNestedInputSchema).optional()
}).strict();

export const ShippingAddressUncheckedUpdateInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutShippingAddressNestedInputSchema).optional()
}).strict();

export const ShippingAddressCreateManyInputSchema: z.ZodType<Prisma.ShippingAddressCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  userId: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingAddressUpdateManyMutationInputSchema: z.ZodType<Prisma.ShippingAddressUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingAddressUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingRateCreateInputSchema: z.ZodType<Prisma.ShippingRateCreateInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  country: z.lazy(() => CountryCreateNestedOneWithoutShippingRatesInputSchema),
  store: z.lazy(() => StoreCreateNestedOneWithoutShippingRatesInputSchema)
}).strict();

export const ShippingRateUncheckedCreateInputSchema: z.ZodType<Prisma.ShippingRateUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  countryId: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingRateUpdateInputSchema: z.ZodType<Prisma.ShippingRateUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutShippingRatesNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutShippingRatesNestedInputSchema).optional()
}).strict();

export const ShippingRateUncheckedUpdateInputSchema: z.ZodType<Prisma.ShippingRateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingRateCreateManyInputSchema: z.ZodType<Prisma.ShippingRateCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  countryId: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingRateUpdateManyMutationInputSchema: z.ZodType<Prisma.ShippingRateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingRateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ShippingRateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SizeCreateInputSchema: z.ZodType<Prisma.SizeCreateInput> = z.object({
  id: z.string().uuid().optional(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutSizeInputSchema).optional(),
  productVariant: z.lazy(() => ProductVariantCreateNestedOneWithoutSizesInputSchema)
}).strict();

export const SizeUncheckedCreateInputSchema: z.ZodType<Prisma.SizeUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number().optional(),
  productVariantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutSizeInputSchema).optional()
}).strict();

export const SizeUpdateInputSchema: z.ZodType<Prisma.SizeUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutSizeNestedInputSchema).optional(),
  productVariant: z.lazy(() => ProductVariantUpdateOneRequiredWithoutSizesNestedInputSchema).optional()
}).strict();

export const SizeUncheckedUpdateInputSchema: z.ZodType<Prisma.SizeUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productVariantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutSizeNestedInputSchema).optional()
}).strict();

export const SizeCreateManyInputSchema: z.ZodType<Prisma.SizeCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number().optional(),
  productVariantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SizeUpdateManyMutationInputSchema: z.ZodType<Prisma.SizeUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SizeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SizeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productVariantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecCreateInputSchema: z.ZodType<Prisma.SpecCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutSpecsInputSchema).optional(),
  variant: z.lazy(() => ProductVariantCreateNestedOneWithoutSpecsInputSchema).optional()
}).strict();

export const SpecUncheckedCreateInputSchema: z.ZodType<Prisma.SpecUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  productId: z.string().optional().nullable(),
  variantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecUpdateInputSchema: z.ZodType<Prisma.SpecUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneWithoutSpecsNestedInputSchema).optional(),
  variant: z.lazy(() => ProductVariantUpdateOneWithoutSpecsNestedInputSchema).optional()
}).strict();

export const SpecUncheckedUpdateInputSchema: z.ZodType<Prisma.SpecUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecCreateManyInputSchema: z.ZodType<Prisma.SpecCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  productId: z.string().optional().nullable(),
  variantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecUpdateManyMutationInputSchema: z.ZodType<Prisma.SpecUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SpecUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StoreCreateInputSchema: z.ZodType<Prisma.StoreCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutStoresInputSchema),
  products: z.lazy(() => ProductCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUncheckedCreateInputSchema: z.ZodType<Prisma.StoreUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userId: z.string(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUpdateInputSchema: z.ZodType<Prisma.StoreUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreCreateManyInputSchema: z.ZodType<Prisma.StoreCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userId: z.string()
}).strict();

export const StoreUpdateManyMutationInputSchema: z.ZodType<Prisma.StoreUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StoreUncheckedUpdateManyInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubCategoryCreateInputSchema: z.ZodType<Prisma.SubCategoryCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutSubCategoriesInputSchema),
  products: z.lazy(() => ProductCreateNestedManyWithoutSubCategoryInputSchema).optional()
}).strict();

export const SubCategoryUncheckedCreateInputSchema: z.ZodType<Prisma.SubCategoryUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  categoryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutSubCategoryInputSchema).optional()
}).strict();

export const SubCategoryUpdateInputSchema: z.ZodType<Prisma.SubCategoryUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutSubCategoriesNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutSubCategoryNestedInputSchema).optional()
}).strict();

export const SubCategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.SubCategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutSubCategoryNestedInputSchema).optional()
}).strict();

export const SubCategoryCreateManyInputSchema: z.ZodType<Prisma.SubCategoryCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  categoryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SubCategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.SubCategoryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubCategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SubCategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistCreateInputSchema: z.ZodType<Prisma.WishlistCreateInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutWishlistInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutWishlistInputSchema),
  variant: z.lazy(() => ProductVariantCreateNestedOneWithoutWishlistInputSchema),
  size: z.lazy(() => SizeCreateNestedOneWithoutWishlistInputSchema).optional()
}).strict();

export const WishlistUncheckedCreateInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistUpdateInputSchema: z.ZodType<Prisma.WishlistUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  variant: z.lazy(() => ProductVariantUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  size: z.lazy(() => SizeUpdateOneWithoutWishlistNestedInputSchema).optional()
}).strict();

export const WishlistUncheckedUpdateInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistCreateManyInputSchema: z.ZodType<Prisma.WishlistCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistUpdateManyMutationInputSchema: z.ZodType<Prisma.WishlistUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const CouponNullableScalarRelationFilterSchema: z.ZodType<Prisma.CouponNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => CouponWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CouponWhereInputSchema).optional().nullable()
}).strict();

export const CartItemListRelationFilterSchema: z.ZodType<Prisma.CartItemListRelationFilter> = z.object({
  every: z.lazy(() => CartItemWhereInputSchema).optional(),
  some: z.lazy(() => CartItemWhereInputSchema).optional(),
  none: z.lazy(() => CartItemWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const CartItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CartItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartCountOrderByAggregateInputSchema: z.ZodType<Prisma.CartCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CartAvgOrderByAggregateInput> = z.object({
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CartMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartMinOrderByAggregateInputSchema: z.ZodType<Prisma.CartMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartSumOrderByAggregateInputSchema: z.ZodType<Prisma.CartSumOrderByAggregateInput> = z.object({
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const CartScalarRelationFilterSchema: z.ZodType<Prisma.CartScalarRelationFilter> = z.object({
  is: z.lazy(() => CartWhereInputSchema).optional(),
  isNot: z.lazy(() => CartWhereInputSchema).optional()
}).strict();

export const StoreScalarRelationFilterSchema: z.ZodType<Prisma.StoreScalarRelationFilter> = z.object({
  is: z.lazy(() => StoreWhereInputSchema).optional(),
  isNot: z.lazy(() => StoreWhereInputSchema).optional()
}).strict();

export const CartItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.CartItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  cartId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CartItemAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CartItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  cartId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.CartItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  cartId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.CartItemSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const SubCategoryListRelationFilterSchema: z.ZodType<Prisma.SubCategoryListRelationFilter> = z.object({
  every: z.lazy(() => SubCategoryWhereInputSchema).optional(),
  some: z.lazy(() => SubCategoryWhereInputSchema).optional(),
  none: z.lazy(() => SubCategoryWhereInputSchema).optional()
}).strict();

export const ProductListRelationFilterSchema: z.ZodType<Prisma.ProductListRelationFilter> = z.object({
  every: z.lazy(() => ProductWhereInputSchema).optional(),
  some: z.lazy(() => ProductWhereInputSchema).optional(),
  none: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const SubCategoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SubCategoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const ProductVariantScalarRelationFilterSchema: z.ZodType<Prisma.ProductVariantScalarRelationFilter> = z.object({
  is: z.lazy(() => ProductVariantWhereInputSchema).optional(),
  isNot: z.lazy(() => ProductVariantWhereInputSchema).optional()
}).strict();

export const ColorCountOrderByAggregateInputSchema: z.ZodType<Prisma.ColorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ColorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ColorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ColorMinOrderByAggregateInputSchema: z.ZodType<Prisma.ColorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingRateListRelationFilterSchema: z.ZodType<Prisma.ShippingRateListRelationFilter> = z.object({
  every: z.lazy(() => ShippingRateWhereInputSchema).optional(),
  some: z.lazy(() => ShippingRateWhereInputSchema).optional(),
  none: z.lazy(() => ShippingRateWhereInputSchema).optional()
}).strict();

export const FreeShippingCountryListRelationFilterSchema: z.ZodType<Prisma.FreeShippingCountryListRelationFilter> = z.object({
  every: z.lazy(() => FreeShippingCountryWhereInputSchema).optional(),
  some: z.lazy(() => FreeShippingCountryWhereInputSchema).optional(),
  none: z.lazy(() => FreeShippingCountryWhereInputSchema).optional()
}).strict();

export const ShippingAddressListRelationFilterSchema: z.ZodType<Prisma.ShippingAddressListRelationFilter> = z.object({
  every: z.lazy(() => ShippingAddressWhereInputSchema).optional(),
  some: z.lazy(() => ShippingAddressWhereInputSchema).optional(),
  none: z.lazy(() => ShippingAddressWhereInputSchema).optional()
}).strict();

export const ShippingRateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ShippingRateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FreeShippingCountryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FreeShippingCountryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingAddressOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ShippingAddressOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryCountOrderByAggregateInputSchema: z.ZodType<Prisma.CountryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CountryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryMinOrderByAggregateInputSchema: z.ZodType<Prisma.CountryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderGroupListRelationFilterSchema: z.ZodType<Prisma.OrderGroupListRelationFilter> = z.object({
  every: z.lazy(() => OrderGroupWhereInputSchema).optional(),
  some: z.lazy(() => OrderGroupWhereInputSchema).optional(),
  none: z.lazy(() => OrderGroupWhereInputSchema).optional()
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const CartListRelationFilterSchema: z.ZodType<Prisma.CartListRelationFilter> = z.object({
  every: z.lazy(() => CartWhereInputSchema).optional(),
  some: z.lazy(() => CartWhereInputSchema).optional(),
  none: z.lazy(() => CartWhereInputSchema).optional()
}).strict();

export const OrderGroupOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrderGroupOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CartOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CartOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CouponCountOrderByAggregateInputSchema: z.ZodType<Prisma.CouponCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CouponAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CouponAvgOrderByAggregateInput> = z.object({
  discount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CouponMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CouponMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CouponMinOrderByAggregateInputSchema: z.ZodType<Prisma.CouponMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CouponSumOrderByAggregateInputSchema: z.ZodType<Prisma.CouponSumOrderByAggregateInput> = z.object({
  discount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FreeShippingScalarRelationFilterSchema: z.ZodType<Prisma.FreeShippingScalarRelationFilter> = z.object({
  is: z.lazy(() => FreeShippingWhereInputSchema).optional(),
  isNot: z.lazy(() => FreeShippingWhereInputSchema).optional()
}).strict();

export const CountryScalarRelationFilterSchema: z.ZodType<Prisma.CountryScalarRelationFilter> = z.object({
  is: z.lazy(() => CountryWhereInputSchema).optional(),
  isNot: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const FreeShippingCountryCountOrderByAggregateInputSchema: z.ZodType<Prisma.FreeShippingCountryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  freeShippingId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FreeShippingCountryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FreeShippingCountryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  freeShippingId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FreeShippingCountryMinOrderByAggregateInputSchema: z.ZodType<Prisma.FreeShippingCountryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  freeShippingId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductScalarRelationFilterSchema: z.ZodType<Prisma.ProductScalarRelationFilter> = z.object({
  is: z.lazy(() => ProductWhereInputSchema).optional(),
  isNot: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const FreeShippingCountOrderByAggregateInputSchema: z.ZodType<Prisma.FreeShippingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FreeShippingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FreeShippingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FreeShippingMinOrderByAggregateInputSchema: z.ZodType<Prisma.FreeShippingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OfferTagCountOrderByAggregateInputSchema: z.ZodType<Prisma.OfferTagCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OfferTagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OfferTagMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OfferTagMinOrderByAggregateInputSchema: z.ZodType<Prisma.OfferTagMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumOrderStatusFilterSchema: z.ZodType<Prisma.EnumOrderStatusFilter> = z.object({
  equals: z.lazy(() => OrderStatusSchema).optional(),
  in: z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z.lazy(() => OrderStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => NestedEnumOrderStatusFilterSchema) ]).optional(),
}).strict();

export const OrderItemListRelationFilterSchema: z.ZodType<Prisma.OrderItemListRelationFilter> = z.object({
  every: z.lazy(() => OrderItemWhereInputSchema).optional(),
  some: z.lazy(() => OrderItemWhereInputSchema).optional(),
  none: z.lazy(() => OrderItemWhereInputSchema).optional()
}).strict();

export const OrderScalarRelationFilterSchema: z.ZodType<Prisma.OrderScalarRelationFilter> = z.object({
  is: z.lazy(() => OrderWhereInputSchema).optional(),
  isNot: z.lazy(() => OrderWhereInputSchema).optional()
}).strict();

export const OrderItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrderItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderGroupCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrderGroupCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMin: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMax: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderGroupAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrderGroupAvgOrderByAggregateInput> = z.object({
  shippingDeliveryMin: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMax: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderGroupMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrderGroupMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMin: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMax: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderGroupMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrderGroupMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMin: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMax: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  couponId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderGroupSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrderGroupSumOrderByAggregateInput> = z.object({
  shippingDeliveryMin: z.lazy(() => SortOrderSchema).optional(),
  shippingDeliveryMax: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumOrderStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumOrderStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => OrderStatusSchema).optional(),
  in: z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z.lazy(() => OrderStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => NestedEnumOrderStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumOrderStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumOrderStatusFilterSchema).optional()
}).strict();

export const EnumProductStatusFilterSchema: z.ZodType<Prisma.EnumProductStatusFilter> = z.object({
  equals: z.lazy(() => ProductStatusSchema).optional(),
  in: z.lazy(() => ProductStatusSchema).array().optional(),
  notIn: z.lazy(() => ProductStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => NestedEnumProductStatusFilterSchema) ]).optional(),
}).strict();

export const OrderGroupScalarRelationFilterSchema: z.ZodType<Prisma.OrderGroupScalarRelationFilter> = z.object({
  is: z.lazy(() => OrderGroupWhereInputSchema).optional(),
  isNot: z.lazy(() => OrderGroupWhereInputSchema).optional()
}).strict();

export const OrderItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  orderGroupId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemAvgOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  orderGroupId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  productSlug: z.lazy(() => SortOrderSchema).optional(),
  variantSlug: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional(),
  orderGroupId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemSumOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  shippingFee: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  totalPrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumProductStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumProductStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ProductStatusSchema).optional(),
  in: z.lazy(() => ProductStatusSchema).array().optional(),
  notIn: z.lazy(() => ProductStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => NestedEnumProductStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProductStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProductStatusFilterSchema).optional()
}).strict();

export const EnumPaymentStatusFilterSchema: z.ZodType<Prisma.EnumPaymentStatusFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusFilterSchema) ]).optional(),
}).strict();

export const EnumPaymentMethodNullableFilterSchema: z.ZodType<Prisma.EnumPaymentMethodNullableFilter> = z.object({
  equals: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  in: z.lazy(() => PaymentMethodSchema).array().optional().nullable(),
  notIn: z.lazy(() => PaymentMethodSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NestedEnumPaymentMethodNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const PaymentDetailsNullableScalarRelationFilterSchema: z.ZodType<Prisma.PaymentDetailsNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => PaymentDetailsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PaymentDetailsWhereInputSchema).optional().nullable()
}).strict();

export const ShippingAddressScalarRelationFilterSchema: z.ZodType<Prisma.ShippingAddressScalarRelationFilter> = z.object({
  is: z.lazy(() => ShippingAddressWhereInputSchema).optional(),
  isNot: z.lazy(() => ShippingAddressWhereInputSchema).optional()
}).strict();

export const OrderCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrderCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  shippingAddressId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrderAvgOrderByAggregateInput> = z.object({
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrderMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  shippingAddressId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrderMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  orderStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentStatus: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  shippingAddressId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrderSumOrderByAggregateInput> = z.object({
  shippingFees: z.lazy(() => SortOrderSchema).optional(),
  subTotal: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPaymentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPaymentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional()
}).strict();

export const EnumPaymentMethodNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPaymentMethodNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  in: z.lazy(() => PaymentMethodSchema).array().optional().nullable(),
  notIn: z.lazy(() => PaymentMethodSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NestedEnumPaymentMethodNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentMethodNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentMethodNullableFilterSchema).optional()
}).strict();

export const PaymentDetailsCountOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentDetailsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  paymentInetntId: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentDetailsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentDetailsAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentDetailsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentDetailsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  paymentInetntId: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentDetailsMinOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentDetailsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  paymentInetntId: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentDetailsSumOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentDetailsSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SizeListRelationFilterSchema: z.ZodType<Prisma.SizeListRelationFilter> = z.object({
  every: z.lazy(() => SizeWhereInputSchema).optional(),
  some: z.lazy(() => SizeWhereInputSchema).optional(),
  none: z.lazy(() => SizeWhereInputSchema).optional()
}).strict();

export const ProductVariantImageListRelationFilterSchema: z.ZodType<Prisma.ProductVariantImageListRelationFilter> = z.object({
  every: z.lazy(() => ProductVariantImageWhereInputSchema).optional(),
  some: z.lazy(() => ProductVariantImageWhereInputSchema).optional(),
  none: z.lazy(() => ProductVariantImageWhereInputSchema).optional()
}).strict();

export const ColorListRelationFilterSchema: z.ZodType<Prisma.ColorListRelationFilter> = z.object({
  every: z.lazy(() => ColorWhereInputSchema).optional(),
  some: z.lazy(() => ColorWhereInputSchema).optional(),
  none: z.lazy(() => ColorWhereInputSchema).optional()
}).strict();

export const SpecListRelationFilterSchema: z.ZodType<Prisma.SpecListRelationFilter> = z.object({
  every: z.lazy(() => SpecWhereInputSchema).optional(),
  some: z.lazy(() => SpecWhereInputSchema).optional(),
  none: z.lazy(() => SpecWhereInputSchema).optional()
}).strict();

export const WishlistListRelationFilterSchema: z.ZodType<Prisma.WishlistListRelationFilter> = z.object({
  every: z.lazy(() => WishlistWhereInputSchema).optional(),
  some: z.lazy(() => WishlistWhereInputSchema).optional(),
  none: z.lazy(() => WishlistWhereInputSchema).optional()
}).strict();

export const SizeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SizeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantImageOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductVariantImageOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ColorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ColorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SpecOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WishlistOrderByRelationAggregateInputSchema: z.ZodType<Prisma.WishlistOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variantName: z.lazy(() => SortOrderSchema).optional(),
  variantDescription: z.lazy(() => SortOrderSchema).optional(),
  variantImage: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  isSale: z.lazy(() => SortOrderSchema).optional(),
  saleEndDate: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  keywords: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantAvgOrderByAggregateInput> = z.object({
  sales: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variantName: z.lazy(() => SortOrderSchema).optional(),
  variantDescription: z.lazy(() => SortOrderSchema).optional(),
  variantImage: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  isSale: z.lazy(() => SortOrderSchema).optional(),
  saleEndDate: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  keywords: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variantName: z.lazy(() => SortOrderSchema).optional(),
  variantDescription: z.lazy(() => SortOrderSchema).optional(),
  variantImage: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  isSale: z.lazy(() => SortOrderSchema).optional(),
  saleEndDate: z.lazy(() => SortOrderSchema).optional(),
  sku: z.lazy(() => SortOrderSchema).optional(),
  keywords: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantSumOrderByAggregateInput> = z.object({
  sales: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumShippingFeeMethodFilterSchema: z.ZodType<Prisma.EnumShippingFeeMethodFilter> = z.object({
  equals: z.lazy(() => ShippingFeeMethodSchema).optional(),
  in: z.lazy(() => ShippingFeeMethodSchema).array().optional(),
  notIn: z.lazy(() => ShippingFeeMethodSchema).array().optional(),
  not: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => NestedEnumShippingFeeMethodFilterSchema) ]).optional(),
}).strict();

export const FreeShippingNullableScalarRelationFilterSchema: z.ZodType<Prisma.FreeShippingNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => FreeShippingWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => FreeShippingWhereInputSchema).optional().nullable()
}).strict();

export const ProductVariantListRelationFilterSchema: z.ZodType<Prisma.ProductVariantListRelationFilter> = z.object({
  every: z.lazy(() => ProductVariantWhereInputSchema).optional(),
  some: z.lazy(() => ProductVariantWhereInputSchema).optional(),
  none: z.lazy(() => ProductVariantWhereInputSchema).optional()
}).strict();

export const QuestionListRelationFilterSchema: z.ZodType<Prisma.QuestionListRelationFilter> = z.object({
  every: z.lazy(() => QuestionWhereInputSchema).optional(),
  some: z.lazy(() => QuestionWhereInputSchema).optional(),
  none: z.lazy(() => QuestionWhereInputSchema).optional()
}).strict();

export const ReviewListRelationFilterSchema: z.ZodType<Prisma.ReviewListRelationFilter> = z.object({
  every: z.lazy(() => ReviewWhereInputSchema).optional(),
  some: z.lazy(() => ReviewWhereInputSchema).optional(),
  none: z.lazy(() => ReviewWhereInputSchema).optional()
}).strict();

export const CategoryScalarRelationFilterSchema: z.ZodType<Prisma.CategoryScalarRelationFilter> = z.object({
  is: z.lazy(() => CategoryWhereInputSchema).optional(),
  isNot: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const SubCategoryScalarRelationFilterSchema: z.ZodType<Prisma.SubCategoryScalarRelationFilter> = z.object({
  is: z.lazy(() => SubCategoryWhereInputSchema).optional(),
  isNot: z.lazy(() => SubCategoryWhereInputSchema).optional()
}).strict();

export const OfferTagNullableScalarRelationFilterSchema: z.ZodType<Prisma.OfferTagNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => OfferTagWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OfferTagWhereInputSchema).optional().nullable()
}).strict();

export const ProductVariantOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductVariantOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.QuestionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ReviewOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeMethod: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  freeShippingForAllCountries: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subCategoryId: z.lazy(() => SortOrderSchema).optional(),
  offerTagId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProductAvgOrderByAggregateInput> = z.object({
  rating: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeMethod: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  freeShippingForAllCountries: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subCategoryId: z.lazy(() => SortOrderSchema).optional(),
  offerTagId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeMethod: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  freeShippingForAllCountries: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subCategoryId: z.lazy(() => SortOrderSchema).optional(),
  offerTagId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProductSumOrderByAggregateInput> = z.object({
  rating: z.lazy(() => SortOrderSchema).optional(),
  sales: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumShippingFeeMethodWithAggregatesFilterSchema: z.ZodType<Prisma.EnumShippingFeeMethodWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ShippingFeeMethodSchema).optional(),
  in: z.lazy(() => ShippingFeeMethodSchema).array().optional(),
  notIn: z.lazy(() => ShippingFeeMethodSchema).array().optional(),
  not: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => NestedEnumShippingFeeMethodWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumShippingFeeMethodFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumShippingFeeMethodFilterSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ProductVariantImageCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantImageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantImageAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantImageAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantImageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantImageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantImageMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantImageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductVariantImageSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProductVariantImageSumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const QuestionCountOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  question: z.lazy(() => SortOrderSchema).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  question: z.lazy(() => SortOrderSchema).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionMinOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  question: z.lazy(() => SortOrderSchema).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewScalarRelationFilterSchema: z.ZodType<Prisma.ReviewScalarRelationFilter> = z.object({
  is: z.lazy(() => ReviewWhereInputSchema).optional(),
  isNot: z.lazy(() => ReviewWhereInputSchema).optional()
}).strict();

export const ReviewImageCountOrderByAggregateInputSchema: z.ZodType<Prisma.ReviewImageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  reviewId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewImageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ReviewImageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  reviewId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewImageMinOrderByAggregateInputSchema: z.ZodType<Prisma.ReviewImageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  alt: z.lazy(() => SortOrderSchema).optional(),
  reviewId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewImageListRelationFilterSchema: z.ZodType<Prisma.ReviewImageListRelationFilter> = z.object({
  every: z.lazy(() => ReviewImageWhereInputSchema).optional(),
  some: z.lazy(() => ReviewImageWhereInputSchema).optional(),
  none: z.lazy(() => ReviewImageWhereInputSchema).optional()
}).strict();

export const ReviewImageOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ReviewImageOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewCountOrderByAggregateInputSchema: z.ZodType<Prisma.ReviewCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variant: z.lazy(() => SortOrderSchema).optional(),
  review: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ReviewAvgOrderByAggregateInput> = z.object({
  rating: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ReviewMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variant: z.lazy(() => SortOrderSchema).optional(),
  review: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewMinOrderByAggregateInputSchema: z.ZodType<Prisma.ReviewMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  variant: z.lazy(() => SortOrderSchema).optional(),
  review: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReviewSumOrderByAggregateInputSchema: z.ZodType<Prisma.ReviewSumOrderByAggregateInput> = z.object({
  rating: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderListRelationFilterSchema: z.ZodType<Prisma.OrderListRelationFilter> = z.object({
  every: z.lazy(() => OrderWhereInputSchema).optional(),
  some: z.lazy(() => OrderWhereInputSchema).optional(),
  none: z.lazy(() => OrderWhereInputSchema).optional()
}).strict();

export const OrderOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrderOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingAddressCountOrderByAggregateInputSchema: z.ZodType<Prisma.ShippingAddressCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address1: z.lazy(() => SortOrderSchema).optional(),
  address2: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zip_code: z.lazy(() => SortOrderSchema).optional(),
  default: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingAddressMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ShippingAddressMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address1: z.lazy(() => SortOrderSchema).optional(),
  address2: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zip_code: z.lazy(() => SortOrderSchema).optional(),
  default: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingAddressMinOrderByAggregateInputSchema: z.ZodType<Prisma.ShippingAddressMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address1: z.lazy(() => SortOrderSchema).optional(),
  address2: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zip_code: z.lazy(() => SortOrderSchema).optional(),
  default: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingRateCountOrderByAggregateInputSchema: z.ZodType<Prisma.ShippingRateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingRateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ShippingRateAvgOrderByAggregateInput> = z.object({
  shippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMax: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingRateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ShippingRateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingRateMinOrderByAggregateInputSchema: z.ZodType<Prisma.ShippingRateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shippingService: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  storeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShippingRateSumOrderByAggregateInputSchema: z.ZodType<Prisma.ShippingRateSumOrderByAggregateInput> = z.object({
  shippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  shippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  shippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  deliveryTimeMax: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SizeCountOrderByAggregateInputSchema: z.ZodType<Prisma.SizeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SizeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SizeAvgOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SizeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SizeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SizeMinOrderByAggregateInputSchema: z.ZodType<Prisma.SizeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional(),
  productVariantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SizeSumOrderByAggregateInputSchema: z.ZodType<Prisma.SizeSumOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  discount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductNullableScalarRelationFilterSchema: z.ZodType<Prisma.ProductNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ProductWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProductWhereInputSchema).optional().nullable()
}).strict();

export const ProductVariantNullableScalarRelationFilterSchema: z.ZodType<Prisma.ProductVariantNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ProductVariantWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProductVariantWhereInputSchema).optional().nullable()
}).strict();

export const SpecCountOrderByAggregateInputSchema: z.ZodType<Prisma.SpecCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SpecMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecMinOrderByAggregateInputSchema: z.ZodType<Prisma.SpecMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumStoreStatusFilterSchema: z.ZodType<Prisma.EnumStoreStatusFilter> = z.object({
  equals: z.lazy(() => StoreStatusSchema).optional(),
  in: z.lazy(() => StoreStatusSchema).array().optional(),
  notIn: z.lazy(() => StoreStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => NestedEnumStoreStatusFilterSchema) ]).optional(),
}).strict();

export const CouponListRelationFilterSchema: z.ZodType<Prisma.CouponListRelationFilter> = z.object({
  every: z.lazy(() => CouponWhereInputSchema).optional(),
  some: z.lazy(() => CouponWhereInputSchema).optional(),
  none: z.lazy(() => CouponWhereInputSchema).optional()
}).strict();

export const CouponOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CouponOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StoreCountOrderByAggregateInputSchema: z.ZodType<Prisma.StoreCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  cover: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingService: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StoreAvgOrderByAggregateInputSchema: z.ZodType<Prisma.StoreAvgOrderByAggregateInput> = z.object({
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMax: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StoreMaxOrderByAggregateInputSchema: z.ZodType<Prisma.StoreMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  cover: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingService: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StoreMinOrderByAggregateInputSchema: z.ZodType<Prisma.StoreMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  cover: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  returnPolicy: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingService: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMax: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StoreSumOrderByAggregateInputSchema: z.ZodType<Prisma.StoreSumOrderByAggregateInput> = z.object({
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  numReviews: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeForAdditionalItem: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeePerKg: z.lazy(() => SortOrderSchema).optional(),
  defaultShippingFeeFixed: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMin: z.lazy(() => SortOrderSchema).optional(),
  defaultDeliveryTimeMax: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumStoreStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumStoreStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => StoreStatusSchema).optional(),
  in: z.lazy(() => StoreStatusSchema).array().optional(),
  notIn: z.lazy(() => StoreStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => NestedEnumStoreStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumStoreStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumStoreStatusFilterSchema).optional()
}).strict();

export const SubCategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.SubCategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubCategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SubCategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubCategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.SubCategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumRoleFilterSchema: z.ZodType<Prisma.EnumRoleFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleFilterSchema) ]).optional(),
}).strict();

export const StoreListRelationFilterSchema: z.ZodType<Prisma.StoreListRelationFilter> = z.object({
  every: z.lazy(() => StoreWhereInputSchema).optional(),
  some: z.lazy(() => StoreWhereInputSchema).optional(),
  none: z.lazy(() => StoreWhereInputSchema).optional()
}).strict();

export const CartNullableScalarRelationFilterSchema: z.ZodType<Prisma.CartNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => CartWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CartWhereInputSchema).optional().nullable()
}).strict();

export const PaymentDetailsListRelationFilterSchema: z.ZodType<Prisma.PaymentDetailsListRelationFilter> = z.object({
  every: z.lazy(() => PaymentDetailsWhereInputSchema).optional(),
  some: z.lazy(() => PaymentDetailsWhereInputSchema).optional(),
  none: z.lazy(() => PaymentDetailsWhereInputSchema).optional()
}).strict();

export const StoreOrderByRelationAggregateInputSchema: z.ZodType<Prisma.StoreOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentDetailsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PaymentDetailsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  picture: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  picture: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  picture: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumRoleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRoleFilterSchema).optional()
}).strict();

export const SizeNullableScalarRelationFilterSchema: z.ZodType<Prisma.SizeNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => SizeWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SizeWhereInputSchema).optional().nullable()
}).strict();

export const WishlistCountOrderByAggregateInputSchema: z.ZodType<Prisma.WishlistCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WishlistMaxOrderByAggregateInputSchema: z.ZodType<Prisma.WishlistMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WishlistMinOrderByAggregateInputSchema: z.ZodType<Prisma.WishlistMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  sizeId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutCartInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCartInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCartInputSchema),z.lazy(() => UserUncheckedCreateWithoutCartInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCartInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const CouponCreateNestedOneWithoutCartsInputSchema: z.ZodType<Prisma.CouponCreateNestedOneWithoutCartsInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutCartsInputSchema),z.lazy(() => CouponUncheckedCreateWithoutCartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CouponCreateOrConnectWithoutCartsInputSchema).optional(),
  connect: z.lazy(() => CouponWhereUniqueInputSchema).optional()
}).strict();

export const CartItemCreateNestedManyWithoutCartInputSchema: z.ZodType<Prisma.CartItemCreateNestedManyWithoutCartInput> = z.object({
  create: z.union([ z.lazy(() => CartItemCreateWithoutCartInputSchema),z.lazy(() => CartItemCreateWithoutCartInputSchema).array(),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartItemCreateOrConnectWithoutCartInputSchema),z.lazy(() => CartItemCreateOrConnectWithoutCartInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartItemCreateManyCartInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CartItemUncheckedCreateNestedManyWithoutCartInputSchema: z.ZodType<Prisma.CartItemUncheckedCreateNestedManyWithoutCartInput> = z.object({
  create: z.union([ z.lazy(() => CartItemCreateWithoutCartInputSchema),z.lazy(() => CartItemCreateWithoutCartInputSchema).array(),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartItemCreateOrConnectWithoutCartInputSchema),z.lazy(() => CartItemCreateOrConnectWithoutCartInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartItemCreateManyCartInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const UserUpdateOneRequiredWithoutCartNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCartNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCartInputSchema),z.lazy(() => UserUncheckedCreateWithoutCartInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCartInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCartInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCartInputSchema),z.lazy(() => UserUpdateWithoutCartInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCartInputSchema) ]).optional(),
}).strict();

export const CouponUpdateOneWithoutCartsNestedInputSchema: z.ZodType<Prisma.CouponUpdateOneWithoutCartsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutCartsInputSchema),z.lazy(() => CouponUncheckedCreateWithoutCartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CouponCreateOrConnectWithoutCartsInputSchema).optional(),
  upsert: z.lazy(() => CouponUpsertWithoutCartsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CouponWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CouponWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CouponWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CouponUpdateToOneWithWhereWithoutCartsInputSchema),z.lazy(() => CouponUpdateWithoutCartsInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutCartsInputSchema) ]).optional(),
}).strict();

export const CartItemUpdateManyWithoutCartNestedInputSchema: z.ZodType<Prisma.CartItemUpdateManyWithoutCartNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartItemCreateWithoutCartInputSchema),z.lazy(() => CartItemCreateWithoutCartInputSchema).array(),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartItemCreateOrConnectWithoutCartInputSchema),z.lazy(() => CartItemCreateOrConnectWithoutCartInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CartItemUpsertWithWhereUniqueWithoutCartInputSchema),z.lazy(() => CartItemUpsertWithWhereUniqueWithoutCartInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartItemCreateManyCartInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CartItemUpdateWithWhereUniqueWithoutCartInputSchema),z.lazy(() => CartItemUpdateWithWhereUniqueWithoutCartInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CartItemUpdateManyWithWhereWithoutCartInputSchema),z.lazy(() => CartItemUpdateManyWithWhereWithoutCartInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CartItemScalarWhereInputSchema),z.lazy(() => CartItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const CartItemUncheckedUpdateManyWithoutCartNestedInputSchema: z.ZodType<Prisma.CartItemUncheckedUpdateManyWithoutCartNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartItemCreateWithoutCartInputSchema),z.lazy(() => CartItemCreateWithoutCartInputSchema).array(),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartItemCreateOrConnectWithoutCartInputSchema),z.lazy(() => CartItemCreateOrConnectWithoutCartInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CartItemUpsertWithWhereUniqueWithoutCartInputSchema),z.lazy(() => CartItemUpsertWithWhereUniqueWithoutCartInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartItemCreateManyCartInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CartItemUpdateWithWhereUniqueWithoutCartInputSchema),z.lazy(() => CartItemUpdateWithWhereUniqueWithoutCartInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CartItemUpdateManyWithWhereWithoutCartInputSchema),z.lazy(() => CartItemUpdateManyWithWhereWithoutCartInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CartItemScalarWhereInputSchema),z.lazy(() => CartItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CartCreateNestedOneWithoutCartItemsInputSchema: z.ZodType<Prisma.CartCreateNestedOneWithoutCartItemsInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutCartItemsInputSchema),z.lazy(() => CartUncheckedCreateWithoutCartItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CartCreateOrConnectWithoutCartItemsInputSchema).optional(),
  connect: z.lazy(() => CartWhereUniqueInputSchema).optional()
}).strict();

export const StoreCreateNestedOneWithoutCartItemsInputSchema: z.ZodType<Prisma.StoreCreateNestedOneWithoutCartItemsInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutCartItemsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutCartItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutCartItemsInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const CartUpdateOneRequiredWithoutCartItemsNestedInputSchema: z.ZodType<Prisma.CartUpdateOneRequiredWithoutCartItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutCartItemsInputSchema),z.lazy(() => CartUncheckedCreateWithoutCartItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CartCreateOrConnectWithoutCartItemsInputSchema).optional(),
  upsert: z.lazy(() => CartUpsertWithoutCartItemsInputSchema).optional(),
  connect: z.lazy(() => CartWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CartUpdateToOneWithWhereWithoutCartItemsInputSchema),z.lazy(() => CartUpdateWithoutCartItemsInputSchema),z.lazy(() => CartUncheckedUpdateWithoutCartItemsInputSchema) ]).optional(),
}).strict();

export const StoreUpdateOneRequiredWithoutCartItemsNestedInputSchema: z.ZodType<Prisma.StoreUpdateOneRequiredWithoutCartItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutCartItemsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutCartItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutCartItemsInputSchema).optional(),
  upsert: z.lazy(() => StoreUpsertWithoutCartItemsInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StoreUpdateToOneWithWhereWithoutCartItemsInputSchema),z.lazy(() => StoreUpdateWithoutCartItemsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutCartItemsInputSchema) ]).optional(),
}).strict();

export const SubCategoryCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema).array(),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubCategoryCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => SubCategoryCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubCategoryCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductCreateWithoutCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubCategoryUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema).array(),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubCategoryCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => SubCategoryCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubCategoryCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductCreateWithoutCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const SubCategoryUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.SubCategoryUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema).array(),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubCategoryCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => SubCategoryCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubCategoryUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => SubCategoryUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubCategoryCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubCategoryUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => SubCategoryUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubCategoryUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => SubCategoryUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubCategoryScalarWhereInputSchema),z.lazy(() => SubCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductCreateWithoutCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubCategoryUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.SubCategoryUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema).array(),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubCategoryCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => SubCategoryCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubCategoryUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => SubCategoryUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubCategoryCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubCategoryWhereUniqueInputSchema),z.lazy(() => SubCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubCategoryUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => SubCategoryUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubCategoryUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => SubCategoryUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubCategoryScalarWhereInputSchema),z.lazy(() => SubCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductCreateWithoutCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductVariantCreateNestedOneWithoutColorsInputSchema: z.ZodType<Prisma.ProductVariantCreateNestedOneWithoutColorsInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutColorsInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutColorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutColorsInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional()
}).strict();

export const ProductVariantUpdateOneRequiredWithoutColorsNestedInputSchema: z.ZodType<Prisma.ProductVariantUpdateOneRequiredWithoutColorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutColorsInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutColorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutColorsInputSchema).optional(),
  upsert: z.lazy(() => ProductVariantUpsertWithoutColorsInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductVariantUpdateToOneWithWhereWithoutColorsInputSchema),z.lazy(() => ProductVariantUpdateWithoutColorsInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutColorsInputSchema) ]).optional(),
}).strict();

export const ShippingRateCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateCreateWithoutCountryInputSchema).array(),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingRateCreateOrConnectWithoutCountryInputSchema),z.lazy(() => ShippingRateCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingRateCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FreeShippingCountryCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema).array(),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FreeShippingCountryCreateOrConnectWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FreeShippingCountryCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShippingAddressCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema).array(),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingAddressCreateOrConnectWithoutCountryInputSchema),z.lazy(() => ShippingAddressCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingAddressCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShippingRateUncheckedCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateUncheckedCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateCreateWithoutCountryInputSchema).array(),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingRateCreateOrConnectWithoutCountryInputSchema),z.lazy(() => ShippingRateCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingRateCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FreeShippingCountryUncheckedCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema).array(),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FreeShippingCountryCreateOrConnectWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FreeShippingCountryCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShippingAddressUncheckedCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema).array(),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingAddressCreateOrConnectWithoutCountryInputSchema),z.lazy(() => ShippingAddressCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingAddressCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShippingRateUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.ShippingRateUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateCreateWithoutCountryInputSchema).array(),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingRateCreateOrConnectWithoutCountryInputSchema),z.lazy(() => ShippingRateCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShippingRateUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => ShippingRateUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingRateCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShippingRateUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => ShippingRateUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShippingRateUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => ShippingRateUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShippingRateScalarWhereInputSchema),z.lazy(() => ShippingRateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FreeShippingCountryUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema).array(),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FreeShippingCountryCreateOrConnectWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FreeShippingCountryUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FreeShippingCountryCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FreeShippingCountryUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FreeShippingCountryUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FreeShippingCountryScalarWhereInputSchema),z.lazy(() => FreeShippingCountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShippingAddressUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.ShippingAddressUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema).array(),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingAddressCreateOrConnectWithoutCountryInputSchema),z.lazy(() => ShippingAddressCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShippingAddressUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => ShippingAddressUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingAddressCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShippingAddressUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => ShippingAddressUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShippingAddressUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => ShippingAddressUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShippingAddressScalarWhereInputSchema),z.lazy(() => ShippingAddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShippingRateUncheckedUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.ShippingRateUncheckedUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateCreateWithoutCountryInputSchema).array(),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingRateCreateOrConnectWithoutCountryInputSchema),z.lazy(() => ShippingRateCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShippingRateUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => ShippingRateUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingRateCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShippingRateUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => ShippingRateUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShippingRateUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => ShippingRateUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShippingRateScalarWhereInputSchema),z.lazy(() => ShippingRateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FreeShippingCountryUncheckedUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema).array(),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FreeShippingCountryCreateOrConnectWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FreeShippingCountryUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FreeShippingCountryCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FreeShippingCountryUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FreeShippingCountryUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FreeShippingCountryScalarWhereInputSchema),z.lazy(() => FreeShippingCountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShippingAddressUncheckedUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema).array(),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingAddressCreateOrConnectWithoutCountryInputSchema),z.lazy(() => ShippingAddressCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShippingAddressUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => ShippingAddressUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingAddressCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShippingAddressUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => ShippingAddressUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShippingAddressUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => ShippingAddressUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShippingAddressScalarWhereInputSchema),z.lazy(() => ShippingAddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StoreCreateNestedOneWithoutCouponsInputSchema: z.ZodType<Prisma.StoreCreateNestedOneWithoutCouponsInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutCouponsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutCouponsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutCouponsInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional()
}).strict();

export const OrderGroupCreateNestedManyWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupCreateNestedManyWithoutCouponInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupCreateWithoutCouponInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutCouponInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutCouponInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyCouponInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutCouponsInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutCouponsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCouponsInputSchema),z.lazy(() => UserCreateWithoutCouponsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutCouponsInputSchema),z.lazy(() => UserCreateOrConnectWithoutCouponsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CartCreateNestedManyWithoutCouponInputSchema: z.ZodType<Prisma.CartCreateNestedManyWithoutCouponInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutCouponInputSchema),z.lazy(() => CartCreateWithoutCouponInputSchema).array(),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartCreateOrConnectWithoutCouponInputSchema),z.lazy(() => CartCreateOrConnectWithoutCouponInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartCreateManyCouponInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderGroupUncheckedCreateNestedManyWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupUncheckedCreateNestedManyWithoutCouponInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupCreateWithoutCouponInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutCouponInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutCouponInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyCouponInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutCouponsInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutCouponsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCouponsInputSchema),z.lazy(() => UserCreateWithoutCouponsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutCouponsInputSchema),z.lazy(() => UserCreateOrConnectWithoutCouponsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CartUncheckedCreateNestedManyWithoutCouponInputSchema: z.ZodType<Prisma.CartUncheckedCreateNestedManyWithoutCouponInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutCouponInputSchema),z.lazy(() => CartCreateWithoutCouponInputSchema).array(),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartCreateOrConnectWithoutCouponInputSchema),z.lazy(() => CartCreateOrConnectWithoutCouponInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartCreateManyCouponInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StoreUpdateOneRequiredWithoutCouponsNestedInputSchema: z.ZodType<Prisma.StoreUpdateOneRequiredWithoutCouponsNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutCouponsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutCouponsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutCouponsInputSchema).optional(),
  upsert: z.lazy(() => StoreUpsertWithoutCouponsInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StoreUpdateToOneWithWhereWithoutCouponsInputSchema),z.lazy(() => StoreUpdateWithoutCouponsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutCouponsInputSchema) ]).optional(),
}).strict();

export const OrderGroupUpdateManyWithoutCouponNestedInputSchema: z.ZodType<Prisma.OrderGroupUpdateManyWithoutCouponNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupCreateWithoutCouponInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutCouponInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutCouponInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutCouponInputSchema),z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutCouponInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyCouponInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutCouponInputSchema),z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutCouponInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderGroupUpdateManyWithWhereWithoutCouponInputSchema),z.lazy(() => OrderGroupUpdateManyWithWhereWithoutCouponInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderGroupScalarWhereInputSchema),z.lazy(() => OrderGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutCouponsNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutCouponsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCouponsInputSchema),z.lazy(() => UserCreateWithoutCouponsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutCouponsInputSchema),z.lazy(() => UserCreateOrConnectWithoutCouponsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutCouponsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutCouponsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutCouponsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutCouponsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutCouponsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutCouponsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CartUpdateManyWithoutCouponNestedInputSchema: z.ZodType<Prisma.CartUpdateManyWithoutCouponNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutCouponInputSchema),z.lazy(() => CartCreateWithoutCouponInputSchema).array(),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartCreateOrConnectWithoutCouponInputSchema),z.lazy(() => CartCreateOrConnectWithoutCouponInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CartUpsertWithWhereUniqueWithoutCouponInputSchema),z.lazy(() => CartUpsertWithWhereUniqueWithoutCouponInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartCreateManyCouponInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CartUpdateWithWhereUniqueWithoutCouponInputSchema),z.lazy(() => CartUpdateWithWhereUniqueWithoutCouponInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CartUpdateManyWithWhereWithoutCouponInputSchema),z.lazy(() => CartUpdateManyWithWhereWithoutCouponInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CartScalarWhereInputSchema),z.lazy(() => CartScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderGroupUncheckedUpdateManyWithoutCouponNestedInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateManyWithoutCouponNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupCreateWithoutCouponInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutCouponInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutCouponInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutCouponInputSchema),z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutCouponInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyCouponInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutCouponInputSchema),z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutCouponInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderGroupUpdateManyWithWhereWithoutCouponInputSchema),z.lazy(() => OrderGroupUpdateManyWithWhereWithoutCouponInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderGroupScalarWhereInputSchema),z.lazy(() => OrderGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutCouponsNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutCouponsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCouponsInputSchema),z.lazy(() => UserCreateWithoutCouponsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutCouponsInputSchema),z.lazy(() => UserCreateOrConnectWithoutCouponsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutCouponsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutCouponsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutCouponsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutCouponsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutCouponsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutCouponsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CartUncheckedUpdateManyWithoutCouponNestedInputSchema: z.ZodType<Prisma.CartUncheckedUpdateManyWithoutCouponNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutCouponInputSchema),z.lazy(() => CartCreateWithoutCouponInputSchema).array(),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartCreateOrConnectWithoutCouponInputSchema),z.lazy(() => CartCreateOrConnectWithoutCouponInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CartUpsertWithWhereUniqueWithoutCouponInputSchema),z.lazy(() => CartUpsertWithWhereUniqueWithoutCouponInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartCreateManyCouponInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CartWhereUniqueInputSchema),z.lazy(() => CartWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CartUpdateWithWhereUniqueWithoutCouponInputSchema),z.lazy(() => CartUpdateWithWhereUniqueWithoutCouponInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CartUpdateManyWithWhereWithoutCouponInputSchema),z.lazy(() => CartUpdateManyWithWhereWithoutCouponInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CartScalarWhereInputSchema),z.lazy(() => CartScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FreeShippingCreateNestedOneWithoutEligibaleCountriesInputSchema: z.ZodType<Prisma.FreeShippingCreateNestedOneWithoutEligibaleCountriesInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutEligibaleCountriesInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutEligibaleCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FreeShippingCreateOrConnectWithoutEligibaleCountriesInputSchema).optional(),
  connect: z.lazy(() => FreeShippingWhereUniqueInputSchema).optional()
}).strict();

export const CountryCreateNestedOneWithoutFreeShippingCountriesInputSchema: z.ZodType<Prisma.CountryCreateNestedOneWithoutFreeShippingCountriesInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutFreeShippingCountriesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutFreeShippingCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutFreeShippingCountriesInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional()
}).strict();

export const FreeShippingUpdateOneRequiredWithoutEligibaleCountriesNestedInputSchema: z.ZodType<Prisma.FreeShippingUpdateOneRequiredWithoutEligibaleCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutEligibaleCountriesInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutEligibaleCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FreeShippingCreateOrConnectWithoutEligibaleCountriesInputSchema).optional(),
  upsert: z.lazy(() => FreeShippingUpsertWithoutEligibaleCountriesInputSchema).optional(),
  connect: z.lazy(() => FreeShippingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FreeShippingUpdateToOneWithWhereWithoutEligibaleCountriesInputSchema),z.lazy(() => FreeShippingUpdateWithoutEligibaleCountriesInputSchema),z.lazy(() => FreeShippingUncheckedUpdateWithoutEligibaleCountriesInputSchema) ]).optional(),
}).strict();

export const CountryUpdateOneRequiredWithoutFreeShippingCountriesNestedInputSchema: z.ZodType<Prisma.CountryUpdateOneRequiredWithoutFreeShippingCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutFreeShippingCountriesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutFreeShippingCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutFreeShippingCountriesInputSchema).optional(),
  upsert: z.lazy(() => CountryUpsertWithoutFreeShippingCountriesInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CountryUpdateToOneWithWhereWithoutFreeShippingCountriesInputSchema),z.lazy(() => CountryUpdateWithoutFreeShippingCountriesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutFreeShippingCountriesInputSchema) ]).optional(),
}).strict();

export const ProductCreateNestedOneWithoutFreeShippingInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutFreeShippingInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutFreeShippingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutFreeShippingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutFreeShippingInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const FreeShippingCountryCreateNestedManyWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateNestedManyWithoutFreeShippingInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema).array(),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FreeShippingCountryCreateManyFreeShippingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FreeShippingCountryUncheckedCreateNestedManyWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedCreateNestedManyWithoutFreeShippingInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema).array(),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FreeShippingCountryCreateManyFreeShippingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdateOneRequiredWithoutFreeShippingNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutFreeShippingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutFreeShippingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutFreeShippingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutFreeShippingInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutFreeShippingInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutFreeShippingInputSchema),z.lazy(() => ProductUpdateWithoutFreeShippingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutFreeShippingInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryUpdateManyWithoutFreeShippingNestedInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateManyWithoutFreeShippingNestedInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema).array(),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FreeShippingCountryUpsertWithWhereUniqueWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUpsertWithWhereUniqueWithoutFreeShippingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FreeShippingCountryCreateManyFreeShippingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FreeShippingCountryUpdateWithWhereUniqueWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUpdateWithWhereUniqueWithoutFreeShippingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FreeShippingCountryUpdateManyWithWhereWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUpdateManyWithWhereWithoutFreeShippingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FreeShippingCountryScalarWhereInputSchema),z.lazy(() => FreeShippingCountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FreeShippingCountryUncheckedUpdateManyWithoutFreeShippingNestedInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedUpdateManyWithoutFreeShippingNestedInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema).array(),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FreeShippingCountryUpsertWithWhereUniqueWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUpsertWithWhereUniqueWithoutFreeShippingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FreeShippingCountryCreateManyFreeShippingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),z.lazy(() => FreeShippingCountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FreeShippingCountryUpdateWithWhereUniqueWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUpdateWithWhereUniqueWithoutFreeShippingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FreeShippingCountryUpdateManyWithWhereWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUpdateManyWithWhereWithoutFreeShippingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FreeShippingCountryScalarWhereInputSchema),z.lazy(() => FreeShippingCountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedManyWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutOfferTagInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOfferTagInputSchema),z.lazy(() => ProductCreateWithoutOfferTagInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOfferTagInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOfferTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOfferTagInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutOfferTagInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOfferTagInputSchema),z.lazy(() => ProductCreateWithoutOfferTagInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOfferTagInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOfferTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOfferTagInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdateManyWithoutOfferTagNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutOfferTagNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOfferTagInputSchema),z.lazy(() => ProductCreateWithoutOfferTagInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOfferTagInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOfferTagInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutOfferTagInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutOfferTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOfferTagInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutOfferTagInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutOfferTagInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutOfferTagInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutOfferTagInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutOfferTagNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutOfferTagNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOfferTagInputSchema),z.lazy(() => ProductCreateWithoutOfferTagInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOfferTagInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOfferTagInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutOfferTagInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutOfferTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOfferTagInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutOfferTagInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutOfferTagInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutOfferTagInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutOfferTagInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderItemCreateNestedManyWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemCreateNestedManyWithoutOrderGroupInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutOrderGroupInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutOrderGroupInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyOrderGroupInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderCreateNestedOneWithoutGroupsInputSchema: z.ZodType<Prisma.OrderCreateNestedOneWithoutGroupsInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutGroupsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutGroupsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrderCreateOrConnectWithoutGroupsInputSchema).optional(),
  connect: z.lazy(() => OrderWhereUniqueInputSchema).optional()
}).strict();

export const StoreCreateNestedOneWithoutOrderGroupsInputSchema: z.ZodType<Prisma.StoreCreateNestedOneWithoutOrderGroupsInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutOrderGroupsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutOrderGroupsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutOrderGroupsInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional()
}).strict();

export const CouponCreateNestedOneWithoutOrdersInputSchema: z.ZodType<Prisma.CouponCreateNestedOneWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutOrdersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CouponCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => CouponWhereUniqueInputSchema).optional()
}).strict();

export const OrderItemUncheckedCreateNestedManyWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemUncheckedCreateNestedManyWithoutOrderGroupInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutOrderGroupInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutOrderGroupInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyOrderGroupInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumOrderStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumOrderStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => OrderStatusSchema).optional()
}).strict();

export const OrderItemUpdateManyWithoutOrderGroupNestedInputSchema: z.ZodType<Prisma.OrderItemUpdateManyWithoutOrderGroupNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutOrderGroupInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutOrderGroupInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderGroupInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyOrderGroupInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderGroupInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderGroupInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderUpdateOneRequiredWithoutGroupsNestedInputSchema: z.ZodType<Prisma.OrderUpdateOneRequiredWithoutGroupsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutGroupsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutGroupsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrderCreateOrConnectWithoutGroupsInputSchema).optional(),
  upsert: z.lazy(() => OrderUpsertWithoutGroupsInputSchema).optional(),
  connect: z.lazy(() => OrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrderUpdateToOneWithWhereWithoutGroupsInputSchema),z.lazy(() => OrderUpdateWithoutGroupsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutGroupsInputSchema) ]).optional(),
}).strict();

export const StoreUpdateOneRequiredWithoutOrderGroupsNestedInputSchema: z.ZodType<Prisma.StoreUpdateOneRequiredWithoutOrderGroupsNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutOrderGroupsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutOrderGroupsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutOrderGroupsInputSchema).optional(),
  upsert: z.lazy(() => StoreUpsertWithoutOrderGroupsInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StoreUpdateToOneWithWhereWithoutOrderGroupsInputSchema),z.lazy(() => StoreUpdateWithoutOrderGroupsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutOrderGroupsInputSchema) ]).optional(),
}).strict();

export const CouponUpdateOneWithoutOrdersNestedInputSchema: z.ZodType<Prisma.CouponUpdateOneWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutOrdersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CouponCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z.lazy(() => CouponUpsertWithoutOrdersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CouponWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CouponWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CouponWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CouponUpdateToOneWithWhereWithoutOrdersInputSchema),z.lazy(() => CouponUpdateWithoutOrdersInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutOrdersInputSchema) ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateManyWithoutOrderGroupNestedInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateManyWithoutOrderGroupNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutOrderGroupInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutOrderGroupInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderGroupInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyOrderGroupInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderGroupInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderGroupInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderGroupCreateNestedOneWithoutItemsInputSchema: z.ZodType<Prisma.OrderGroupCreateNestedOneWithoutItemsInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutItemsInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrderGroupCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => OrderGroupWhereUniqueInputSchema).optional()
}).strict();

export const EnumProductStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumProductStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ProductStatusSchema).optional()
}).strict();

export const OrderGroupUpdateOneRequiredWithoutItemsNestedInputSchema: z.ZodType<Prisma.OrderGroupUpdateOneRequiredWithoutItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutItemsInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrderGroupCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z.lazy(() => OrderGroupUpsertWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => OrderGroupWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrderGroupUpdateToOneWithWhereWithoutItemsInputSchema),z.lazy(() => OrderGroupUpdateWithoutItemsInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutItemsInputSchema) ]).optional(),
}).strict();

export const OrderGroupCreateNestedManyWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupCreateNestedManyWithoutOrderInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupCreateWithoutOrderInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutOrderInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PaymentDetailsCreateNestedOneWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsCreateNestedOneWithoutOrderInput> = z.object({
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PaymentDetailsCreateOrConnectWithoutOrderInputSchema).optional(),
  connect: z.lazy(() => PaymentDetailsWhereUniqueInputSchema).optional()
}).strict();

export const ShippingAddressCreateNestedOneWithoutOrdersInputSchema: z.ZodType<Prisma.ShippingAddressCreateNestedOneWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutOrdersInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ShippingAddressCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => ShippingAddressWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutOrdersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrdersInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrderGroupUncheckedCreateNestedManyWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupUncheckedCreateNestedManyWithoutOrderInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupCreateWithoutOrderInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutOrderInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PaymentDetailsUncheckedCreateNestedOneWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedCreateNestedOneWithoutOrderInput> = z.object({
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PaymentDetailsCreateOrConnectWithoutOrderInputSchema).optional(),
  connect: z.lazy(() => PaymentDetailsWhereUniqueInputSchema).optional()
}).strict();

export const EnumPaymentStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPaymentStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PaymentStatusSchema).optional()
}).strict();

export const NullableEnumPaymentMethodFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumPaymentMethodFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PaymentMethodSchema).optional().nullable()
}).strict();

export const OrderGroupUpdateManyWithoutOrderNestedInputSchema: z.ZodType<Prisma.OrderGroupUpdateManyWithoutOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupCreateWithoutOrderInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutOrderInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutOrderInputSchema),z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutOrderInputSchema),z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderGroupUpdateManyWithWhereWithoutOrderInputSchema),z.lazy(() => OrderGroupUpdateManyWithWhereWithoutOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderGroupScalarWhereInputSchema),z.lazy(() => OrderGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PaymentDetailsUpdateOneWithoutOrderNestedInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateOneWithoutOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PaymentDetailsCreateOrConnectWithoutOrderInputSchema).optional(),
  upsert: z.lazy(() => PaymentDetailsUpsertWithoutOrderInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PaymentDetailsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PaymentDetailsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PaymentDetailsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PaymentDetailsUpdateToOneWithWhereWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUpdateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedUpdateWithoutOrderInputSchema) ]).optional(),
}).strict();

export const ShippingAddressUpdateOneRequiredWithoutOrdersNestedInputSchema: z.ZodType<Prisma.ShippingAddressUpdateOneRequiredWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutOrdersInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ShippingAddressCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z.lazy(() => ShippingAddressUpsertWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => ShippingAddressWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ShippingAddressUpdateToOneWithWhereWithoutOrdersInputSchema),z.lazy(() => ShippingAddressUpdateWithoutOrdersInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateWithoutOrdersInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutOrdersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrdersInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutOrdersInputSchema),z.lazy(() => UserUpdateWithoutOrdersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrdersInputSchema) ]).optional(),
}).strict();

export const OrderGroupUncheckedUpdateManyWithoutOrderNestedInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateManyWithoutOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupCreateWithoutOrderInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutOrderInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutOrderInputSchema),z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutOrderInputSchema),z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderGroupUpdateManyWithWhereWithoutOrderInputSchema),z.lazy(() => OrderGroupUpdateManyWithWhereWithoutOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderGroupScalarWhereInputSchema),z.lazy(() => OrderGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PaymentDetailsUncheckedUpdateOneWithoutOrderNestedInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedUpdateOneWithoutOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PaymentDetailsCreateOrConnectWithoutOrderInputSchema).optional(),
  upsert: z.lazy(() => PaymentDetailsUpsertWithoutOrderInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PaymentDetailsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PaymentDetailsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PaymentDetailsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PaymentDetailsUpdateToOneWithWhereWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUpdateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedUpdateWithoutOrderInputSchema) ]).optional(),
}).strict();

export const OrderCreateNestedOneWithoutPaymentDetailsInputSchema: z.ZodType<Prisma.OrderCreateNestedOneWithoutPaymentDetailsInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutPaymentDetailsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutPaymentDetailsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrderCreateOrConnectWithoutPaymentDetailsInputSchema).optional(),
  connect: z.lazy(() => OrderWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutPaymentsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPaymentsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPaymentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPaymentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrderUpdateOneRequiredWithoutPaymentDetailsNestedInputSchema: z.ZodType<Prisma.OrderUpdateOneRequiredWithoutPaymentDetailsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutPaymentDetailsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutPaymentDetailsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrderCreateOrConnectWithoutPaymentDetailsInputSchema).optional(),
  upsert: z.lazy(() => OrderUpsertWithoutPaymentDetailsInputSchema).optional(),
  connect: z.lazy(() => OrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrderUpdateToOneWithWhereWithoutPaymentDetailsInputSchema),z.lazy(() => OrderUpdateWithoutPaymentDetailsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutPaymentDetailsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutPaymentsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPaymentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPaymentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPaymentsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPaymentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPaymentsInputSchema),z.lazy(() => UserUpdateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPaymentsInputSchema) ]).optional(),
}).strict();

export const ProductCreateNestedOneWithoutVariantsInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutVariantsInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutVariantsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutVariantsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutVariantsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const SizeCreateNestedManyWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeCreateNestedManyWithoutProductVariantInput> = z.object({
  create: z.union([ z.lazy(() => SizeCreateWithoutProductVariantInputSchema),z.lazy(() => SizeCreateWithoutProductVariantInputSchema).array(),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SizeCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => SizeCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SizeCreateManyProductVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductVariantImageCreateNestedManyWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageCreateNestedManyWithoutProductVariantInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema).array(),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductVariantImageCreateManyProductVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ColorCreateNestedManyWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorCreateNestedManyWithoutProductVariantInput> = z.object({
  create: z.union([ z.lazy(() => ColorCreateWithoutProductVariantInputSchema),z.lazy(() => ColorCreateWithoutProductVariantInputSchema).array(),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ColorCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => ColorCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ColorCreateManyProductVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpecCreateNestedManyWithoutVariantInputSchema: z.ZodType<Prisma.SpecCreateNestedManyWithoutVariantInput> = z.object({
  create: z.union([ z.lazy(() => SpecCreateWithoutVariantInputSchema),z.lazy(() => SpecCreateWithoutVariantInputSchema).array(),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecCreateOrConnectWithoutVariantInputSchema),z.lazy(() => SpecCreateOrConnectWithoutVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecCreateManyVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WishlistCreateNestedManyWithoutVariantInputSchema: z.ZodType<Prisma.WishlistCreateNestedManyWithoutVariantInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutVariantInputSchema),z.lazy(() => WishlistCreateWithoutVariantInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutVariantInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SizeUncheckedCreateNestedManyWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeUncheckedCreateNestedManyWithoutProductVariantInput> = z.object({
  create: z.union([ z.lazy(() => SizeCreateWithoutProductVariantInputSchema),z.lazy(() => SizeCreateWithoutProductVariantInputSchema).array(),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SizeCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => SizeCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SizeCreateManyProductVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductVariantImageUncheckedCreateNestedManyWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageUncheckedCreateNestedManyWithoutProductVariantInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema).array(),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductVariantImageCreateManyProductVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ColorUncheckedCreateNestedManyWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorUncheckedCreateNestedManyWithoutProductVariantInput> = z.object({
  create: z.union([ z.lazy(() => ColorCreateWithoutProductVariantInputSchema),z.lazy(() => ColorCreateWithoutProductVariantInputSchema).array(),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ColorCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => ColorCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ColorCreateManyProductVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpecUncheckedCreateNestedManyWithoutVariantInputSchema: z.ZodType<Prisma.SpecUncheckedCreateNestedManyWithoutVariantInput> = z.object({
  create: z.union([ z.lazy(() => SpecCreateWithoutVariantInputSchema),z.lazy(() => SpecCreateWithoutVariantInputSchema).array(),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecCreateOrConnectWithoutVariantInputSchema),z.lazy(() => SpecCreateOrConnectWithoutVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecCreateManyVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WishlistUncheckedCreateNestedManyWithoutVariantInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateNestedManyWithoutVariantInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutVariantInputSchema),z.lazy(() => WishlistCreateWithoutVariantInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutVariantInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyVariantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdateOneRequiredWithoutVariantsNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutVariantsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutVariantsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutVariantsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutVariantsInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutVariantsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutVariantsInputSchema),z.lazy(() => ProductUpdateWithoutVariantsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutVariantsInputSchema) ]).optional(),
}).strict();

export const SizeUpdateManyWithoutProductVariantNestedInputSchema: z.ZodType<Prisma.SizeUpdateManyWithoutProductVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SizeCreateWithoutProductVariantInputSchema),z.lazy(() => SizeCreateWithoutProductVariantInputSchema).array(),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SizeCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => SizeCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SizeUpsertWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => SizeUpsertWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SizeCreateManyProductVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SizeUpdateWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => SizeUpdateWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SizeUpdateManyWithWhereWithoutProductVariantInputSchema),z.lazy(() => SizeUpdateManyWithWhereWithoutProductVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SizeScalarWhereInputSchema),z.lazy(() => SizeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductVariantImageUpdateManyWithoutProductVariantNestedInputSchema: z.ZodType<Prisma.ProductVariantImageUpdateManyWithoutProductVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema).array(),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductVariantImageUpsertWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUpsertWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductVariantImageCreateManyProductVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductVariantImageUpdateWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUpdateWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductVariantImageUpdateManyWithWhereWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUpdateManyWithWhereWithoutProductVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductVariantImageScalarWhereInputSchema),z.lazy(() => ProductVariantImageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ColorUpdateManyWithoutProductVariantNestedInputSchema: z.ZodType<Prisma.ColorUpdateManyWithoutProductVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ColorCreateWithoutProductVariantInputSchema),z.lazy(() => ColorCreateWithoutProductVariantInputSchema).array(),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ColorCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => ColorCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ColorUpsertWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => ColorUpsertWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ColorCreateManyProductVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ColorUpdateWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => ColorUpdateWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ColorUpdateManyWithWhereWithoutProductVariantInputSchema),z.lazy(() => ColorUpdateManyWithWhereWithoutProductVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ColorScalarWhereInputSchema),z.lazy(() => ColorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpecUpdateManyWithoutVariantNestedInputSchema: z.ZodType<Prisma.SpecUpdateManyWithoutVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecCreateWithoutVariantInputSchema),z.lazy(() => SpecCreateWithoutVariantInputSchema).array(),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecCreateOrConnectWithoutVariantInputSchema),z.lazy(() => SpecCreateOrConnectWithoutVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpecUpsertWithWhereUniqueWithoutVariantInputSchema),z.lazy(() => SpecUpsertWithWhereUniqueWithoutVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecCreateManyVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpecUpdateWithWhereUniqueWithoutVariantInputSchema),z.lazy(() => SpecUpdateWithWhereUniqueWithoutVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpecUpdateManyWithWhereWithoutVariantInputSchema),z.lazy(() => SpecUpdateManyWithWhereWithoutVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpecScalarWhereInputSchema),z.lazy(() => SpecScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WishlistUpdateManyWithoutVariantNestedInputSchema: z.ZodType<Prisma.WishlistUpdateManyWithoutVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutVariantInputSchema),z.lazy(() => WishlistCreateWithoutVariantInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutVariantInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WishlistUpsertWithWhereUniqueWithoutVariantInputSchema),z.lazy(() => WishlistUpsertWithWhereUniqueWithoutVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WishlistUpdateWithWhereUniqueWithoutVariantInputSchema),z.lazy(() => WishlistUpdateWithWhereUniqueWithoutVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WishlistUpdateManyWithWhereWithoutVariantInputSchema),z.lazy(() => WishlistUpdateManyWithWhereWithoutVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SizeUncheckedUpdateManyWithoutProductVariantNestedInputSchema: z.ZodType<Prisma.SizeUncheckedUpdateManyWithoutProductVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SizeCreateWithoutProductVariantInputSchema),z.lazy(() => SizeCreateWithoutProductVariantInputSchema).array(),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SizeCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => SizeCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SizeUpsertWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => SizeUpsertWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SizeCreateManyProductVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SizeWhereUniqueInputSchema),z.lazy(() => SizeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SizeUpdateWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => SizeUpdateWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SizeUpdateManyWithWhereWithoutProductVariantInputSchema),z.lazy(() => SizeUpdateManyWithWhereWithoutProductVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SizeScalarWhereInputSchema),z.lazy(() => SizeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductVariantImageUncheckedUpdateManyWithoutProductVariantNestedInputSchema: z.ZodType<Prisma.ProductVariantImageUncheckedUpdateManyWithoutProductVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema).array(),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductVariantImageUpsertWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUpsertWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductVariantImageCreateManyProductVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductVariantImageWhereUniqueInputSchema),z.lazy(() => ProductVariantImageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductVariantImageUpdateWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUpdateWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductVariantImageUpdateManyWithWhereWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUpdateManyWithWhereWithoutProductVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductVariantImageScalarWhereInputSchema),z.lazy(() => ProductVariantImageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ColorUncheckedUpdateManyWithoutProductVariantNestedInputSchema: z.ZodType<Prisma.ColorUncheckedUpdateManyWithoutProductVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ColorCreateWithoutProductVariantInputSchema),z.lazy(() => ColorCreateWithoutProductVariantInputSchema).array(),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ColorCreateOrConnectWithoutProductVariantInputSchema),z.lazy(() => ColorCreateOrConnectWithoutProductVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ColorUpsertWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => ColorUpsertWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ColorCreateManyProductVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ColorWhereUniqueInputSchema),z.lazy(() => ColorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ColorUpdateWithWhereUniqueWithoutProductVariantInputSchema),z.lazy(() => ColorUpdateWithWhereUniqueWithoutProductVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ColorUpdateManyWithWhereWithoutProductVariantInputSchema),z.lazy(() => ColorUpdateManyWithWhereWithoutProductVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ColorScalarWhereInputSchema),z.lazy(() => ColorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpecUncheckedUpdateManyWithoutVariantNestedInputSchema: z.ZodType<Prisma.SpecUncheckedUpdateManyWithoutVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecCreateWithoutVariantInputSchema),z.lazy(() => SpecCreateWithoutVariantInputSchema).array(),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecCreateOrConnectWithoutVariantInputSchema),z.lazy(() => SpecCreateOrConnectWithoutVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpecUpsertWithWhereUniqueWithoutVariantInputSchema),z.lazy(() => SpecUpsertWithWhereUniqueWithoutVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecCreateManyVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpecUpdateWithWhereUniqueWithoutVariantInputSchema),z.lazy(() => SpecUpdateWithWhereUniqueWithoutVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpecUpdateManyWithWhereWithoutVariantInputSchema),z.lazy(() => SpecUpdateManyWithWhereWithoutVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpecScalarWhereInputSchema),z.lazy(() => SpecScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyWithoutVariantNestedInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyWithoutVariantNestedInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutVariantInputSchema),z.lazy(() => WishlistCreateWithoutVariantInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutVariantInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutVariantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WishlistUpsertWithWhereUniqueWithoutVariantInputSchema),z.lazy(() => WishlistUpsertWithWhereUniqueWithoutVariantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyVariantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WishlistUpdateWithWhereUniqueWithoutVariantInputSchema),z.lazy(() => WishlistUpdateWithWhereUniqueWithoutVariantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WishlistUpdateManyWithWhereWithoutVariantInputSchema),z.lazy(() => WishlistUpdateManyWithWhereWithoutVariantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FreeShippingCreateNestedOneWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingCreateNestedOneWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutProductInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FreeShippingCreateOrConnectWithoutProductInputSchema).optional(),
  connect: z.lazy(() => FreeShippingWhereUniqueInputSchema).optional()
}).strict();

export const StoreCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.StoreCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutProductsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional()
}).strict();

export const ProductVariantCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutProductInputSchema),z.lazy(() => ProductVariantCreateWithoutProductInputSchema).array(),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductVariantCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProductVariantCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductVariantCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpecCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.SpecCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => SpecCreateWithoutProductInputSchema),z.lazy(() => SpecCreateWithoutProductInputSchema).array(),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecCreateOrConnectWithoutProductInputSchema),z.lazy(() => SpecCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.QuestionCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutProductInputSchema),z.lazy(() => QuestionCreateWithoutProductInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutProductInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReviewCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.ReviewCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutProductInputSchema),z.lazy(() => ReviewCreateWithoutProductInputSchema).array(),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewCreateOrConnectWithoutProductInputSchema),z.lazy(() => ReviewCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WishlistCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.WishlistCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutProductInputSchema),z.lazy(() => WishlistCreateWithoutProductInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutProductInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CategoryCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.CategoryCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutProductsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional()
}).strict();

export const SubCategoryCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.SubCategoryCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutProductsInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubCategoryCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => SubCategoryWhereUniqueInputSchema).optional()
}).strict();

export const OfferTagCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.OfferTagCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => OfferTagCreateWithoutProductsInputSchema),z.lazy(() => OfferTagUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OfferTagCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => OfferTagWhereUniqueInputSchema).optional()
}).strict();

export const FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingUncheckedCreateNestedOneWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutProductInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FreeShippingCreateOrConnectWithoutProductInputSchema).optional(),
  connect: z.lazy(() => FreeShippingWhereUniqueInputSchema).optional()
}).strict();

export const ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutProductInputSchema),z.lazy(() => ProductVariantCreateWithoutProductInputSchema).array(),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductVariantCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProductVariantCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductVariantCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpecUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.SpecUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => SpecCreateWithoutProductInputSchema),z.lazy(() => SpecCreateWithoutProductInputSchema).array(),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecCreateOrConnectWithoutProductInputSchema),z.lazy(() => SpecCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutProductInputSchema),z.lazy(() => QuestionCreateWithoutProductInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutProductInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReviewUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.ReviewUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutProductInputSchema),z.lazy(() => ReviewCreateWithoutProductInputSchema).array(),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewCreateOrConnectWithoutProductInputSchema),z.lazy(() => ReviewCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WishlistUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutProductInputSchema),z.lazy(() => WishlistCreateWithoutProductInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutProductInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumShippingFeeMethodFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumShippingFeeMethodFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ShippingFeeMethodSchema).optional()
}).strict();

export const FreeShippingUpdateOneWithoutProductNestedInputSchema: z.ZodType<Prisma.FreeShippingUpdateOneWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutProductInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FreeShippingCreateOrConnectWithoutProductInputSchema).optional(),
  upsert: z.lazy(() => FreeShippingUpsertWithoutProductInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => FreeShippingWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => FreeShippingWhereInputSchema) ]).optional(),
  connect: z.lazy(() => FreeShippingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FreeShippingUpdateToOneWithWhereWithoutProductInputSchema),z.lazy(() => FreeShippingUpdateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedUpdateWithoutProductInputSchema) ]).optional(),
}).strict();

export const StoreUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<Prisma.StoreUpdateOneRequiredWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutProductsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => StoreUpsertWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StoreUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => StoreUpdateWithoutProductsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const ProductVariantUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.ProductVariantUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutProductInputSchema),z.lazy(() => ProductVariantCreateWithoutProductInputSchema).array(),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductVariantCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProductVariantCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductVariantUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProductVariantUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductVariantCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductVariantUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProductVariantUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductVariantUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => ProductVariantUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductVariantScalarWhereInputSchema),z.lazy(() => ProductVariantScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpecUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.SpecUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecCreateWithoutProductInputSchema),z.lazy(() => SpecCreateWithoutProductInputSchema).array(),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecCreateOrConnectWithoutProductInputSchema),z.lazy(() => SpecCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpecUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => SpecUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpecUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => SpecUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpecUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => SpecUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpecScalarWhereInputSchema),z.lazy(() => SpecScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutProductInputSchema),z.lazy(() => QuestionCreateWithoutProductInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutProductInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReviewUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.ReviewUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutProductInputSchema),z.lazy(() => ReviewCreateWithoutProductInputSchema).array(),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewCreateOrConnectWithoutProductInputSchema),z.lazy(() => ReviewCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReviewUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ReviewUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReviewUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ReviewUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReviewUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => ReviewUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReviewScalarWhereInputSchema),z.lazy(() => ReviewScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WishlistUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.WishlistUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutProductInputSchema),z.lazy(() => WishlistCreateWithoutProductInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutProductInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WishlistUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => WishlistUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WishlistUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => WishlistUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WishlistUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => WishlistUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CategoryUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<Prisma.CategoryUpdateOneRequiredWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutProductsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => CategoryUpsertWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => CategoryUpdateWithoutProductsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<Prisma.SubCategoryUpdateOneRequiredWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutProductsInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubCategoryCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => SubCategoryUpsertWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => SubCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubCategoryUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => SubCategoryUpdateWithoutProductsInputSchema),z.lazy(() => SubCategoryUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const OfferTagUpdateOneWithoutProductsNestedInputSchema: z.ZodType<Prisma.OfferTagUpdateOneWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OfferTagCreateWithoutProductsInputSchema),z.lazy(() => OfferTagUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OfferTagCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => OfferTagUpsertWithoutProductsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OfferTagWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OfferTagWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OfferTagWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OfferTagUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => OfferTagUpdateWithoutProductsInputSchema),z.lazy(() => OfferTagUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema: z.ZodType<Prisma.FreeShippingUncheckedUpdateOneWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutProductInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FreeShippingCreateOrConnectWithoutProductInputSchema).optional(),
  upsert: z.lazy(() => FreeShippingUpsertWithoutProductInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => FreeShippingWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => FreeShippingWhereInputSchema) ]).optional(),
  connect: z.lazy(() => FreeShippingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FreeShippingUpdateToOneWithWhereWithoutProductInputSchema),z.lazy(() => FreeShippingUpdateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedUpdateWithoutProductInputSchema) ]).optional(),
}).strict();

export const ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutProductInputSchema),z.lazy(() => ProductVariantCreateWithoutProductInputSchema).array(),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductVariantCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProductVariantCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductVariantUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProductVariantUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductVariantCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductVariantWhereUniqueInputSchema),z.lazy(() => ProductVariantWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductVariantUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProductVariantUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductVariantUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => ProductVariantUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductVariantScalarWhereInputSchema),z.lazy(() => ProductVariantScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpecUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.SpecUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecCreateWithoutProductInputSchema),z.lazy(() => SpecCreateWithoutProductInputSchema).array(),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecCreateOrConnectWithoutProductInputSchema),z.lazy(() => SpecCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpecUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => SpecUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpecWhereUniqueInputSchema),z.lazy(() => SpecWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpecUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => SpecUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpecUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => SpecUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpecScalarWhereInputSchema),z.lazy(() => SpecScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutProductInputSchema),z.lazy(() => QuestionCreateWithoutProductInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutProductInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReviewUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutProductInputSchema),z.lazy(() => ReviewCreateWithoutProductInputSchema).array(),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewCreateOrConnectWithoutProductInputSchema),z.lazy(() => ReviewCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReviewUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ReviewUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReviewUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ReviewUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReviewUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => ReviewUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReviewScalarWhereInputSchema),z.lazy(() => ReviewScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutProductInputSchema),z.lazy(() => WishlistCreateWithoutProductInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutProductInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WishlistUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => WishlistUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WishlistUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => WishlistUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WishlistUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => WishlistUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductVariantCreateNestedOneWithoutImagesInputSchema: z.ZodType<Prisma.ProductVariantCreateNestedOneWithoutImagesInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutImagesInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutImagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutImagesInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const ProductVariantUpdateOneRequiredWithoutImagesNestedInputSchema: z.ZodType<Prisma.ProductVariantUpdateOneRequiredWithoutImagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutImagesInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutImagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutImagesInputSchema).optional(),
  upsert: z.lazy(() => ProductVariantUpsertWithoutImagesInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductVariantUpdateToOneWithWhereWithoutImagesInputSchema),z.lazy(() => ProductVariantUpdateWithoutImagesInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutImagesInputSchema) ]).optional(),
}).strict();

export const ProductCreateNestedOneWithoutQuestionsInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutQuestionsInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutQuestionsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const ProductUpdateOneRequiredWithoutQuestionsNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutQuestionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutQuestionsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutQuestionsInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutQuestionsInputSchema),z.lazy(() => ProductUpdateWithoutQuestionsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutQuestionsInputSchema) ]).optional(),
}).strict();

export const ReviewCreateNestedOneWithoutImagesInputSchema: z.ZodType<Prisma.ReviewCreateNestedOneWithoutImagesInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutImagesInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutImagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReviewCreateOrConnectWithoutImagesInputSchema).optional(),
  connect: z.lazy(() => ReviewWhereUniqueInputSchema).optional()
}).strict();

export const ReviewUpdateOneRequiredWithoutImagesNestedInputSchema: z.ZodType<Prisma.ReviewUpdateOneRequiredWithoutImagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutImagesInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutImagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ReviewCreateOrConnectWithoutImagesInputSchema).optional(),
  upsert: z.lazy(() => ReviewUpsertWithoutImagesInputSchema).optional(),
  connect: z.lazy(() => ReviewWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ReviewUpdateToOneWithWhereWithoutImagesInputSchema),z.lazy(() => ReviewUpdateWithoutImagesInputSchema),z.lazy(() => ReviewUncheckedUpdateWithoutImagesInputSchema) ]).optional(),
}).strict();

export const ReviewImageCreateNestedManyWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageCreateNestedManyWithoutReviewInput> = z.object({
  create: z.union([ z.lazy(() => ReviewImageCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageCreateWithoutReviewInputSchema).array(),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewImageCreateOrConnectWithoutReviewInputSchema),z.lazy(() => ReviewImageCreateOrConnectWithoutReviewInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewImageCreateManyReviewInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutReviewsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutReviewsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutReviewsInputSchema),z.lazy(() => UserUncheckedCreateWithoutReviewsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReviewsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProductCreateNestedOneWithoutReviewsInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutReviewsInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutReviewsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutReviewsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutReviewsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const ReviewImageUncheckedCreateNestedManyWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageUncheckedCreateNestedManyWithoutReviewInput> = z.object({
  create: z.union([ z.lazy(() => ReviewImageCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageCreateWithoutReviewInputSchema).array(),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewImageCreateOrConnectWithoutReviewInputSchema),z.lazy(() => ReviewImageCreateOrConnectWithoutReviewInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewImageCreateManyReviewInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReviewImageUpdateManyWithoutReviewNestedInputSchema: z.ZodType<Prisma.ReviewImageUpdateManyWithoutReviewNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReviewImageCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageCreateWithoutReviewInputSchema).array(),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewImageCreateOrConnectWithoutReviewInputSchema),z.lazy(() => ReviewImageCreateOrConnectWithoutReviewInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReviewImageUpsertWithWhereUniqueWithoutReviewInputSchema),z.lazy(() => ReviewImageUpsertWithWhereUniqueWithoutReviewInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewImageCreateManyReviewInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReviewImageUpdateWithWhereUniqueWithoutReviewInputSchema),z.lazy(() => ReviewImageUpdateWithWhereUniqueWithoutReviewInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReviewImageUpdateManyWithWhereWithoutReviewInputSchema),z.lazy(() => ReviewImageUpdateManyWithWhereWithoutReviewInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReviewImageScalarWhereInputSchema),z.lazy(() => ReviewImageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutReviewsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutReviewsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutReviewsInputSchema),z.lazy(() => UserUncheckedCreateWithoutReviewsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReviewsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutReviewsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutReviewsInputSchema),z.lazy(() => UserUpdateWithoutReviewsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReviewsInputSchema) ]).optional(),
}).strict();

export const ProductUpdateOneRequiredWithoutReviewsNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutReviewsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutReviewsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutReviewsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutReviewsInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutReviewsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutReviewsInputSchema),z.lazy(() => ProductUpdateWithoutReviewsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutReviewsInputSchema) ]).optional(),
}).strict();

export const ReviewImageUncheckedUpdateManyWithoutReviewNestedInputSchema: z.ZodType<Prisma.ReviewImageUncheckedUpdateManyWithoutReviewNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReviewImageCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageCreateWithoutReviewInputSchema).array(),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewImageCreateOrConnectWithoutReviewInputSchema),z.lazy(() => ReviewImageCreateOrConnectWithoutReviewInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReviewImageUpsertWithWhereUniqueWithoutReviewInputSchema),z.lazy(() => ReviewImageUpsertWithWhereUniqueWithoutReviewInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewImageCreateManyReviewInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReviewImageWhereUniqueInputSchema),z.lazy(() => ReviewImageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReviewImageUpdateWithWhereUniqueWithoutReviewInputSchema),z.lazy(() => ReviewImageUpdateWithWhereUniqueWithoutReviewInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReviewImageUpdateManyWithWhereWithoutReviewInputSchema),z.lazy(() => ReviewImageUpdateManyWithWhereWithoutReviewInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReviewImageScalarWhereInputSchema),z.lazy(() => ReviewImageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderCreateNestedManyWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderCreateNestedManyWithoutShippingAddressInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderCreateWithoutShippingAddressInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutShippingAddressInputSchema),z.lazy(() => OrderCreateOrConnectWithoutShippingAddressInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyShippingAddressInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutShippingAddressesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutShippingAddressesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutShippingAddressesInputSchema),z.lazy(() => UserUncheckedCreateWithoutShippingAddressesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutShippingAddressesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const CountryCreateNestedOneWithoutShippingAddressesInputSchema: z.ZodType<Prisma.CountryCreateNestedOneWithoutShippingAddressesInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutShippingAddressesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutShippingAddressesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutShippingAddressesInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional()
}).strict();

export const OrderUncheckedCreateNestedManyWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderUncheckedCreateNestedManyWithoutShippingAddressInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderCreateWithoutShippingAddressInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutShippingAddressInputSchema),z.lazy(() => OrderCreateOrConnectWithoutShippingAddressInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyShippingAddressInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderUpdateManyWithoutShippingAddressNestedInputSchema: z.ZodType<Prisma.OrderUpdateManyWithoutShippingAddressNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderCreateWithoutShippingAddressInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutShippingAddressInputSchema),z.lazy(() => OrderCreateOrConnectWithoutShippingAddressInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderUpsertWithWhereUniqueWithoutShippingAddressInputSchema),z.lazy(() => OrderUpsertWithWhereUniqueWithoutShippingAddressInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyShippingAddressInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderUpdateWithWhereUniqueWithoutShippingAddressInputSchema),z.lazy(() => OrderUpdateWithWhereUniqueWithoutShippingAddressInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderUpdateManyWithWhereWithoutShippingAddressInputSchema),z.lazy(() => OrderUpdateManyWithWhereWithoutShippingAddressInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutShippingAddressesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutShippingAddressesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutShippingAddressesInputSchema),z.lazy(() => UserUncheckedCreateWithoutShippingAddressesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutShippingAddressesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutShippingAddressesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutShippingAddressesInputSchema),z.lazy(() => UserUpdateWithoutShippingAddressesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutShippingAddressesInputSchema) ]).optional(),
}).strict();

export const CountryUpdateOneRequiredWithoutShippingAddressesNestedInputSchema: z.ZodType<Prisma.CountryUpdateOneRequiredWithoutShippingAddressesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutShippingAddressesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutShippingAddressesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutShippingAddressesInputSchema).optional(),
  upsert: z.lazy(() => CountryUpsertWithoutShippingAddressesInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CountryUpdateToOneWithWhereWithoutShippingAddressesInputSchema),z.lazy(() => CountryUpdateWithoutShippingAddressesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutShippingAddressesInputSchema) ]).optional(),
}).strict();

export const OrderUncheckedUpdateManyWithoutShippingAddressNestedInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyWithoutShippingAddressNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderCreateWithoutShippingAddressInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutShippingAddressInputSchema),z.lazy(() => OrderCreateOrConnectWithoutShippingAddressInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderUpsertWithWhereUniqueWithoutShippingAddressInputSchema),z.lazy(() => OrderUpsertWithWhereUniqueWithoutShippingAddressInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyShippingAddressInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderUpdateWithWhereUniqueWithoutShippingAddressInputSchema),z.lazy(() => OrderUpdateWithWhereUniqueWithoutShippingAddressInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderUpdateManyWithWhereWithoutShippingAddressInputSchema),z.lazy(() => OrderUpdateManyWithWhereWithoutShippingAddressInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedOneWithoutShippingRatesInputSchema: z.ZodType<Prisma.CountryCreateNestedOneWithoutShippingRatesInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutShippingRatesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutShippingRatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutShippingRatesInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional()
}).strict();

export const StoreCreateNestedOneWithoutShippingRatesInputSchema: z.ZodType<Prisma.StoreCreateNestedOneWithoutShippingRatesInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutShippingRatesInputSchema),z.lazy(() => StoreUncheckedCreateWithoutShippingRatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutShippingRatesInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional()
}).strict();

export const CountryUpdateOneRequiredWithoutShippingRatesNestedInputSchema: z.ZodType<Prisma.CountryUpdateOneRequiredWithoutShippingRatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutShippingRatesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutShippingRatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutShippingRatesInputSchema).optional(),
  upsert: z.lazy(() => CountryUpsertWithoutShippingRatesInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CountryUpdateToOneWithWhereWithoutShippingRatesInputSchema),z.lazy(() => CountryUpdateWithoutShippingRatesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutShippingRatesInputSchema) ]).optional(),
}).strict();

export const StoreUpdateOneRequiredWithoutShippingRatesNestedInputSchema: z.ZodType<Prisma.StoreUpdateOneRequiredWithoutShippingRatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutShippingRatesInputSchema),z.lazy(() => StoreUncheckedCreateWithoutShippingRatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StoreCreateOrConnectWithoutShippingRatesInputSchema).optional(),
  upsert: z.lazy(() => StoreUpsertWithoutShippingRatesInputSchema).optional(),
  connect: z.lazy(() => StoreWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StoreUpdateToOneWithWhereWithoutShippingRatesInputSchema),z.lazy(() => StoreUpdateWithoutShippingRatesInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutShippingRatesInputSchema) ]).optional(),
}).strict();

export const WishlistCreateNestedManyWithoutSizeInputSchema: z.ZodType<Prisma.WishlistCreateNestedManyWithoutSizeInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutSizeInputSchema),z.lazy(() => WishlistCreateWithoutSizeInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutSizeInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutSizeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManySizeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductVariantCreateNestedOneWithoutSizesInputSchema: z.ZodType<Prisma.ProductVariantCreateNestedOneWithoutSizesInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutSizesInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutSizesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutSizesInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional()
}).strict();

export const WishlistUncheckedCreateNestedManyWithoutSizeInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateNestedManyWithoutSizeInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutSizeInputSchema),z.lazy(() => WishlistCreateWithoutSizeInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutSizeInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutSizeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManySizeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WishlistUpdateManyWithoutSizeNestedInputSchema: z.ZodType<Prisma.WishlistUpdateManyWithoutSizeNestedInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutSizeInputSchema),z.lazy(() => WishlistCreateWithoutSizeInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutSizeInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutSizeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WishlistUpsertWithWhereUniqueWithoutSizeInputSchema),z.lazy(() => WishlistUpsertWithWhereUniqueWithoutSizeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManySizeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WishlistUpdateWithWhereUniqueWithoutSizeInputSchema),z.lazy(() => WishlistUpdateWithWhereUniqueWithoutSizeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WishlistUpdateManyWithWhereWithoutSizeInputSchema),z.lazy(() => WishlistUpdateManyWithWhereWithoutSizeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductVariantUpdateOneRequiredWithoutSizesNestedInputSchema: z.ZodType<Prisma.ProductVariantUpdateOneRequiredWithoutSizesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutSizesInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutSizesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutSizesInputSchema).optional(),
  upsert: z.lazy(() => ProductVariantUpsertWithoutSizesInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductVariantUpdateToOneWithWhereWithoutSizesInputSchema),z.lazy(() => ProductVariantUpdateWithoutSizesInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutSizesInputSchema) ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyWithoutSizeNestedInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyWithoutSizeNestedInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutSizeInputSchema),z.lazy(() => WishlistCreateWithoutSizeInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutSizeInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutSizeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WishlistUpsertWithWhereUniqueWithoutSizeInputSchema),z.lazy(() => WishlistUpsertWithWhereUniqueWithoutSizeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManySizeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WishlistUpdateWithWhereUniqueWithoutSizeInputSchema),z.lazy(() => WishlistUpdateWithWhereUniqueWithoutSizeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WishlistUpdateManyWithWhereWithoutSizeInputSchema),z.lazy(() => WishlistUpdateManyWithWhereWithoutSizeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedOneWithoutSpecsInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutSpecsInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutSpecsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSpecsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutSpecsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const ProductVariantCreateNestedOneWithoutSpecsInputSchema: z.ZodType<Prisma.ProductVariantCreateNestedOneWithoutSpecsInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutSpecsInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutSpecsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutSpecsInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional()
}).strict();

export const ProductUpdateOneWithoutSpecsNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneWithoutSpecsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutSpecsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSpecsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutSpecsInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutSpecsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutSpecsInputSchema),z.lazy(() => ProductUpdateWithoutSpecsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutSpecsInputSchema) ]).optional(),
}).strict();

export const ProductVariantUpdateOneWithoutSpecsNestedInputSchema: z.ZodType<Prisma.ProductVariantUpdateOneWithoutSpecsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutSpecsInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutSpecsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutSpecsInputSchema).optional(),
  upsert: z.lazy(() => ProductVariantUpsertWithoutSpecsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProductVariantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductVariantUpdateToOneWithWhereWithoutSpecsInputSchema),z.lazy(() => ProductVariantUpdateWithoutSpecsInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutSpecsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutStoresInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutStoresInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutStoresInputSchema),z.lazy(() => UserUncheckedCreateWithoutStoresInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutStoresInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProductCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutStoreInputSchema),z.lazy(() => ProductCreateWithoutStoreInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutStoreInputSchema),z.lazy(() => ProductCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShippingRateCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateCreateWithoutStoreInputSchema).array(),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingRateCreateOrConnectWithoutStoreInputSchema),z.lazy(() => ShippingRateCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingRateCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutFollowingInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutFollowingInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFollowingInputSchema),z.lazy(() => UserCreateWithoutFollowingInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutFollowingInputSchema),z.lazy(() => UserCreateOrConnectWithoutFollowingInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CartItemCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.CartItemCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => CartItemCreateWithoutStoreInputSchema),z.lazy(() => CartItemCreateWithoutStoreInputSchema).array(),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartItemCreateOrConnectWithoutStoreInputSchema),z.lazy(() => CartItemCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartItemCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderGroupCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupCreateWithoutStoreInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutStoreInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CouponCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.CouponCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutStoreInputSchema),z.lazy(() => CouponCreateWithoutStoreInputSchema).array(),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CouponCreateOrConnectWithoutStoreInputSchema),z.lazy(() => CouponCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CouponCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutStoreInputSchema),z.lazy(() => ProductCreateWithoutStoreInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutStoreInputSchema),z.lazy(() => ProductCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShippingRateUncheckedCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateUncheckedCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateCreateWithoutStoreInputSchema).array(),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingRateCreateOrConnectWithoutStoreInputSchema),z.lazy(() => ShippingRateCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingRateCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutFollowingInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutFollowingInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFollowingInputSchema),z.lazy(() => UserCreateWithoutFollowingInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutFollowingInputSchema),z.lazy(() => UserCreateOrConnectWithoutFollowingInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CartItemUncheckedCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.CartItemUncheckedCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => CartItemCreateWithoutStoreInputSchema),z.lazy(() => CartItemCreateWithoutStoreInputSchema).array(),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartItemCreateOrConnectWithoutStoreInputSchema),z.lazy(() => CartItemCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartItemCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderGroupUncheckedCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupUncheckedCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupCreateWithoutStoreInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutStoreInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CouponUncheckedCreateNestedManyWithoutStoreInputSchema: z.ZodType<Prisma.CouponUncheckedCreateNestedManyWithoutStoreInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutStoreInputSchema),z.lazy(() => CouponCreateWithoutStoreInputSchema).array(),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CouponCreateOrConnectWithoutStoreInputSchema),z.lazy(() => CouponCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CouponCreateManyStoreInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumStoreStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumStoreStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => StoreStatusSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutStoresNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutStoresNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutStoresInputSchema),z.lazy(() => UserUncheckedCreateWithoutStoresInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutStoresInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutStoresInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutStoresInputSchema),z.lazy(() => UserUpdateWithoutStoresInputSchema),z.lazy(() => UserUncheckedUpdateWithoutStoresInputSchema) ]).optional(),
}).strict();

export const ProductUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutStoreInputSchema),z.lazy(() => ProductCreateWithoutStoreInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutStoreInputSchema),z.lazy(() => ProductCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShippingRateUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.ShippingRateUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateCreateWithoutStoreInputSchema).array(),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingRateCreateOrConnectWithoutStoreInputSchema),z.lazy(() => ShippingRateCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShippingRateUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => ShippingRateUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingRateCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShippingRateUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => ShippingRateUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShippingRateUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => ShippingRateUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShippingRateScalarWhereInputSchema),z.lazy(() => ShippingRateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutFollowingNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutFollowingNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFollowingInputSchema),z.lazy(() => UserCreateWithoutFollowingInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutFollowingInputSchema),z.lazy(() => UserCreateOrConnectWithoutFollowingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutFollowingInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutFollowingInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutFollowingInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutFollowingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutFollowingInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutFollowingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CartItemUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.CartItemUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartItemCreateWithoutStoreInputSchema),z.lazy(() => CartItemCreateWithoutStoreInputSchema).array(),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartItemCreateOrConnectWithoutStoreInputSchema),z.lazy(() => CartItemCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CartItemUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => CartItemUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartItemCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CartItemUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => CartItemUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CartItemUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => CartItemUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CartItemScalarWhereInputSchema),z.lazy(() => CartItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderGroupUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.OrderGroupUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupCreateWithoutStoreInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutStoreInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderGroupUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => OrderGroupUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderGroupScalarWhereInputSchema),z.lazy(() => OrderGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CouponUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.CouponUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutStoreInputSchema),z.lazy(() => CouponCreateWithoutStoreInputSchema).array(),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CouponCreateOrConnectWithoutStoreInputSchema),z.lazy(() => CouponCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CouponUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => CouponUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CouponCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CouponUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => CouponUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CouponUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => CouponUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CouponScalarWhereInputSchema),z.lazy(() => CouponScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutStoreInputSchema),z.lazy(() => ProductCreateWithoutStoreInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutStoreInputSchema),z.lazy(() => ProductCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShippingRateUncheckedUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.ShippingRateUncheckedUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateCreateWithoutStoreInputSchema).array(),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingRateCreateOrConnectWithoutStoreInputSchema),z.lazy(() => ShippingRateCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShippingRateUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => ShippingRateUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingRateCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShippingRateWhereUniqueInputSchema),z.lazy(() => ShippingRateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShippingRateUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => ShippingRateUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShippingRateUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => ShippingRateUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShippingRateScalarWhereInputSchema),z.lazy(() => ShippingRateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutFollowingNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutFollowingNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFollowingInputSchema),z.lazy(() => UserCreateWithoutFollowingInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutFollowingInputSchema),z.lazy(() => UserCreateOrConnectWithoutFollowingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutFollowingInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutFollowingInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutFollowingInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutFollowingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutFollowingInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutFollowingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CartItemUncheckedUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.CartItemUncheckedUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartItemCreateWithoutStoreInputSchema),z.lazy(() => CartItemCreateWithoutStoreInputSchema).array(),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CartItemCreateOrConnectWithoutStoreInputSchema),z.lazy(() => CartItemCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CartItemUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => CartItemUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CartItemCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CartItemWhereUniqueInputSchema),z.lazy(() => CartItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CartItemUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => CartItemUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CartItemUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => CartItemUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CartItemScalarWhereInputSchema),z.lazy(() => CartItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderGroupUncheckedUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupCreateWithoutStoreInputSchema).array(),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderGroupCreateOrConnectWithoutStoreInputSchema),z.lazy(() => OrderGroupCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => OrderGroupUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderGroupCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderGroupWhereUniqueInputSchema),z.lazy(() => OrderGroupWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => OrderGroupUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderGroupUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => OrderGroupUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderGroupScalarWhereInputSchema),z.lazy(() => OrderGroupScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CouponUncheckedUpdateManyWithoutStoreNestedInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateManyWithoutStoreNestedInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutStoreInputSchema),z.lazy(() => CouponCreateWithoutStoreInputSchema).array(),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CouponCreateOrConnectWithoutStoreInputSchema),z.lazy(() => CouponCreateOrConnectWithoutStoreInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CouponUpsertWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => CouponUpsertWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CouponCreateManyStoreInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CouponUpdateWithWhereUniqueWithoutStoreInputSchema),z.lazy(() => CouponUpdateWithWhereUniqueWithoutStoreInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CouponUpdateManyWithWhereWithoutStoreInputSchema),z.lazy(() => CouponUpdateManyWithWhereWithoutStoreInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CouponScalarWhereInputSchema),z.lazy(() => CouponScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CategoryCreateNestedOneWithoutSubCategoriesInputSchema: z.ZodType<Prisma.CategoryCreateNestedOneWithoutSubCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutSubCategoriesInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutSubCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutSubCategoriesInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional()
}).strict();

export const ProductCreateNestedManyWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutSubCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductCreateWithoutSubCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutSubCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutSubCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManySubCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutSubCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductCreateWithoutSubCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutSubCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutSubCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManySubCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CategoryUpdateOneRequiredWithoutSubCategoriesNestedInputSchema: z.ZodType<Prisma.CategoryUpdateOneRequiredWithoutSubCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutSubCategoriesInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutSubCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutSubCategoriesInputSchema).optional(),
  upsert: z.lazy(() => CategoryUpsertWithoutSubCategoriesInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateToOneWithWhereWithoutSubCategoriesInputSchema),z.lazy(() => CategoryUpdateWithoutSubCategoriesInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutSubCategoriesInputSchema) ]).optional(),
}).strict();

export const ProductUpdateManyWithoutSubCategoryNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutSubCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductCreateWithoutSubCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutSubCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutSubCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutSubCategoryInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutSubCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManySubCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutSubCategoryInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutSubCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutSubCategoryInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutSubCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutSubCategoryNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutSubCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductCreateWithoutSubCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutSubCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutSubCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutSubCategoryInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutSubCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManySubCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutSubCategoryInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutSubCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutSubCategoryInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutSubCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StoreCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.StoreCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutUserInputSchema),z.lazy(() => StoreCreateWithoutUserInputSchema).array(),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StoreCreateOrConnectWithoutUserInputSchema),z.lazy(() => StoreCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StoreCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StoreCreateNestedManyWithoutFollowersInputSchema: z.ZodType<Prisma.StoreCreateNestedManyWithoutFollowersInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutFollowersInputSchema),z.lazy(() => StoreCreateWithoutFollowersInputSchema).array(),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StoreCreateOrConnectWithoutFollowersInputSchema),z.lazy(() => StoreCreateOrConnectWithoutFollowersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReviewCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ReviewCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutUserInputSchema),z.lazy(() => ReviewCreateWithoutUserInputSchema).array(),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewCreateOrConnectWithoutUserInputSchema),z.lazy(() => ReviewCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CartCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.CartCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutUserInputSchema),z.lazy(() => CartUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CartCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => CartWhereUniqueInputSchema).optional()
}).strict();

export const ShippingAddressCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressCreateWithoutUserInputSchema).array(),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingAddressCreateOrConnectWithoutUserInputSchema),z.lazy(() => ShippingAddressCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingAddressCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.OrderCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutUserInputSchema),z.lazy(() => OrderCreateWithoutUserInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutUserInputSchema),z.lazy(() => OrderCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WishlistCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.WishlistCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutUserInputSchema),z.lazy(() => WishlistCreateWithoutUserInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutUserInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PaymentDetailsCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema).array(),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentDetailsCreateOrConnectWithoutUserInputSchema),z.lazy(() => PaymentDetailsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentDetailsCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CouponCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.CouponCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutUsersInputSchema),z.lazy(() => CouponCreateWithoutUsersInputSchema).array(),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CouponCreateOrConnectWithoutUsersInputSchema),z.lazy(() => CouponCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StoreUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.StoreUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutUserInputSchema),z.lazy(() => StoreCreateWithoutUserInputSchema).array(),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StoreCreateOrConnectWithoutUserInputSchema),z.lazy(() => StoreCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StoreCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StoreUncheckedCreateNestedManyWithoutFollowersInputSchema: z.ZodType<Prisma.StoreUncheckedCreateNestedManyWithoutFollowersInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutFollowersInputSchema),z.lazy(() => StoreCreateWithoutFollowersInputSchema).array(),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StoreCreateOrConnectWithoutFollowersInputSchema),z.lazy(() => StoreCreateOrConnectWithoutFollowersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReviewUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ReviewUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutUserInputSchema),z.lazy(() => ReviewCreateWithoutUserInputSchema).array(),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewCreateOrConnectWithoutUserInputSchema),z.lazy(() => ReviewCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CartUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.CartUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutUserInputSchema),z.lazy(() => CartUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CartCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => CartWhereUniqueInputSchema).optional()
}).strict();

export const ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressCreateWithoutUserInputSchema).array(),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingAddressCreateOrConnectWithoutUserInputSchema),z.lazy(() => ShippingAddressCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingAddressCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.OrderUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutUserInputSchema),z.lazy(() => OrderCreateWithoutUserInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutUserInputSchema),z.lazy(() => OrderCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WishlistUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutUserInputSchema),z.lazy(() => WishlistCreateWithoutUserInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutUserInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema).array(),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentDetailsCreateOrConnectWithoutUserInputSchema),z.lazy(() => PaymentDetailsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentDetailsCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CouponUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.CouponUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutUsersInputSchema),z.lazy(() => CouponCreateWithoutUsersInputSchema).array(),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CouponCreateOrConnectWithoutUsersInputSchema),z.lazy(() => CouponCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RoleSchema).optional()
}).strict();

export const StoreUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.StoreUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutUserInputSchema),z.lazy(() => StoreCreateWithoutUserInputSchema).array(),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StoreCreateOrConnectWithoutUserInputSchema),z.lazy(() => StoreCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StoreUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => StoreUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StoreCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StoreUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => StoreUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StoreUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => StoreUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StoreScalarWhereInputSchema),z.lazy(() => StoreScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StoreUpdateManyWithoutFollowersNestedInputSchema: z.ZodType<Prisma.StoreUpdateManyWithoutFollowersNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutFollowersInputSchema),z.lazy(() => StoreCreateWithoutFollowersInputSchema).array(),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StoreCreateOrConnectWithoutFollowersInputSchema),z.lazy(() => StoreCreateOrConnectWithoutFollowersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StoreUpsertWithWhereUniqueWithoutFollowersInputSchema),z.lazy(() => StoreUpsertWithWhereUniqueWithoutFollowersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StoreUpdateWithWhereUniqueWithoutFollowersInputSchema),z.lazy(() => StoreUpdateWithWhereUniqueWithoutFollowersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StoreUpdateManyWithWhereWithoutFollowersInputSchema),z.lazy(() => StoreUpdateManyWithWhereWithoutFollowersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StoreScalarWhereInputSchema),z.lazy(() => StoreScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReviewUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ReviewUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutUserInputSchema),z.lazy(() => ReviewCreateWithoutUserInputSchema).array(),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewCreateOrConnectWithoutUserInputSchema),z.lazy(() => ReviewCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReviewUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ReviewUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReviewUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ReviewUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReviewUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ReviewUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReviewScalarWhereInputSchema),z.lazy(() => ReviewScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CartUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.CartUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutUserInputSchema),z.lazy(() => CartUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CartCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => CartUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CartWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CartWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CartWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CartUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => CartUpdateWithoutUserInputSchema),z.lazy(() => CartUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const ShippingAddressUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ShippingAddressUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressCreateWithoutUserInputSchema).array(),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingAddressCreateOrConnectWithoutUserInputSchema),z.lazy(() => ShippingAddressCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShippingAddressUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ShippingAddressUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingAddressCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShippingAddressUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ShippingAddressUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShippingAddressUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ShippingAddressUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShippingAddressScalarWhereInputSchema),z.lazy(() => ShippingAddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.OrderUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutUserInputSchema),z.lazy(() => OrderCreateWithoutUserInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutUserInputSchema),z.lazy(() => OrderCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => OrderUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => OrderUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => OrderUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WishlistUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.WishlistUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutUserInputSchema),z.lazy(() => WishlistCreateWithoutUserInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutUserInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WishlistUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => WishlistUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WishlistUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => WishlistUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WishlistUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => WishlistUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PaymentDetailsUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema).array(),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentDetailsCreateOrConnectWithoutUserInputSchema),z.lazy(() => PaymentDetailsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PaymentDetailsUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PaymentDetailsUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentDetailsCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PaymentDetailsUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PaymentDetailsUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PaymentDetailsUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PaymentDetailsUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PaymentDetailsScalarWhereInputSchema),z.lazy(() => PaymentDetailsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CouponUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.CouponUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutUsersInputSchema),z.lazy(() => CouponCreateWithoutUsersInputSchema).array(),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CouponCreateOrConnectWithoutUsersInputSchema),z.lazy(() => CouponCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CouponUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => CouponUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CouponUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => CouponUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CouponUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => CouponUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CouponScalarWhereInputSchema),z.lazy(() => CouponScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StoreUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutUserInputSchema),z.lazy(() => StoreCreateWithoutUserInputSchema).array(),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StoreCreateOrConnectWithoutUserInputSchema),z.lazy(() => StoreCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StoreUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => StoreUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StoreCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StoreUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => StoreUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StoreUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => StoreUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StoreScalarWhereInputSchema),z.lazy(() => StoreScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateManyWithoutFollowersNestedInput> = z.object({
  create: z.union([ z.lazy(() => StoreCreateWithoutFollowersInputSchema),z.lazy(() => StoreCreateWithoutFollowersInputSchema).array(),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StoreCreateOrConnectWithoutFollowersInputSchema),z.lazy(() => StoreCreateOrConnectWithoutFollowersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StoreUpsertWithWhereUniqueWithoutFollowersInputSchema),z.lazy(() => StoreUpsertWithWhereUniqueWithoutFollowersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StoreWhereUniqueInputSchema),z.lazy(() => StoreWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StoreUpdateWithWhereUniqueWithoutFollowersInputSchema),z.lazy(() => StoreUpdateWithWhereUniqueWithoutFollowersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StoreUpdateManyWithWhereWithoutFollowersInputSchema),z.lazy(() => StoreUpdateManyWithWhereWithoutFollowersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StoreScalarWhereInputSchema),z.lazy(() => StoreScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReviewUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReviewCreateWithoutUserInputSchema),z.lazy(() => ReviewCreateWithoutUserInputSchema).array(),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReviewCreateOrConnectWithoutUserInputSchema),z.lazy(() => ReviewCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReviewUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ReviewUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReviewCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReviewWhereUniqueInputSchema),z.lazy(() => ReviewWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReviewUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ReviewUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReviewUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ReviewUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReviewScalarWhereInputSchema),z.lazy(() => ReviewScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CartUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.CartUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => CartCreateWithoutUserInputSchema),z.lazy(() => CartUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CartCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => CartUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CartWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CartWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CartWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CartUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => CartUpdateWithoutUserInputSchema),z.lazy(() => CartUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressCreateWithoutUserInputSchema).array(),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShippingAddressCreateOrConnectWithoutUserInputSchema),z.lazy(() => ShippingAddressCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShippingAddressUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ShippingAddressUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShippingAddressCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShippingAddressWhereUniqueInputSchema),z.lazy(() => ShippingAddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShippingAddressUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ShippingAddressUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShippingAddressUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ShippingAddressUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShippingAddressScalarWhereInputSchema),z.lazy(() => ShippingAddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutUserInputSchema),z.lazy(() => OrderCreateWithoutUserInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutUserInputSchema),z.lazy(() => OrderCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => OrderUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => OrderUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => OrderUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => WishlistCreateWithoutUserInputSchema),z.lazy(() => WishlistCreateWithoutUserInputSchema).array(),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WishlistCreateOrConnectWithoutUserInputSchema),z.lazy(() => WishlistCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WishlistUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => WishlistUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WishlistCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WishlistWhereUniqueInputSchema),z.lazy(() => WishlistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WishlistUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => WishlistUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WishlistUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => WishlistUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema).array(),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentDetailsCreateOrConnectWithoutUserInputSchema),z.lazy(() => PaymentDetailsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PaymentDetailsUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PaymentDetailsUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentDetailsCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PaymentDetailsWhereUniqueInputSchema),z.lazy(() => PaymentDetailsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PaymentDetailsUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PaymentDetailsUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PaymentDetailsUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PaymentDetailsUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PaymentDetailsScalarWhereInputSchema),z.lazy(() => PaymentDetailsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CouponUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => CouponCreateWithoutUsersInputSchema),z.lazy(() => CouponCreateWithoutUsersInputSchema).array(),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CouponCreateOrConnectWithoutUsersInputSchema),z.lazy(() => CouponCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CouponUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => CouponUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CouponWhereUniqueInputSchema),z.lazy(() => CouponWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CouponUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => CouponUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CouponUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => CouponUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CouponScalarWhereInputSchema),z.lazy(() => CouponScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutWishlistInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutWishlistInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWishlistInputSchema),z.lazy(() => UserUncheckedCreateWithoutWishlistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutWishlistInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProductCreateNestedOneWithoutWishlistInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutWishlistInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutWishlistInputSchema),z.lazy(() => ProductUncheckedCreateWithoutWishlistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutWishlistInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const ProductVariantCreateNestedOneWithoutWishlistInputSchema: z.ZodType<Prisma.ProductVariantCreateNestedOneWithoutWishlistInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutWishlistInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutWishlistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutWishlistInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional()
}).strict();

export const SizeCreateNestedOneWithoutWishlistInputSchema: z.ZodType<Prisma.SizeCreateNestedOneWithoutWishlistInput> = z.object({
  create: z.union([ z.lazy(() => SizeCreateWithoutWishlistInputSchema),z.lazy(() => SizeUncheckedCreateWithoutWishlistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SizeCreateOrConnectWithoutWishlistInputSchema).optional(),
  connect: z.lazy(() => SizeWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutWishlistNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutWishlistNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWishlistInputSchema),z.lazy(() => UserUncheckedCreateWithoutWishlistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutWishlistInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutWishlistInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutWishlistInputSchema),z.lazy(() => UserUpdateWithoutWishlistInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWishlistInputSchema) ]).optional(),
}).strict();

export const ProductUpdateOneRequiredWithoutWishlistNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutWishlistNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutWishlistInputSchema),z.lazy(() => ProductUncheckedCreateWithoutWishlistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutWishlistInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutWishlistInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutWishlistInputSchema),z.lazy(() => ProductUpdateWithoutWishlistInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutWishlistInputSchema) ]).optional(),
}).strict();

export const ProductVariantUpdateOneRequiredWithoutWishlistNestedInputSchema: z.ZodType<Prisma.ProductVariantUpdateOneRequiredWithoutWishlistNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutWishlistInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutWishlistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductVariantCreateOrConnectWithoutWishlistInputSchema).optional(),
  upsert: z.lazy(() => ProductVariantUpsertWithoutWishlistInputSchema).optional(),
  connect: z.lazy(() => ProductVariantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductVariantUpdateToOneWithWhereWithoutWishlistInputSchema),z.lazy(() => ProductVariantUpdateWithoutWishlistInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutWishlistInputSchema) ]).optional(),
}).strict();

export const SizeUpdateOneWithoutWishlistNestedInputSchema: z.ZodType<Prisma.SizeUpdateOneWithoutWishlistNestedInput> = z.object({
  create: z.union([ z.lazy(() => SizeCreateWithoutWishlistInputSchema),z.lazy(() => SizeUncheckedCreateWithoutWishlistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SizeCreateOrConnectWithoutWishlistInputSchema).optional(),
  upsert: z.lazy(() => SizeUpsertWithoutWishlistInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SizeWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SizeWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SizeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SizeUpdateToOneWithWhereWithoutWishlistInputSchema),z.lazy(() => SizeUpdateWithoutWishlistInputSchema),z.lazy(() => SizeUncheckedUpdateWithoutWishlistInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedEnumOrderStatusFilterSchema: z.ZodType<Prisma.NestedEnumOrderStatusFilter> = z.object({
  equals: z.lazy(() => OrderStatusSchema).optional(),
  in: z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z.lazy(() => OrderStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => NestedEnumOrderStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumOrderStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumOrderStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => OrderStatusSchema).optional(),
  in: z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z.lazy(() => OrderStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => NestedEnumOrderStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumOrderStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumOrderStatusFilterSchema).optional()
}).strict();

export const NestedEnumProductStatusFilterSchema: z.ZodType<Prisma.NestedEnumProductStatusFilter> = z.object({
  equals: z.lazy(() => ProductStatusSchema).optional(),
  in: z.lazy(() => ProductStatusSchema).array().optional(),
  notIn: z.lazy(() => ProductStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => NestedEnumProductStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumProductStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumProductStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ProductStatusSchema).optional(),
  in: z.lazy(() => ProductStatusSchema).array().optional(),
  notIn: z.lazy(() => ProductStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => NestedEnumProductStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProductStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProductStatusFilterSchema).optional()
}).strict();

export const NestedEnumPaymentStatusFilterSchema: z.ZodType<Prisma.NestedEnumPaymentStatusFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPaymentMethodNullableFilterSchema: z.ZodType<Prisma.NestedEnumPaymentMethodNullableFilter> = z.object({
  equals: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  in: z.lazy(() => PaymentMethodSchema).array().optional().nullable(),
  notIn: z.lazy(() => PaymentMethodSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NestedEnumPaymentMethodNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumPaymentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPaymentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional()
}).strict();

export const NestedEnumPaymentMethodNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPaymentMethodNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  in: z.lazy(() => PaymentMethodSchema).array().optional().nullable(),
  notIn: z.lazy(() => PaymentMethodSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NestedEnumPaymentMethodNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentMethodNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentMethodNullableFilterSchema).optional()
}).strict();

export const NestedEnumShippingFeeMethodFilterSchema: z.ZodType<Prisma.NestedEnumShippingFeeMethodFilter> = z.object({
  equals: z.lazy(() => ShippingFeeMethodSchema).optional(),
  in: z.lazy(() => ShippingFeeMethodSchema).array().optional(),
  notIn: z.lazy(() => ShippingFeeMethodSchema).array().optional(),
  not: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => NestedEnumShippingFeeMethodFilterSchema) ]).optional(),
}).strict();

export const NestedEnumShippingFeeMethodWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumShippingFeeMethodWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ShippingFeeMethodSchema).optional(),
  in: z.lazy(() => ShippingFeeMethodSchema).array().optional(),
  notIn: z.lazy(() => ShippingFeeMethodSchema).array().optional(),
  not: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => NestedEnumShippingFeeMethodWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumShippingFeeMethodFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumShippingFeeMethodFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumStoreStatusFilterSchema: z.ZodType<Prisma.NestedEnumStoreStatusFilter> = z.object({
  equals: z.lazy(() => StoreStatusSchema).optional(),
  in: z.lazy(() => StoreStatusSchema).array().optional(),
  notIn: z.lazy(() => StoreStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => NestedEnumStoreStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumStoreStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumStoreStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => StoreStatusSchema).optional(),
  in: z.lazy(() => StoreStatusSchema).array().optional(),
  notIn: z.lazy(() => StoreStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => NestedEnumStoreStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumStoreStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumStoreStatusFilterSchema).optional()
}).strict();

export const NestedEnumRoleFilterSchema: z.ZodType<Prisma.NestedEnumRoleFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleFilterSchema) ]).optional(),
}).strict();

export const NestedEnumRoleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRoleFilterSchema).optional()
}).strict();

export const UserCreateWithoutCartInputSchema: z.ZodType<Prisma.UserCreateWithoutCartInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCartInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCartInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCartInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCartInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCartInputSchema),z.lazy(() => UserUncheckedCreateWithoutCartInputSchema) ]),
}).strict();

export const CouponCreateWithoutCartsInputSchema: z.ZodType<Prisma.CouponCreateWithoutCartsInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutCouponsInputSchema),
  orders: z.lazy(() => OrderGroupCreateNestedManyWithoutCouponInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutCouponsInputSchema).optional()
}).strict();

export const CouponUncheckedCreateWithoutCartsInputSchema: z.ZodType<Prisma.CouponUncheckedCreateWithoutCartsInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutCouponInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutCouponsInputSchema).optional()
}).strict();

export const CouponCreateOrConnectWithoutCartsInputSchema: z.ZodType<Prisma.CouponCreateOrConnectWithoutCartsInput> = z.object({
  where: z.lazy(() => CouponWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CouponCreateWithoutCartsInputSchema),z.lazy(() => CouponUncheckedCreateWithoutCartsInputSchema) ]),
}).strict();

export const CartItemCreateWithoutCartInputSchema: z.ZodType<Prisma.CartItemCreateWithoutCartInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutCartItemsInputSchema)
}).strict();

export const CartItemUncheckedCreateWithoutCartInputSchema: z.ZodType<Prisma.CartItemUncheckedCreateWithoutCartInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartItemCreateOrConnectWithoutCartInputSchema: z.ZodType<Prisma.CartItemCreateOrConnectWithoutCartInput> = z.object({
  where: z.lazy(() => CartItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CartItemCreateWithoutCartInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema) ]),
}).strict();

export const CartItemCreateManyCartInputEnvelopeSchema: z.ZodType<Prisma.CartItemCreateManyCartInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CartItemCreateManyCartInputSchema),z.lazy(() => CartItemCreateManyCartInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutCartInputSchema: z.ZodType<Prisma.UserUpsertWithoutCartInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCartInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCartInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCartInputSchema),z.lazy(() => UserUncheckedCreateWithoutCartInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCartInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCartInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCartInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCartInputSchema) ]),
}).strict();

export const UserUpdateWithoutCartInputSchema: z.ZodType<Prisma.UserUpdateWithoutCartInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCartInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCartInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const CouponUpsertWithoutCartsInputSchema: z.ZodType<Prisma.CouponUpsertWithoutCartsInput> = z.object({
  update: z.union([ z.lazy(() => CouponUpdateWithoutCartsInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutCartsInputSchema) ]),
  create: z.union([ z.lazy(() => CouponCreateWithoutCartsInputSchema),z.lazy(() => CouponUncheckedCreateWithoutCartsInputSchema) ]),
  where: z.lazy(() => CouponWhereInputSchema).optional()
}).strict();

export const CouponUpdateToOneWithWhereWithoutCartsInputSchema: z.ZodType<Prisma.CouponUpdateToOneWithWhereWithoutCartsInput> = z.object({
  where: z.lazy(() => CouponWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CouponUpdateWithoutCartsInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutCartsInputSchema) ]),
}).strict();

export const CouponUpdateWithoutCartsInputSchema: z.ZodType<Prisma.CouponUpdateWithoutCartsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutCouponsNestedInputSchema).optional(),
  orders: z.lazy(() => OrderGroupUpdateManyWithoutCouponNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutCouponsNestedInputSchema).optional()
}).strict();

export const CouponUncheckedUpdateWithoutCartsInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateWithoutCartsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutCouponNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutCouponsNestedInputSchema).optional()
}).strict();

export const CartItemUpsertWithWhereUniqueWithoutCartInputSchema: z.ZodType<Prisma.CartItemUpsertWithWhereUniqueWithoutCartInput> = z.object({
  where: z.lazy(() => CartItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CartItemUpdateWithoutCartInputSchema),z.lazy(() => CartItemUncheckedUpdateWithoutCartInputSchema) ]),
  create: z.union([ z.lazy(() => CartItemCreateWithoutCartInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutCartInputSchema) ]),
}).strict();

export const CartItemUpdateWithWhereUniqueWithoutCartInputSchema: z.ZodType<Prisma.CartItemUpdateWithWhereUniqueWithoutCartInput> = z.object({
  where: z.lazy(() => CartItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CartItemUpdateWithoutCartInputSchema),z.lazy(() => CartItemUncheckedUpdateWithoutCartInputSchema) ]),
}).strict();

export const CartItemUpdateManyWithWhereWithoutCartInputSchema: z.ZodType<Prisma.CartItemUpdateManyWithWhereWithoutCartInput> = z.object({
  where: z.lazy(() => CartItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CartItemUpdateManyMutationInputSchema),z.lazy(() => CartItemUncheckedUpdateManyWithoutCartInputSchema) ]),
}).strict();

export const CartItemScalarWhereInputSchema: z.ZodType<Prisma.CartItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CartItemScalarWhereInputSchema),z.lazy(() => CartItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CartItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CartItemScalarWhereInputSchema),z.lazy(() => CartItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingFee: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cartId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CartCreateWithoutCartItemsInputSchema: z.ZodType<Prisma.CartCreateWithoutCartItemsInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutCartInputSchema),
  coupon: z.lazy(() => CouponCreateNestedOneWithoutCartsInputSchema).optional()
}).strict();

export const CartUncheckedCreateWithoutCartItemsInputSchema: z.ZodType<Prisma.CartUncheckedCreateWithoutCartItemsInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  couponId: z.string().optional().nullable(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartCreateOrConnectWithoutCartItemsInputSchema: z.ZodType<Prisma.CartCreateOrConnectWithoutCartItemsInput> = z.object({
  where: z.lazy(() => CartWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CartCreateWithoutCartItemsInputSchema),z.lazy(() => CartUncheckedCreateWithoutCartItemsInputSchema) ]),
}).strict();

export const StoreCreateWithoutCartItemsInputSchema: z.ZodType<Prisma.StoreCreateWithoutCartItemsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutStoresInputSchema),
  products: z.lazy(() => ProductCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserCreateNestedManyWithoutFollowingInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUncheckedCreateWithoutCartItemsInputSchema: z.ZodType<Prisma.StoreUncheckedCreateWithoutCartItemsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userId: z.string(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedCreateNestedManyWithoutFollowingInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreCreateOrConnectWithoutCartItemsInputSchema: z.ZodType<Prisma.StoreCreateOrConnectWithoutCartItemsInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StoreCreateWithoutCartItemsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutCartItemsInputSchema) ]),
}).strict();

export const CartUpsertWithoutCartItemsInputSchema: z.ZodType<Prisma.CartUpsertWithoutCartItemsInput> = z.object({
  update: z.union([ z.lazy(() => CartUpdateWithoutCartItemsInputSchema),z.lazy(() => CartUncheckedUpdateWithoutCartItemsInputSchema) ]),
  create: z.union([ z.lazy(() => CartCreateWithoutCartItemsInputSchema),z.lazy(() => CartUncheckedCreateWithoutCartItemsInputSchema) ]),
  where: z.lazy(() => CartWhereInputSchema).optional()
}).strict();

export const CartUpdateToOneWithWhereWithoutCartItemsInputSchema: z.ZodType<Prisma.CartUpdateToOneWithWhereWithoutCartItemsInput> = z.object({
  where: z.lazy(() => CartWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CartUpdateWithoutCartItemsInputSchema),z.lazy(() => CartUncheckedUpdateWithoutCartItemsInputSchema) ]),
}).strict();

export const CartUpdateWithoutCartItemsInputSchema: z.ZodType<Prisma.CartUpdateWithoutCartItemsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutCartNestedInputSchema).optional(),
  coupon: z.lazy(() => CouponUpdateOneWithoutCartsNestedInputSchema).optional()
}).strict();

export const CartUncheckedUpdateWithoutCartItemsInputSchema: z.ZodType<Prisma.CartUncheckedUpdateWithoutCartItemsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StoreUpsertWithoutCartItemsInputSchema: z.ZodType<Prisma.StoreUpsertWithoutCartItemsInput> = z.object({
  update: z.union([ z.lazy(() => StoreUpdateWithoutCartItemsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutCartItemsInputSchema) ]),
  create: z.union([ z.lazy(() => StoreCreateWithoutCartItemsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutCartItemsInputSchema) ]),
  where: z.lazy(() => StoreWhereInputSchema).optional()
}).strict();

export const StoreUpdateToOneWithWhereWithoutCartItemsInputSchema: z.ZodType<Prisma.StoreUpdateToOneWithWhereWithoutCartItemsInput> = z.object({
  where: z.lazy(() => StoreWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StoreUpdateWithoutCartItemsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutCartItemsInputSchema) ]),
}).strict();

export const StoreUpdateWithoutCartItemsInputSchema: z.ZodType<Prisma.StoreUpdateWithoutCartItemsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUpdateManyWithoutFollowingNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateWithoutCartItemsInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateWithoutCartItemsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedUpdateManyWithoutFollowingNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const SubCategoryCreateWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryCreateWithoutCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutSubCategoryInputSchema).optional()
}).strict();

export const SubCategoryUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutSubCategoryInputSchema).optional()
}).strict();

export const SubCategoryCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => SubCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const SubCategoryCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.SubCategoryCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SubCategoryCreateManyCategoryInputSchema),z.lazy(() => SubCategoryCreateManyCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ProductCreateWithoutCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ProductCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManyCategoryInputSchema),z.lazy(() => ProductCreateManyCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SubCategoryUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => SubCategoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SubCategoryUpdateWithoutCategoryInputSchema),z.lazy(() => SubCategoryUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutCategoryInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const SubCategoryUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => SubCategoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SubCategoryUpdateWithoutCategoryInputSchema),z.lazy(() => SubCategoryUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const SubCategoryUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => SubCategoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SubCategoryUpdateManyMutationInputSchema),z.lazy(() => SubCategoryUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const SubCategoryScalarWhereInputSchema: z.ZodType<Prisma.SubCategoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubCategoryScalarWhereInputSchema),z.lazy(() => SubCategoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubCategoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubCategoryScalarWhereInputSchema),z.lazy(() => SubCategoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const ProductScalarWhereInputSchema: z.ZodType<Prisma.ProductScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  brand: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sales: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  numReviews: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => EnumShippingFeeMethodFilterSchema),z.lazy(() => ShippingFeeMethodSchema) ]).optional(),
  views: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  freeShippingForAllCountries: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subCategoryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  offerTagId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProductVariantCreateWithoutColorsInputSchema: z.ZodType<Prisma.ProductVariantCreateWithoutColorsInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutVariantsInputSchema),
  sizes: z.lazy(() => SizeCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantUncheckedCreateWithoutColorsInputSchema: z.ZodType<Prisma.ProductVariantUncheckedCreateWithoutColorsInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sizes: z.lazy(() => SizeUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantCreateOrConnectWithoutColorsInputSchema: z.ZodType<Prisma.ProductVariantCreateOrConnectWithoutColorsInput> = z.object({
  where: z.lazy(() => ProductVariantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutColorsInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutColorsInputSchema) ]),
}).strict();

export const ProductVariantUpsertWithoutColorsInputSchema: z.ZodType<Prisma.ProductVariantUpsertWithoutColorsInput> = z.object({
  update: z.union([ z.lazy(() => ProductVariantUpdateWithoutColorsInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutColorsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutColorsInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutColorsInputSchema) ]),
  where: z.lazy(() => ProductVariantWhereInputSchema).optional()
}).strict();

export const ProductVariantUpdateToOneWithWhereWithoutColorsInputSchema: z.ZodType<Prisma.ProductVariantUpdateToOneWithWhereWithoutColorsInput> = z.object({
  where: z.lazy(() => ProductVariantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductVariantUpdateWithoutColorsInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutColorsInputSchema) ]),
}).strict();

export const ProductVariantUpdateWithoutColorsInputSchema: z.ZodType<Prisma.ProductVariantUpdateWithoutColorsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutVariantsNestedInputSchema).optional(),
  sizes: z.lazy(() => SizeUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantUncheckedUpdateWithoutColorsInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateWithoutColorsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ShippingRateCreateWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateCreateWithoutCountryInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutShippingRatesInputSchema)
}).strict();

export const ShippingRateUncheckedCreateWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateUncheckedCreateWithoutCountryInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingRateCreateOrConnectWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateCreateOrConnectWithoutCountryInput> = z.object({
  where: z.lazy(() => ShippingRateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const ShippingRateCreateManyCountryInputEnvelopeSchema: z.ZodType<Prisma.ShippingRateCreateManyCountryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ShippingRateCreateManyCountryInputSchema),z.lazy(() => ShippingRateCreateManyCountryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FreeShippingCountryCreateWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateWithoutCountryInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutEligibaleCountriesInputSchema)
}).strict();

export const FreeShippingCountryUncheckedCreateWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedCreateWithoutCountryInput> = z.object({
  id: z.string().uuid().optional(),
  freeShippingId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FreeShippingCountryCreateOrConnectWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateOrConnectWithoutCountryInput> = z.object({
  where: z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const FreeShippingCountryCreateManyCountryInputEnvelopeSchema: z.ZodType<Prisma.FreeShippingCountryCreateManyCountryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FreeShippingCountryCreateManyCountryInputSchema),z.lazy(() => FreeShippingCountryCreateManyCountryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ShippingAddressCreateWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressCreateWithoutCountryInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutShippingAddressInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutShippingAddressesInputSchema)
}).strict();

export const ShippingAddressUncheckedCreateWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedCreateWithoutCountryInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutShippingAddressInputSchema).optional()
}).strict();

export const ShippingAddressCreateOrConnectWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressCreateOrConnectWithoutCountryInput> = z.object({
  where: z.lazy(() => ShippingAddressWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const ShippingAddressCreateManyCountryInputEnvelopeSchema: z.ZodType<Prisma.ShippingAddressCreateManyCountryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ShippingAddressCreateManyCountryInputSchema),z.lazy(() => ShippingAddressCreateManyCountryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ShippingRateUpsertWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateUpsertWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => ShippingRateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ShippingRateUpdateWithoutCountryInputSchema),z.lazy(() => ShippingRateUncheckedUpdateWithoutCountryInputSchema) ]),
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutCountryInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const ShippingRateUpdateWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateUpdateWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => ShippingRateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ShippingRateUpdateWithoutCountryInputSchema),z.lazy(() => ShippingRateUncheckedUpdateWithoutCountryInputSchema) ]),
}).strict();

export const ShippingRateUpdateManyWithWhereWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateUpdateManyWithWhereWithoutCountryInput> = z.object({
  where: z.lazy(() => ShippingRateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ShippingRateUpdateManyMutationInputSchema),z.lazy(() => ShippingRateUncheckedUpdateManyWithoutCountryInputSchema) ]),
}).strict();

export const ShippingRateScalarWhereInputSchema: z.ZodType<Prisma.ShippingRateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShippingRateScalarWhereInputSchema),z.lazy(() => ShippingRateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShippingRateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShippingRateScalarWhereInputSchema),z.lazy(() => ShippingRateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingFeePerItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeePerKg: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  shippingFeeFixed: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  deliveryTimeMin: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  deliveryTimeMax: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  returnPolicy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FreeShippingCountryUpsertWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryUpsertWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FreeShippingCountryUpdateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUncheckedUpdateWithoutCountryInputSchema) ]),
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const FreeShippingCountryUpdateWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FreeShippingCountryUpdateWithoutCountryInputSchema),z.lazy(() => FreeShippingCountryUncheckedUpdateWithoutCountryInputSchema) ]),
}).strict();

export const FreeShippingCountryUpdateManyWithWhereWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateManyWithWhereWithoutCountryInput> = z.object({
  where: z.lazy(() => FreeShippingCountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FreeShippingCountryUpdateManyMutationInputSchema),z.lazy(() => FreeShippingCountryUncheckedUpdateManyWithoutCountryInputSchema) ]),
}).strict();

export const FreeShippingCountryScalarWhereInputSchema: z.ZodType<Prisma.FreeShippingCountryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FreeShippingCountryScalarWhereInputSchema),z.lazy(() => FreeShippingCountryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FreeShippingCountryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FreeShippingCountryScalarWhereInputSchema),z.lazy(() => FreeShippingCountryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  freeShippingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ShippingAddressUpsertWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressUpsertWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => ShippingAddressWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ShippingAddressUpdateWithoutCountryInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateWithoutCountryInputSchema) ]),
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutCountryInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const ShippingAddressUpdateWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressUpdateWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => ShippingAddressWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ShippingAddressUpdateWithoutCountryInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateWithoutCountryInputSchema) ]),
}).strict();

export const ShippingAddressUpdateManyWithWhereWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressUpdateManyWithWhereWithoutCountryInput> = z.object({
  where: z.lazy(() => ShippingAddressScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ShippingAddressUpdateManyMutationInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutCountryInputSchema) ]),
}).strict();

export const ShippingAddressScalarWhereInputSchema: z.ZodType<Prisma.ShippingAddressScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShippingAddressScalarWhereInputSchema),z.lazy(() => ShippingAddressScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShippingAddressScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShippingAddressScalarWhereInputSchema),z.lazy(() => ShippingAddressScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zip_code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  default: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countryId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const StoreCreateWithoutCouponsInputSchema: z.ZodType<Prisma.StoreCreateWithoutCouponsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutStoresInputSchema),
  products: z.lazy(() => ProductCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUncheckedCreateWithoutCouponsInputSchema: z.ZodType<Prisma.StoreUncheckedCreateWithoutCouponsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userId: z.string(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreCreateOrConnectWithoutCouponsInputSchema: z.ZodType<Prisma.StoreCreateOrConnectWithoutCouponsInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StoreCreateWithoutCouponsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutCouponsInputSchema) ]),
}).strict();

export const OrderGroupCreateWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupCreateWithoutCouponInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemCreateNestedManyWithoutOrderGroupInputSchema).optional(),
  order: z.lazy(() => OrderCreateNestedOneWithoutGroupsInputSchema),
  store: z.lazy(() => StoreCreateNestedOneWithoutOrderGroupsInputSchema)
}).strict();

export const OrderGroupUncheckedCreateWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupUncheckedCreateWithoutCouponInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderId: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderGroupInputSchema).optional()
}).strict();

export const OrderGroupCreateOrConnectWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupCreateOrConnectWithoutCouponInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema) ]),
}).strict();

export const OrderGroupCreateManyCouponInputEnvelopeSchema: z.ZodType<Prisma.OrderGroupCreateManyCouponInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderGroupCreateManyCouponInputSchema),z.lazy(() => OrderGroupCreateManyCouponInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutCouponsInputSchema: z.ZodType<Prisma.UserCreateWithoutCouponsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCouponsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCouponsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCouponsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCouponsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCouponsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema) ]),
}).strict();

export const CartCreateWithoutCouponInputSchema: z.ZodType<Prisma.CartCreateWithoutCouponInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutCartInputSchema),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutCartInputSchema).optional()
}).strict();

export const CartUncheckedCreateWithoutCouponInputSchema: z.ZodType<Prisma.CartUncheckedCreateWithoutCouponInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutCartInputSchema).optional()
}).strict();

export const CartCreateOrConnectWithoutCouponInputSchema: z.ZodType<Prisma.CartCreateOrConnectWithoutCouponInput> = z.object({
  where: z.lazy(() => CartWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CartCreateWithoutCouponInputSchema),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema) ]),
}).strict();

export const CartCreateManyCouponInputEnvelopeSchema: z.ZodType<Prisma.CartCreateManyCouponInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CartCreateManyCouponInputSchema),z.lazy(() => CartCreateManyCouponInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const StoreUpsertWithoutCouponsInputSchema: z.ZodType<Prisma.StoreUpsertWithoutCouponsInput> = z.object({
  update: z.union([ z.lazy(() => StoreUpdateWithoutCouponsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutCouponsInputSchema) ]),
  create: z.union([ z.lazy(() => StoreCreateWithoutCouponsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutCouponsInputSchema) ]),
  where: z.lazy(() => StoreWhereInputSchema).optional()
}).strict();

export const StoreUpdateToOneWithWhereWithoutCouponsInputSchema: z.ZodType<Prisma.StoreUpdateToOneWithWhereWithoutCouponsInput> = z.object({
  where: z.lazy(() => StoreWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StoreUpdateWithoutCouponsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutCouponsInputSchema) ]),
}).strict();

export const StoreUpdateWithoutCouponsInputSchema: z.ZodType<Prisma.StoreUpdateWithoutCouponsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateWithoutCouponsInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateWithoutCouponsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const OrderGroupUpsertWithWhereUniqueWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupUpsertWithWhereUniqueWithoutCouponInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithoutCouponInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutCouponInputSchema) ]),
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutCouponInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutCouponInputSchema) ]),
}).strict();

export const OrderGroupUpdateWithWhereUniqueWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupUpdateWithWhereUniqueWithoutCouponInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderGroupUpdateWithoutCouponInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutCouponInputSchema) ]),
}).strict();

export const OrderGroupUpdateManyWithWhereWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupUpdateManyWithWhereWithoutCouponInput> = z.object({
  where: z.lazy(() => OrderGroupScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderGroupUpdateManyMutationInputSchema),z.lazy(() => OrderGroupUncheckedUpdateManyWithoutCouponInputSchema) ]),
}).strict();

export const OrderGroupScalarWhereInputSchema: z.ZodType<Prisma.OrderGroupScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderGroupScalarWhereInputSchema),z.lazy(() => OrderGroupScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderGroupScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderGroupScalarWhereInputSchema),z.lazy(() => OrderGroupScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  shippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingDeliveryMin: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingDeliveryMax: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  couponId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserUpsertWithWhereUniqueWithoutCouponsInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutCouponsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutCouponsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCouponsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCouponsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCouponsInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutCouponsInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutCouponsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutCouponsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCouponsInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutCouponsInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutCouponsInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutCouponsInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  picture: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CartUpsertWithWhereUniqueWithoutCouponInputSchema: z.ZodType<Prisma.CartUpsertWithWhereUniqueWithoutCouponInput> = z.object({
  where: z.lazy(() => CartWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CartUpdateWithoutCouponInputSchema),z.lazy(() => CartUncheckedUpdateWithoutCouponInputSchema) ]),
  create: z.union([ z.lazy(() => CartCreateWithoutCouponInputSchema),z.lazy(() => CartUncheckedCreateWithoutCouponInputSchema) ]),
}).strict();

export const CartUpdateWithWhereUniqueWithoutCouponInputSchema: z.ZodType<Prisma.CartUpdateWithWhereUniqueWithoutCouponInput> = z.object({
  where: z.lazy(() => CartWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CartUpdateWithoutCouponInputSchema),z.lazy(() => CartUncheckedUpdateWithoutCouponInputSchema) ]),
}).strict();

export const CartUpdateManyWithWhereWithoutCouponInputSchema: z.ZodType<Prisma.CartUpdateManyWithWhereWithoutCouponInput> = z.object({
  where: z.lazy(() => CartScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CartUpdateManyMutationInputSchema),z.lazy(() => CartUncheckedUpdateManyWithoutCouponInputSchema) ]),
}).strict();

export const CartScalarWhereInputSchema: z.ZodType<Prisma.CartScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CartScalarWhereInputSchema),z.lazy(() => CartScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CartScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CartScalarWhereInputSchema),z.lazy(() => CartScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  couponId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FreeShippingCreateWithoutEligibaleCountriesInputSchema: z.ZodType<Prisma.FreeShippingCreateWithoutEligibaleCountriesInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutFreeShippingInputSchema)
}).strict();

export const FreeShippingUncheckedCreateWithoutEligibaleCountriesInputSchema: z.ZodType<Prisma.FreeShippingUncheckedCreateWithoutEligibaleCountriesInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FreeShippingCreateOrConnectWithoutEligibaleCountriesInputSchema: z.ZodType<Prisma.FreeShippingCreateOrConnectWithoutEligibaleCountriesInput> = z.object({
  where: z.lazy(() => FreeShippingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutEligibaleCountriesInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutEligibaleCountriesInputSchema) ]),
}).strict();

export const CountryCreateWithoutFreeShippingCountriesInputSchema: z.ZodType<Prisma.CountryCreateWithoutFreeShippingCountriesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutCountryInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutFreeShippingCountriesInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutFreeShippingCountriesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutFreeShippingCountriesInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutFreeShippingCountriesInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutFreeShippingCountriesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutFreeShippingCountriesInputSchema) ]),
}).strict();

export const FreeShippingUpsertWithoutEligibaleCountriesInputSchema: z.ZodType<Prisma.FreeShippingUpsertWithoutEligibaleCountriesInput> = z.object({
  update: z.union([ z.lazy(() => FreeShippingUpdateWithoutEligibaleCountriesInputSchema),z.lazy(() => FreeShippingUncheckedUpdateWithoutEligibaleCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutEligibaleCountriesInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutEligibaleCountriesInputSchema) ]),
  where: z.lazy(() => FreeShippingWhereInputSchema).optional()
}).strict();

export const FreeShippingUpdateToOneWithWhereWithoutEligibaleCountriesInputSchema: z.ZodType<Prisma.FreeShippingUpdateToOneWithWhereWithoutEligibaleCountriesInput> = z.object({
  where: z.lazy(() => FreeShippingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FreeShippingUpdateWithoutEligibaleCountriesInputSchema),z.lazy(() => FreeShippingUncheckedUpdateWithoutEligibaleCountriesInputSchema) ]),
}).strict();

export const FreeShippingUpdateWithoutEligibaleCountriesInputSchema: z.ZodType<Prisma.FreeShippingUpdateWithoutEligibaleCountriesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutFreeShippingNestedInputSchema).optional()
}).strict();

export const FreeShippingUncheckedUpdateWithoutEligibaleCountriesInputSchema: z.ZodType<Prisma.FreeShippingUncheckedUpdateWithoutEligibaleCountriesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountryUpsertWithoutFreeShippingCountriesInputSchema: z.ZodType<Prisma.CountryUpsertWithoutFreeShippingCountriesInput> = z.object({
  update: z.union([ z.lazy(() => CountryUpdateWithoutFreeShippingCountriesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutFreeShippingCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutFreeShippingCountriesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutFreeShippingCountriesInputSchema) ]),
  where: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const CountryUpdateToOneWithWhereWithoutFreeShippingCountriesInputSchema: z.ZodType<Prisma.CountryUpdateToOneWithWhereWithoutFreeShippingCountriesInput> = z.object({
  where: z.lazy(() => CountryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CountryUpdateWithoutFreeShippingCountriesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutFreeShippingCountriesInputSchema) ]),
}).strict();

export const CountryUpdateWithoutFreeShippingCountriesInputSchema: z.ZodType<Prisma.CountryUpdateWithoutFreeShippingCountriesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutCountryNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutFreeShippingCountriesInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutFreeShippingCountriesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const ProductCreateWithoutFreeShippingInputSchema: z.ZodType<Prisma.ProductCreateWithoutFreeShippingInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutFreeShippingInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutFreeShippingInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutFreeShippingInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutFreeShippingInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutFreeShippingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutFreeShippingInputSchema) ]),
}).strict();

export const FreeShippingCountryCreateWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateWithoutFreeShippingInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  country: z.lazy(() => CountryCreateNestedOneWithoutFreeShippingCountriesInputSchema)
}).strict();

export const FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedCreateWithoutFreeShippingInput> = z.object({
  id: z.string().uuid().optional(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FreeShippingCountryCreateOrConnectWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateOrConnectWithoutFreeShippingInput> = z.object({
  where: z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema) ]),
}).strict();

export const FreeShippingCountryCreateManyFreeShippingInputEnvelopeSchema: z.ZodType<Prisma.FreeShippingCountryCreateManyFreeShippingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FreeShippingCountryCreateManyFreeShippingInputSchema),z.lazy(() => FreeShippingCountryCreateManyFreeShippingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductUpsertWithoutFreeShippingInputSchema: z.ZodType<Prisma.ProductUpsertWithoutFreeShippingInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutFreeShippingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutFreeShippingInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutFreeShippingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutFreeShippingInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutFreeShippingInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutFreeShippingInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutFreeShippingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutFreeShippingInputSchema) ]),
}).strict();

export const ProductUpdateWithoutFreeShippingInputSchema: z.ZodType<Prisma.ProductUpdateWithoutFreeShippingInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutFreeShippingInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutFreeShippingInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const FreeShippingCountryUpsertWithWhereUniqueWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryUpsertWithWhereUniqueWithoutFreeShippingInput> = z.object({
  where: z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FreeShippingCountryUpdateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUncheckedUpdateWithoutFreeShippingInputSchema) ]),
  create: z.union([ z.lazy(() => FreeShippingCountryCreateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUncheckedCreateWithoutFreeShippingInputSchema) ]),
}).strict();

export const FreeShippingCountryUpdateWithWhereUniqueWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateWithWhereUniqueWithoutFreeShippingInput> = z.object({
  where: z.lazy(() => FreeShippingCountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FreeShippingCountryUpdateWithoutFreeShippingInputSchema),z.lazy(() => FreeShippingCountryUncheckedUpdateWithoutFreeShippingInputSchema) ]),
}).strict();

export const FreeShippingCountryUpdateManyWithWhereWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateManyWithWhereWithoutFreeShippingInput> = z.object({
  where: z.lazy(() => FreeShippingCountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FreeShippingCountryUpdateManyMutationInputSchema),z.lazy(() => FreeShippingCountryUncheckedUpdateManyWithoutFreeShippingInputSchema) ]),
}).strict();

export const ProductCreateWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductCreateWithoutOfferTagInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const ProductUncheckedCreateWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutOfferTagInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutOfferTagInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutOfferTagInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema) ]),
}).strict();

export const ProductCreateManyOfferTagInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManyOfferTagInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManyOfferTagInputSchema),z.lazy(() => ProductCreateManyOfferTagInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductUpsertWithWhereUniqueWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutOfferTagInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutOfferTagInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutOfferTagInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutOfferTagInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOfferTagInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutOfferTagInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutOfferTagInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutOfferTagInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutOfferTagInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutOfferTagInputSchema) ]),
}).strict();

export const OrderItemCreateWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemCreateWithoutOrderGroupInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  price: z.number(),
  totalPrice: z.number(),
  status: z.lazy(() => ProductStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderItemUncheckedCreateWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemUncheckedCreateWithoutOrderGroupInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  price: z.number(),
  totalPrice: z.number(),
  status: z.lazy(() => ProductStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderItemCreateOrConnectWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemCreateOrConnectWithoutOrderGroupInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema) ]),
}).strict();

export const OrderItemCreateManyOrderGroupInputEnvelopeSchema: z.ZodType<Prisma.OrderItemCreateManyOrderGroupInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderItemCreateManyOrderGroupInputSchema),z.lazy(() => OrderItemCreateManyOrderGroupInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrderCreateWithoutGroupsInputSchema: z.ZodType<Prisma.OrderCreateWithoutGroupsInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  paymentDetails: z.lazy(() => PaymentDetailsCreateNestedOneWithoutOrderInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressCreateNestedOneWithoutOrdersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const OrderUncheckedCreateWithoutGroupsInputSchema: z.ZodType<Prisma.OrderUncheckedCreateWithoutGroupsInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  shippingAddressId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUncheckedCreateNestedOneWithoutOrderInputSchema).optional()
}).strict();

export const OrderCreateOrConnectWithoutGroupsInputSchema: z.ZodType<Prisma.OrderCreateOrConnectWithoutGroupsInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderCreateWithoutGroupsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutGroupsInputSchema) ]),
}).strict();

export const StoreCreateWithoutOrderGroupsInputSchema: z.ZodType<Prisma.StoreCreateWithoutOrderGroupsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutStoresInputSchema),
  products: z.lazy(() => ProductCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUncheckedCreateWithoutOrderGroupsInputSchema: z.ZodType<Prisma.StoreUncheckedCreateWithoutOrderGroupsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userId: z.string(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreCreateOrConnectWithoutOrderGroupsInputSchema: z.ZodType<Prisma.StoreCreateOrConnectWithoutOrderGroupsInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StoreCreateWithoutOrderGroupsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutOrderGroupsInputSchema) ]),
}).strict();

export const CouponCreateWithoutOrdersInputSchema: z.ZodType<Prisma.CouponCreateWithoutOrdersInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutCouponsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutCouponsInputSchema).optional(),
  carts: z.lazy(() => CartCreateNestedManyWithoutCouponInputSchema).optional()
}).strict();

export const CouponUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.CouponUncheckedCreateWithoutOrdersInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutCouponsInputSchema).optional(),
  carts: z.lazy(() => CartUncheckedCreateNestedManyWithoutCouponInputSchema).optional()
}).strict();

export const CouponCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.CouponCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => CouponWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CouponCreateWithoutOrdersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const OrderItemUpsertWithWhereUniqueWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemUpsertWithWhereUniqueWithoutOrderGroupInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderItemUpdateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUncheckedUpdateWithoutOrderGroupInputSchema) ]),
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderGroupInputSchema) ]),
}).strict();

export const OrderItemUpdateWithWhereUniqueWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemUpdateWithWhereUniqueWithoutOrderGroupInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderItemUpdateWithoutOrderGroupInputSchema),z.lazy(() => OrderItemUncheckedUpdateWithoutOrderGroupInputSchema) ]),
}).strict();

export const OrderItemUpdateManyWithWhereWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemUpdateManyWithWhereWithoutOrderGroupInput> = z.object({
  where: z.lazy(() => OrderItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderItemUpdateManyMutationInputSchema),z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderGroupInputSchema) ]),
}).strict();

export const OrderItemScalarWhereInputSchema: z.ZodType<Prisma.OrderItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantSlug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shippingFee: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderGroupId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumProductStatusFilterSchema),z.lazy(() => ProductStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrderUpsertWithoutGroupsInputSchema: z.ZodType<Prisma.OrderUpsertWithoutGroupsInput> = z.object({
  update: z.union([ z.lazy(() => OrderUpdateWithoutGroupsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutGroupsInputSchema) ]),
  create: z.union([ z.lazy(() => OrderCreateWithoutGroupsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutGroupsInputSchema) ]),
  where: z.lazy(() => OrderWhereInputSchema).optional()
}).strict();

export const OrderUpdateToOneWithWhereWithoutGroupsInputSchema: z.ZodType<Prisma.OrderUpdateToOneWithWhereWithoutGroupsInput> = z.object({
  where: z.lazy(() => OrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrderUpdateWithoutGroupsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutGroupsInputSchema) ]),
}).strict();

export const OrderUpdateWithoutGroupsInputSchema: z.ZodType<Prisma.OrderUpdateWithoutGroupsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUpdateOneWithoutOrderNestedInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateWithoutGroupsInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateWithoutGroupsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUncheckedUpdateOneWithoutOrderNestedInputSchema).optional()
}).strict();

export const StoreUpsertWithoutOrderGroupsInputSchema: z.ZodType<Prisma.StoreUpsertWithoutOrderGroupsInput> = z.object({
  update: z.union([ z.lazy(() => StoreUpdateWithoutOrderGroupsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutOrderGroupsInputSchema) ]),
  create: z.union([ z.lazy(() => StoreCreateWithoutOrderGroupsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutOrderGroupsInputSchema) ]),
  where: z.lazy(() => StoreWhereInputSchema).optional()
}).strict();

export const StoreUpdateToOneWithWhereWithoutOrderGroupsInputSchema: z.ZodType<Prisma.StoreUpdateToOneWithWhereWithoutOrderGroupsInput> = z.object({
  where: z.lazy(() => StoreWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StoreUpdateWithoutOrderGroupsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutOrderGroupsInputSchema) ]),
}).strict();

export const StoreUpdateWithoutOrderGroupsInputSchema: z.ZodType<Prisma.StoreUpdateWithoutOrderGroupsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateWithoutOrderGroupsInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateWithoutOrderGroupsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const CouponUpsertWithoutOrdersInputSchema: z.ZodType<Prisma.CouponUpsertWithoutOrdersInput> = z.object({
  update: z.union([ z.lazy(() => CouponUpdateWithoutOrdersInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => CouponCreateWithoutOrdersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutOrdersInputSchema) ]),
  where: z.lazy(() => CouponWhereInputSchema).optional()
}).strict();

export const CouponUpdateToOneWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.CouponUpdateToOneWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => CouponWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CouponUpdateWithoutOrdersInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const CouponUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.CouponUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutCouponsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutCouponsNestedInputSchema).optional(),
  carts: z.lazy(() => CartUpdateManyWithoutCouponNestedInputSchema).optional()
}).strict();

export const CouponUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutCouponsNestedInputSchema).optional(),
  carts: z.lazy(() => CartUncheckedUpdateManyWithoutCouponNestedInputSchema).optional()
}).strict();

export const OrderGroupCreateWithoutItemsInputSchema: z.ZodType<Prisma.OrderGroupCreateWithoutItemsInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  order: z.lazy(() => OrderCreateNestedOneWithoutGroupsInputSchema),
  store: z.lazy(() => StoreCreateNestedOneWithoutOrderGroupsInputSchema),
  coupon: z.lazy(() => CouponCreateNestedOneWithoutOrdersInputSchema).optional()
}).strict();

export const OrderGroupUncheckedCreateWithoutItemsInputSchema: z.ZodType<Prisma.OrderGroupUncheckedCreateWithoutItemsInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderId: z.string(),
  storeId: z.string(),
  couponId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderGroupCreateOrConnectWithoutItemsInputSchema: z.ZodType<Prisma.OrderGroupCreateOrConnectWithoutItemsInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutItemsInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutItemsInputSchema) ]),
}).strict();

export const OrderGroupUpsertWithoutItemsInputSchema: z.ZodType<Prisma.OrderGroupUpsertWithoutItemsInput> = z.object({
  update: z.union([ z.lazy(() => OrderGroupUpdateWithoutItemsInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutItemsInputSchema) ]),
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutItemsInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutItemsInputSchema) ]),
  where: z.lazy(() => OrderGroupWhereInputSchema).optional()
}).strict();

export const OrderGroupUpdateToOneWithWhereWithoutItemsInputSchema: z.ZodType<Prisma.OrderGroupUpdateToOneWithWhereWithoutItemsInput> = z.object({
  where: z.lazy(() => OrderGroupWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrderGroupUpdateWithoutItemsInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutItemsInputSchema) ]),
}).strict();

export const OrderGroupUpdateWithoutItemsInputSchema: z.ZodType<Prisma.OrderGroupUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.lazy(() => OrderUpdateOneRequiredWithoutGroupsNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutOrderGroupsNestedInputSchema).optional(),
  coupon: z.lazy(() => CouponUpdateOneWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderGroupUncheckedUpdateWithoutItemsInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderGroupCreateWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupCreateWithoutOrderInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemCreateNestedManyWithoutOrderGroupInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutOrderGroupsInputSchema),
  coupon: z.lazy(() => CouponCreateNestedOneWithoutOrdersInputSchema).optional()
}).strict();

export const OrderGroupUncheckedCreateWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupUncheckedCreateWithoutOrderInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  storeId: z.string(),
  couponId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderGroupInputSchema).optional()
}).strict();

export const OrderGroupCreateOrConnectWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupCreateOrConnectWithoutOrderInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema) ]),
}).strict();

export const OrderGroupCreateManyOrderInputEnvelopeSchema: z.ZodType<Prisma.OrderGroupCreateManyOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderGroupCreateManyOrderInputSchema),z.lazy(() => OrderGroupCreateManyOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PaymentDetailsCreateWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsCreateWithoutOrderInput> = z.object({
  id: z.string().uuid().optional(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPaymentsInputSchema)
}).strict();

export const PaymentDetailsUncheckedCreateWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedCreateWithoutOrderInput> = z.object({
  id: z.string().uuid().optional(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentDetailsCreateOrConnectWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsCreateOrConnectWithoutOrderInput> = z.object({
  where: z.lazy(() => PaymentDetailsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutOrderInputSchema) ]),
}).strict();

export const ShippingAddressCreateWithoutOrdersInputSchema: z.ZodType<Prisma.ShippingAddressCreateWithoutOrdersInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutShippingAddressesInputSchema),
  country: z.lazy(() => CountryCreateNestedOneWithoutShippingAddressesInputSchema)
}).strict();

export const ShippingAddressUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedCreateWithoutOrdersInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  userId: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingAddressCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.ShippingAddressCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => ShippingAddressWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutOrdersInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const UserCreateWithoutOrdersInputSchema: z.ZodType<Prisma.UserCreateWithoutOrdersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOrdersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOrdersInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const OrderGroupUpsertWithWhereUniqueWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupUpsertWithWhereUniqueWithoutOrderInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithoutOrderInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutOrderInputSchema) ]),
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutOrderInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutOrderInputSchema) ]),
}).strict();

export const OrderGroupUpdateWithWhereUniqueWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupUpdateWithWhereUniqueWithoutOrderInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderGroupUpdateWithoutOrderInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutOrderInputSchema) ]),
}).strict();

export const OrderGroupUpdateManyWithWhereWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupUpdateManyWithWhereWithoutOrderInput> = z.object({
  where: z.lazy(() => OrderGroupScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderGroupUpdateManyMutationInputSchema),z.lazy(() => OrderGroupUncheckedUpdateManyWithoutOrderInputSchema) ]),
}).strict();

export const PaymentDetailsUpsertWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsUpsertWithoutOrderInput> = z.object({
  update: z.union([ z.lazy(() => PaymentDetailsUpdateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedUpdateWithoutOrderInputSchema) ]),
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutOrderInputSchema) ]),
  where: z.lazy(() => PaymentDetailsWhereInputSchema).optional()
}).strict();

export const PaymentDetailsUpdateToOneWithWhereWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateToOneWithWhereWithoutOrderInput> = z.object({
  where: z.lazy(() => PaymentDetailsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PaymentDetailsUpdateWithoutOrderInputSchema),z.lazy(() => PaymentDetailsUncheckedUpdateWithoutOrderInputSchema) ]),
}).strict();

export const PaymentDetailsUpdateWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateWithoutOrderInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPaymentsNestedInputSchema).optional()
}).strict();

export const PaymentDetailsUncheckedUpdateWithoutOrderInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedUpdateWithoutOrderInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingAddressUpsertWithoutOrdersInputSchema: z.ZodType<Prisma.ShippingAddressUpsertWithoutOrdersInput> = z.object({
  update: z.union([ z.lazy(() => ShippingAddressUpdateWithoutOrdersInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutOrdersInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutOrdersInputSchema) ]),
  where: z.lazy(() => ShippingAddressWhereInputSchema).optional()
}).strict();

export const ShippingAddressUpdateToOneWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.ShippingAddressUpdateToOneWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => ShippingAddressWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ShippingAddressUpdateWithoutOrdersInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const ShippingAddressUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.ShippingAddressUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutShippingAddressesNestedInputSchema).optional(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutShippingAddressesNestedInputSchema).optional()
}).strict();

export const ShippingAddressUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUpsertWithoutOrdersInputSchema: z.ZodType<Prisma.UserUpsertWithoutOrdersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutOrdersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOrdersInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrdersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutOrdersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const UserUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.UserUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const OrderCreateWithoutPaymentDetailsInputSchema: z.ZodType<Prisma.OrderCreateWithoutPaymentDetailsInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  groups: z.lazy(() => OrderGroupCreateNestedManyWithoutOrderInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressCreateNestedOneWithoutOrdersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const OrderUncheckedCreateWithoutPaymentDetailsInputSchema: z.ZodType<Prisma.OrderUncheckedCreateWithoutPaymentDetailsInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  shippingAddressId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  groups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();

export const OrderCreateOrConnectWithoutPaymentDetailsInputSchema: z.ZodType<Prisma.OrderCreateOrConnectWithoutPaymentDetailsInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderCreateWithoutPaymentDetailsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutPaymentDetailsInputSchema) ]),
}).strict();

export const UserCreateWithoutPaymentsInputSchema: z.ZodType<Prisma.UserCreateWithoutPaymentsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPaymentsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPaymentsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPaymentsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPaymentsInputSchema) ]),
}).strict();

export const OrderUpsertWithoutPaymentDetailsInputSchema: z.ZodType<Prisma.OrderUpsertWithoutPaymentDetailsInput> = z.object({
  update: z.union([ z.lazy(() => OrderUpdateWithoutPaymentDetailsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutPaymentDetailsInputSchema) ]),
  create: z.union([ z.lazy(() => OrderCreateWithoutPaymentDetailsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutPaymentDetailsInputSchema) ]),
  where: z.lazy(() => OrderWhereInputSchema).optional()
}).strict();

export const OrderUpdateToOneWithWhereWithoutPaymentDetailsInputSchema: z.ZodType<Prisma.OrderUpdateToOneWithWhereWithoutPaymentDetailsInput> = z.object({
  where: z.lazy(() => OrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrderUpdateWithoutPaymentDetailsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutPaymentDetailsInputSchema) ]),
}).strict();

export const OrderUpdateWithoutPaymentDetailsInputSchema: z.ZodType<Prisma.OrderUpdateWithoutPaymentDetailsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  groups: z.lazy(() => OrderGroupUpdateManyWithoutOrderNestedInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateWithoutPaymentDetailsInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateWithoutPaymentDetailsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  groups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUpsertWithoutPaymentsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPaymentsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPaymentsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPaymentsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPaymentsInputSchema) ]),
}).strict();

export const UserUpdateWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUpdateWithoutPaymentsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPaymentsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ProductCreateWithoutVariantsInputSchema: z.ZodType<Prisma.ProductCreateWithoutVariantsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutVariantsInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutVariantsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutVariantsInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutVariantsInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutVariantsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutVariantsInputSchema) ]),
}).strict();

export const SizeCreateWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeCreateWithoutProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutSizeInputSchema).optional()
}).strict();

export const SizeUncheckedCreateWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeUncheckedCreateWithoutProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutSizeInputSchema).optional()
}).strict();

export const SizeCreateOrConnectWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeCreateOrConnectWithoutProductVariantInput> = z.object({
  where: z.lazy(() => SizeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SizeCreateWithoutProductVariantInputSchema),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema) ]),
}).strict();

export const SizeCreateManyProductVariantInputEnvelopeSchema: z.ZodType<Prisma.SizeCreateManyProductVariantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SizeCreateManyProductVariantInputSchema),z.lazy(() => SizeCreateManyProductVariantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductVariantImageCreateWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageCreateWithoutProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  order: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageUncheckedCreateWithoutProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  order: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductVariantImageCreateOrConnectWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageCreateOrConnectWithoutProductVariantInput> = z.object({
  where: z.lazy(() => ProductVariantImageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema) ]),
}).strict();

export const ProductVariantImageCreateManyProductVariantInputEnvelopeSchema: z.ZodType<Prisma.ProductVariantImageCreateManyProductVariantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductVariantImageCreateManyProductVariantInputSchema),z.lazy(() => ProductVariantImageCreateManyProductVariantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ColorCreateWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorCreateWithoutProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ColorUncheckedCreateWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorUncheckedCreateWithoutProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ColorCreateOrConnectWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorCreateOrConnectWithoutProductVariantInput> = z.object({
  where: z.lazy(() => ColorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ColorCreateWithoutProductVariantInputSchema),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema) ]),
}).strict();

export const ColorCreateManyProductVariantInputEnvelopeSchema: z.ZodType<Prisma.ColorCreateManyProductVariantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ColorCreateManyProductVariantInputSchema),z.lazy(() => ColorCreateManyProductVariantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SpecCreateWithoutVariantInputSchema: z.ZodType<Prisma.SpecCreateWithoutVariantInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutSpecsInputSchema).optional()
}).strict();

export const SpecUncheckedCreateWithoutVariantInputSchema: z.ZodType<Prisma.SpecUncheckedCreateWithoutVariantInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  productId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecCreateOrConnectWithoutVariantInputSchema: z.ZodType<Prisma.SpecCreateOrConnectWithoutVariantInput> = z.object({
  where: z.lazy(() => SpecWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpecCreateWithoutVariantInputSchema),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema) ]),
}).strict();

export const SpecCreateManyVariantInputEnvelopeSchema: z.ZodType<Prisma.SpecCreateManyVariantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SpecCreateManyVariantInputSchema),z.lazy(() => SpecCreateManyVariantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WishlistCreateWithoutVariantInputSchema: z.ZodType<Prisma.WishlistCreateWithoutVariantInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutWishlistInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutWishlistInputSchema),
  size: z.lazy(() => SizeCreateNestedOneWithoutWishlistInputSchema).optional()
}).strict();

export const WishlistUncheckedCreateWithoutVariantInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateWithoutVariantInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  productId: z.string(),
  sizeId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistCreateOrConnectWithoutVariantInputSchema: z.ZodType<Prisma.WishlistCreateOrConnectWithoutVariantInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WishlistCreateWithoutVariantInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema) ]),
}).strict();

export const WishlistCreateManyVariantInputEnvelopeSchema: z.ZodType<Prisma.WishlistCreateManyVariantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WishlistCreateManyVariantInputSchema),z.lazy(() => WishlistCreateManyVariantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductUpsertWithoutVariantsInputSchema: z.ZodType<Prisma.ProductUpsertWithoutVariantsInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutVariantsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutVariantsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutVariantsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutVariantsInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutVariantsInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutVariantsInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutVariantsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutVariantsInputSchema) ]),
}).strict();

export const ProductUpdateWithoutVariantsInputSchema: z.ZodType<Prisma.ProductUpdateWithoutVariantsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutVariantsInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutVariantsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const SizeUpsertWithWhereUniqueWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeUpsertWithWhereUniqueWithoutProductVariantInput> = z.object({
  where: z.lazy(() => SizeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SizeUpdateWithoutProductVariantInputSchema),z.lazy(() => SizeUncheckedUpdateWithoutProductVariantInputSchema) ]),
  create: z.union([ z.lazy(() => SizeCreateWithoutProductVariantInputSchema),z.lazy(() => SizeUncheckedCreateWithoutProductVariantInputSchema) ]),
}).strict();

export const SizeUpdateWithWhereUniqueWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeUpdateWithWhereUniqueWithoutProductVariantInput> = z.object({
  where: z.lazy(() => SizeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SizeUpdateWithoutProductVariantInputSchema),z.lazy(() => SizeUncheckedUpdateWithoutProductVariantInputSchema) ]),
}).strict();

export const SizeUpdateManyWithWhereWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeUpdateManyWithWhereWithoutProductVariantInput> = z.object({
  where: z.lazy(() => SizeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SizeUpdateManyMutationInputSchema),z.lazy(() => SizeUncheckedUpdateManyWithoutProductVariantInputSchema) ]),
}).strict();

export const SizeScalarWhereInputSchema: z.ZodType<Prisma.SizeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SizeScalarWhereInputSchema),z.lazy(() => SizeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SizeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SizeScalarWhereInputSchema),z.lazy(() => SizeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  discount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductVariantImageUpsertWithWhereUniqueWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageUpsertWithWhereUniqueWithoutProductVariantInput> = z.object({
  where: z.lazy(() => ProductVariantImageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductVariantImageUpdateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUncheckedUpdateWithoutProductVariantInputSchema) ]),
  create: z.union([ z.lazy(() => ProductVariantImageCreateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUncheckedCreateWithoutProductVariantInputSchema) ]),
}).strict();

export const ProductVariantImageUpdateWithWhereUniqueWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageUpdateWithWhereUniqueWithoutProductVariantInput> = z.object({
  where: z.lazy(() => ProductVariantImageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductVariantImageUpdateWithoutProductVariantInputSchema),z.lazy(() => ProductVariantImageUncheckedUpdateWithoutProductVariantInputSchema) ]),
}).strict();

export const ProductVariantImageUpdateManyWithWhereWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageUpdateManyWithWhereWithoutProductVariantInput> = z.object({
  where: z.lazy(() => ProductVariantImageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductVariantImageUpdateManyMutationInputSchema),z.lazy(() => ProductVariantImageUncheckedUpdateManyWithoutProductVariantInputSchema) ]),
}).strict();

export const ProductVariantImageScalarWhereInputSchema: z.ZodType<Prisma.ProductVariantImageScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductVariantImageScalarWhereInputSchema),z.lazy(() => ProductVariantImageScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductVariantImageScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductVariantImageScalarWhereInputSchema),z.lazy(() => ProductVariantImageScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alt: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ColorUpsertWithWhereUniqueWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorUpsertWithWhereUniqueWithoutProductVariantInput> = z.object({
  where: z.lazy(() => ColorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ColorUpdateWithoutProductVariantInputSchema),z.lazy(() => ColorUncheckedUpdateWithoutProductVariantInputSchema) ]),
  create: z.union([ z.lazy(() => ColorCreateWithoutProductVariantInputSchema),z.lazy(() => ColorUncheckedCreateWithoutProductVariantInputSchema) ]),
}).strict();

export const ColorUpdateWithWhereUniqueWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorUpdateWithWhereUniqueWithoutProductVariantInput> = z.object({
  where: z.lazy(() => ColorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ColorUpdateWithoutProductVariantInputSchema),z.lazy(() => ColorUncheckedUpdateWithoutProductVariantInputSchema) ]),
}).strict();

export const ColorUpdateManyWithWhereWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorUpdateManyWithWhereWithoutProductVariantInput> = z.object({
  where: z.lazy(() => ColorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ColorUpdateManyMutationInputSchema),z.lazy(() => ColorUncheckedUpdateManyWithoutProductVariantInputSchema) ]),
}).strict();

export const ColorScalarWhereInputSchema: z.ZodType<Prisma.ColorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ColorScalarWhereInputSchema),z.lazy(() => ColorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ColorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ColorScalarWhereInputSchema),z.lazy(() => ColorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productVariantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SpecUpsertWithWhereUniqueWithoutVariantInputSchema: z.ZodType<Prisma.SpecUpsertWithWhereUniqueWithoutVariantInput> = z.object({
  where: z.lazy(() => SpecWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpecUpdateWithoutVariantInputSchema),z.lazy(() => SpecUncheckedUpdateWithoutVariantInputSchema) ]),
  create: z.union([ z.lazy(() => SpecCreateWithoutVariantInputSchema),z.lazy(() => SpecUncheckedCreateWithoutVariantInputSchema) ]),
}).strict();

export const SpecUpdateWithWhereUniqueWithoutVariantInputSchema: z.ZodType<Prisma.SpecUpdateWithWhereUniqueWithoutVariantInput> = z.object({
  where: z.lazy(() => SpecWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpecUpdateWithoutVariantInputSchema),z.lazy(() => SpecUncheckedUpdateWithoutVariantInputSchema) ]),
}).strict();

export const SpecUpdateManyWithWhereWithoutVariantInputSchema: z.ZodType<Prisma.SpecUpdateManyWithWhereWithoutVariantInput> = z.object({
  where: z.lazy(() => SpecScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpecUpdateManyMutationInputSchema),z.lazy(() => SpecUncheckedUpdateManyWithoutVariantInputSchema) ]),
}).strict();

export const SpecScalarWhereInputSchema: z.ZodType<Prisma.SpecScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpecScalarWhereInputSchema),z.lazy(() => SpecScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecScalarWhereInputSchema),z.lazy(() => SpecScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  variantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WishlistUpsertWithWhereUniqueWithoutVariantInputSchema: z.ZodType<Prisma.WishlistUpsertWithWhereUniqueWithoutVariantInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WishlistUpdateWithoutVariantInputSchema),z.lazy(() => WishlistUncheckedUpdateWithoutVariantInputSchema) ]),
  create: z.union([ z.lazy(() => WishlistCreateWithoutVariantInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutVariantInputSchema) ]),
}).strict();

export const WishlistUpdateWithWhereUniqueWithoutVariantInputSchema: z.ZodType<Prisma.WishlistUpdateWithWhereUniqueWithoutVariantInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WishlistUpdateWithoutVariantInputSchema),z.lazy(() => WishlistUncheckedUpdateWithoutVariantInputSchema) ]),
}).strict();

export const WishlistUpdateManyWithWhereWithoutVariantInputSchema: z.ZodType<Prisma.WishlistUpdateManyWithWhereWithoutVariantInput> = z.object({
  where: z.lazy(() => WishlistScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WishlistUpdateManyMutationInputSchema),z.lazy(() => WishlistUncheckedUpdateManyWithoutVariantInputSchema) ]),
}).strict();

export const WishlistScalarWhereInputSchema: z.ZodType<Prisma.WishlistScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WishlistScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WishlistScalarWhereInputSchema),z.lazy(() => WishlistScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sizeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FreeShippingCreateWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryCreateNestedManyWithoutFreeShippingInputSchema).optional()
}).strict();

export const FreeShippingUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryUncheckedCreateNestedManyWithoutFreeShippingInputSchema).optional()
}).strict();

export const FreeShippingCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => FreeShippingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const StoreCreateWithoutProductsInputSchema: z.ZodType<Prisma.StoreCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutStoresInputSchema),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.StoreUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userId: z.string(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.StoreCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StoreCreateWithoutProductsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const ProductVariantCreateWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sizes: z.lazy(() => SizeCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sizes: z.lazy(() => SizeUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => ProductVariantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutProductInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const ProductVariantCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.ProductVariantCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductVariantCreateManyProductInputSchema),z.lazy(() => ProductVariantCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SpecCreateWithoutProductInputSchema: z.ZodType<Prisma.SpecCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  variant: z.lazy(() => ProductVariantCreateNestedOneWithoutSpecsInputSchema).optional()
}).strict();

export const SpecUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.SpecUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  variantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.SpecCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => SpecWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpecCreateWithoutProductInputSchema),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const SpecCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.SpecCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SpecCreateManyProductInputSchema),z.lazy(() => SpecCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const QuestionCreateWithoutProductInputSchema: z.ZodType<Prisma.QuestionCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  question: z.string(),
  answer: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuestionUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  question: z.string(),
  answer: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuestionCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.QuestionCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionCreateWithoutProductInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const QuestionCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.QuestionCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionCreateManyProductInputSchema),z.lazy(() => QuestionCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ReviewCreateWithoutProductInputSchema: z.ZodType<Prisma.ReviewCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  images: z.lazy(() => ReviewImageCreateNestedManyWithoutReviewInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutReviewsInputSchema)
}).strict();

export const ReviewUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.ReviewUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  images: z.lazy(() => ReviewImageUncheckedCreateNestedManyWithoutReviewInputSchema).optional()
}).strict();

export const ReviewCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.ReviewCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => ReviewWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReviewCreateWithoutProductInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const ReviewCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.ReviewCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReviewCreateManyProductInputSchema),z.lazy(() => ReviewCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WishlistCreateWithoutProductInputSchema: z.ZodType<Prisma.WishlistCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutWishlistInputSchema),
  variant: z.lazy(() => ProductVariantCreateNestedOneWithoutWishlistInputSchema),
  size: z.lazy(() => SizeCreateNestedOneWithoutWishlistInputSchema).optional()
}).strict();

export const WishlistUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  variantId: z.string(),
  sizeId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.WishlistCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WishlistCreateWithoutProductInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const WishlistCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.WishlistCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WishlistCreateManyProductInputSchema),z.lazy(() => WishlistCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CategoryCreateWithoutProductsInputSchema: z.ZodType<Prisma.CategoryCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subCategories: z.lazy(() => SubCategoryCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subCategories: z.lazy(() => SubCategoryUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.CategoryCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CategoryCreateWithoutProductsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const SubCategoryCreateWithoutProductsInputSchema: z.ZodType<Prisma.SubCategoryCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutSubCategoriesInputSchema)
}).strict();

export const SubCategoryUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.SubCategoryUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  categoryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SubCategoryCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.SubCategoryCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => SubCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutProductsInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const OfferTagCreateWithoutProductsInputSchema: z.ZodType<Prisma.OfferTagCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  url: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OfferTagUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.OfferTagUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  url: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OfferTagCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.OfferTagCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => OfferTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OfferTagCreateWithoutProductsInputSchema),z.lazy(() => OfferTagUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const FreeShippingUpsertWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingUpsertWithoutProductInput> = z.object({
  update: z.union([ z.lazy(() => FreeShippingUpdateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => FreeShippingCreateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedCreateWithoutProductInputSchema) ]),
  where: z.lazy(() => FreeShippingWhereInputSchema).optional()
}).strict();

export const FreeShippingUpdateToOneWithWhereWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingUpdateToOneWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => FreeShippingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FreeShippingUpdateWithoutProductInputSchema),z.lazy(() => FreeShippingUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const FreeShippingUpdateWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryUpdateManyWithoutFreeShippingNestedInputSchema).optional()
}).strict();

export const FreeShippingUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.FreeShippingUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eligibaleCountries: z.lazy(() => FreeShippingCountryUncheckedUpdateManyWithoutFreeShippingNestedInputSchema).optional()
}).strict();

export const StoreUpsertWithoutProductsInputSchema: z.ZodType<Prisma.StoreUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => StoreUpdateWithoutProductsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => StoreCreateWithoutProductsInputSchema),z.lazy(() => StoreUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => StoreWhereInputSchema).optional()
}).strict();

export const StoreUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.StoreUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => StoreWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StoreUpdateWithoutProductsInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const StoreUpdateWithoutProductsInputSchema: z.ZodType<Prisma.StoreUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutStoresNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const ProductVariantUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => ProductVariantWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductVariantUpdateWithoutProductInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutProductInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const ProductVariantUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => ProductVariantWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductVariantUpdateWithoutProductInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const ProductVariantUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => ProductVariantScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductVariantUpdateManyMutationInputSchema),z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const ProductVariantScalarWhereInputSchema: z.ZodType<Prisma.ProductVariantScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductVariantScalarWhereInputSchema),z.lazy(() => ProductVariantScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductVariantScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductVariantScalarWhereInputSchema),z.lazy(() => ProductVariantScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  variantImage: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isSale: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  saleEndDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sku: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  keywords: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sales: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SpecUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.SpecUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => SpecWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpecUpdateWithoutProductInputSchema),z.lazy(() => SpecUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => SpecCreateWithoutProductInputSchema),z.lazy(() => SpecUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const SpecUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.SpecUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => SpecWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpecUpdateWithoutProductInputSchema),z.lazy(() => SpecUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const SpecUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.SpecUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => SpecScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpecUpdateManyMutationInputSchema),z.lazy(() => SpecUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const QuestionUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.QuestionUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionUpdateWithoutProductInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionCreateWithoutProductInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const QuestionUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.QuestionUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateWithoutProductInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const QuestionUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => QuestionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateManyMutationInputSchema),z.lazy(() => QuestionUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const QuestionScalarWhereInputSchema: z.ZodType<Prisma.QuestionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  question: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  answer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ReviewUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.ReviewUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => ReviewWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReviewUpdateWithoutProductInputSchema),z.lazy(() => ReviewUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => ReviewCreateWithoutProductInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const ReviewUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.ReviewUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => ReviewWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReviewUpdateWithoutProductInputSchema),z.lazy(() => ReviewUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const ReviewUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.ReviewUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => ReviewScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReviewUpdateManyMutationInputSchema),z.lazy(() => ReviewUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const ReviewScalarWhereInputSchema: z.ZodType<Prisma.ReviewScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReviewScalarWhereInputSchema),z.lazy(() => ReviewScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReviewScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReviewScalarWhereInputSchema),z.lazy(() => ReviewScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variant: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  review: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  likes: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WishlistUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.WishlistUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WishlistUpdateWithoutProductInputSchema),z.lazy(() => WishlistUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => WishlistCreateWithoutProductInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const WishlistUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.WishlistUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WishlistUpdateWithoutProductInputSchema),z.lazy(() => WishlistUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const WishlistUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.WishlistUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => WishlistScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WishlistUpdateManyMutationInputSchema),z.lazy(() => WishlistUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const CategoryUpsertWithoutProductsInputSchema: z.ZodType<Prisma.CategoryUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => CategoryUpdateWithoutProductsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => CategoryCreateWithoutProductsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const CategoryUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.CategoryUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => CategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CategoryUpdateWithoutProductsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const CategoryUpdateWithoutProductsInputSchema: z.ZodType<Prisma.CategoryUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subCategories: z.lazy(() => SubCategoryUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subCategories: z.lazy(() => SubCategoryUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const SubCategoryUpsertWithoutProductsInputSchema: z.ZodType<Prisma.SubCategoryUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => SubCategoryUpdateWithoutProductsInputSchema),z.lazy(() => SubCategoryUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => SubCategoryCreateWithoutProductsInputSchema),z.lazy(() => SubCategoryUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => SubCategoryWhereInputSchema).optional()
}).strict();

export const SubCategoryUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.SubCategoryUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => SubCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SubCategoryUpdateWithoutProductsInputSchema),z.lazy(() => SubCategoryUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const SubCategoryUpdateWithoutProductsInputSchema: z.ZodType<Prisma.SubCategoryUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutSubCategoriesNestedInputSchema).optional()
}).strict();

export const SubCategoryUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.SubCategoryUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OfferTagUpsertWithoutProductsInputSchema: z.ZodType<Prisma.OfferTagUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => OfferTagUpdateWithoutProductsInputSchema),z.lazy(() => OfferTagUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => OfferTagCreateWithoutProductsInputSchema),z.lazy(() => OfferTagUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => OfferTagWhereInputSchema).optional()
}).strict();

export const OfferTagUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.OfferTagUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => OfferTagWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OfferTagUpdateWithoutProductsInputSchema),z.lazy(() => OfferTagUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const OfferTagUpdateWithoutProductsInputSchema: z.ZodType<Prisma.OfferTagUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OfferTagUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.OfferTagUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantCreateWithoutImagesInputSchema: z.ZodType<Prisma.ProductVariantCreateWithoutImagesInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutVariantsInputSchema),
  sizes: z.lazy(() => SizeCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantUncheckedCreateWithoutImagesInputSchema: z.ZodType<Prisma.ProductVariantUncheckedCreateWithoutImagesInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sizes: z.lazy(() => SizeUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantCreateOrConnectWithoutImagesInputSchema: z.ZodType<Prisma.ProductVariantCreateOrConnectWithoutImagesInput> = z.object({
  where: z.lazy(() => ProductVariantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutImagesInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutImagesInputSchema) ]),
}).strict();

export const ProductVariantUpsertWithoutImagesInputSchema: z.ZodType<Prisma.ProductVariantUpsertWithoutImagesInput> = z.object({
  update: z.union([ z.lazy(() => ProductVariantUpdateWithoutImagesInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutImagesInputSchema) ]),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutImagesInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutImagesInputSchema) ]),
  where: z.lazy(() => ProductVariantWhereInputSchema).optional()
}).strict();

export const ProductVariantUpdateToOneWithWhereWithoutImagesInputSchema: z.ZodType<Prisma.ProductVariantUpdateToOneWithWhereWithoutImagesInput> = z.object({
  where: z.lazy(() => ProductVariantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductVariantUpdateWithoutImagesInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutImagesInputSchema) ]),
}).strict();

export const ProductVariantUpdateWithoutImagesInputSchema: z.ZodType<Prisma.ProductVariantUpdateWithoutImagesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutVariantsNestedInputSchema).optional(),
  sizes: z.lazy(() => SizeUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantUncheckedUpdateWithoutImagesInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateWithoutImagesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.ProductCreateWithoutQuestionsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutQuestionsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutQuestionsInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutQuestionsInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutQuestionsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutQuestionsInputSchema) ]),
}).strict();

export const ProductUpsertWithoutQuestionsInputSchema: z.ZodType<Prisma.ProductUpsertWithoutQuestionsInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutQuestionsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutQuestionsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutQuestionsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutQuestionsInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutQuestionsInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutQuestionsInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutQuestionsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutQuestionsInputSchema) ]),
}).strict();

export const ProductUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.ProductUpdateWithoutQuestionsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutQuestionsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ReviewCreateWithoutImagesInputSchema: z.ZodType<Prisma.ReviewCreateWithoutImagesInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutReviewsInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutReviewsInputSchema)
}).strict();

export const ReviewUncheckedCreateWithoutImagesInputSchema: z.ZodType<Prisma.ReviewUncheckedCreateWithoutImagesInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  userId: z.string(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewCreateOrConnectWithoutImagesInputSchema: z.ZodType<Prisma.ReviewCreateOrConnectWithoutImagesInput> = z.object({
  where: z.lazy(() => ReviewWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReviewCreateWithoutImagesInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutImagesInputSchema) ]),
}).strict();

export const ReviewUpsertWithoutImagesInputSchema: z.ZodType<Prisma.ReviewUpsertWithoutImagesInput> = z.object({
  update: z.union([ z.lazy(() => ReviewUpdateWithoutImagesInputSchema),z.lazy(() => ReviewUncheckedUpdateWithoutImagesInputSchema) ]),
  create: z.union([ z.lazy(() => ReviewCreateWithoutImagesInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutImagesInputSchema) ]),
  where: z.lazy(() => ReviewWhereInputSchema).optional()
}).strict();

export const ReviewUpdateToOneWithWhereWithoutImagesInputSchema: z.ZodType<Prisma.ReviewUpdateToOneWithWhereWithoutImagesInput> = z.object({
  where: z.lazy(() => ReviewWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ReviewUpdateWithoutImagesInputSchema),z.lazy(() => ReviewUncheckedUpdateWithoutImagesInputSchema) ]),
}).strict();

export const ReviewUpdateWithoutImagesInputSchema: z.ZodType<Prisma.ReviewUpdateWithoutImagesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutReviewsNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutReviewsNestedInputSchema).optional()
}).strict();

export const ReviewUncheckedUpdateWithoutImagesInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateWithoutImagesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewImageCreateWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageCreateWithoutReviewInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewImageUncheckedCreateWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageUncheckedCreateWithoutReviewInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewImageCreateOrConnectWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageCreateOrConnectWithoutReviewInput> = z.object({
  where: z.lazy(() => ReviewImageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReviewImageCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema) ]),
}).strict();

export const ReviewImageCreateManyReviewInputEnvelopeSchema: z.ZodType<Prisma.ReviewImageCreateManyReviewInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReviewImageCreateManyReviewInputSchema),z.lazy(() => ReviewImageCreateManyReviewInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutReviewsInputSchema: z.ZodType<Prisma.UserCreateWithoutReviewsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutReviewsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutReviewsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutReviewsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutReviewsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutReviewsInputSchema),z.lazy(() => UserUncheckedCreateWithoutReviewsInputSchema) ]),
}).strict();

export const ProductCreateWithoutReviewsInputSchema: z.ZodType<Prisma.ProductCreateWithoutReviewsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutReviewsInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutReviewsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutReviewsInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutReviewsInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutReviewsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutReviewsInputSchema) ]),
}).strict();

export const ReviewImageUpsertWithWhereUniqueWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageUpsertWithWhereUniqueWithoutReviewInput> = z.object({
  where: z.lazy(() => ReviewImageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReviewImageUpdateWithoutReviewInputSchema),z.lazy(() => ReviewImageUncheckedUpdateWithoutReviewInputSchema) ]),
  create: z.union([ z.lazy(() => ReviewImageCreateWithoutReviewInputSchema),z.lazy(() => ReviewImageUncheckedCreateWithoutReviewInputSchema) ]),
}).strict();

export const ReviewImageUpdateWithWhereUniqueWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageUpdateWithWhereUniqueWithoutReviewInput> = z.object({
  where: z.lazy(() => ReviewImageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReviewImageUpdateWithoutReviewInputSchema),z.lazy(() => ReviewImageUncheckedUpdateWithoutReviewInputSchema) ]),
}).strict();

export const ReviewImageUpdateManyWithWhereWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageUpdateManyWithWhereWithoutReviewInput> = z.object({
  where: z.lazy(() => ReviewImageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReviewImageUpdateManyMutationInputSchema),z.lazy(() => ReviewImageUncheckedUpdateManyWithoutReviewInputSchema) ]),
}).strict();

export const ReviewImageScalarWhereInputSchema: z.ZodType<Prisma.ReviewImageScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReviewImageScalarWhereInputSchema),z.lazy(() => ReviewImageScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReviewImageScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReviewImageScalarWhereInputSchema),z.lazy(() => ReviewImageScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  alt: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserUpsertWithoutReviewsInputSchema: z.ZodType<Prisma.UserUpsertWithoutReviewsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutReviewsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReviewsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutReviewsInputSchema),z.lazy(() => UserUncheckedCreateWithoutReviewsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutReviewsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutReviewsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutReviewsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReviewsInputSchema) ]),
}).strict();

export const UserUpdateWithoutReviewsInputSchema: z.ZodType<Prisma.UserUpdateWithoutReviewsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutReviewsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutReviewsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ProductUpsertWithoutReviewsInputSchema: z.ZodType<Prisma.ProductUpsertWithoutReviewsInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutReviewsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutReviewsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutReviewsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutReviewsInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutReviewsInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutReviewsInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutReviewsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutReviewsInputSchema) ]),
}).strict();

export const ProductUpdateWithoutReviewsInputSchema: z.ZodType<Prisma.ProductUpdateWithoutReviewsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutReviewsInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutReviewsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const OrderCreateWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderCreateWithoutShippingAddressInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  groups: z.lazy(() => OrderGroupCreateNestedManyWithoutOrderInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsCreateNestedOneWithoutOrderInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const OrderUncheckedCreateWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderUncheckedCreateWithoutShippingAddressInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  groups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutOrderInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUncheckedCreateNestedOneWithoutOrderInputSchema).optional()
}).strict();

export const OrderCreateOrConnectWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderCreateOrConnectWithoutShippingAddressInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema) ]),
}).strict();

export const OrderCreateManyShippingAddressInputEnvelopeSchema: z.ZodType<Prisma.OrderCreateManyShippingAddressInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderCreateManyShippingAddressInputSchema),z.lazy(() => OrderCreateManyShippingAddressInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutShippingAddressesInputSchema: z.ZodType<Prisma.UserCreateWithoutShippingAddressesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutShippingAddressesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutShippingAddressesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutShippingAddressesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutShippingAddressesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutShippingAddressesInputSchema),z.lazy(() => UserUncheckedCreateWithoutShippingAddressesInputSchema) ]),
}).strict();

export const CountryCreateWithoutShippingAddressesInputSchema: z.ZodType<Prisma.CountryCreateWithoutShippingAddressesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutCountryInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutShippingAddressesInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutShippingAddressesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutShippingAddressesInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutShippingAddressesInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutShippingAddressesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutShippingAddressesInputSchema) ]),
}).strict();

export const OrderUpsertWithWhereUniqueWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderUpsertWithWhereUniqueWithoutShippingAddressInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderUpdateWithoutShippingAddressInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutShippingAddressInputSchema) ]),
  create: z.union([ z.lazy(() => OrderCreateWithoutShippingAddressInputSchema),z.lazy(() => OrderUncheckedCreateWithoutShippingAddressInputSchema) ]),
}).strict();

export const OrderUpdateWithWhereUniqueWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderUpdateWithWhereUniqueWithoutShippingAddressInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderUpdateWithoutShippingAddressInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutShippingAddressInputSchema) ]),
}).strict();

export const OrderUpdateManyWithWhereWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderUpdateManyWithWhereWithoutShippingAddressInput> = z.object({
  where: z.lazy(() => OrderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderUpdateManyMutationInputSchema),z.lazy(() => OrderUncheckedUpdateManyWithoutShippingAddressInputSchema) ]),
}).strict();

export const OrderScalarWhereInputSchema: z.ZodType<Prisma.OrderScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shippingFees: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  subTotal: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  orderStatus: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => EnumPaymentMethodNullableFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserUpsertWithoutShippingAddressesInputSchema: z.ZodType<Prisma.UserUpsertWithoutShippingAddressesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutShippingAddressesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutShippingAddressesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutShippingAddressesInputSchema),z.lazy(() => UserUncheckedCreateWithoutShippingAddressesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutShippingAddressesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutShippingAddressesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutShippingAddressesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutShippingAddressesInputSchema) ]),
}).strict();

export const UserUpdateWithoutShippingAddressesInputSchema: z.ZodType<Prisma.UserUpdateWithoutShippingAddressesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutShippingAddressesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutShippingAddressesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const CountryUpsertWithoutShippingAddressesInputSchema: z.ZodType<Prisma.CountryUpsertWithoutShippingAddressesInput> = z.object({
  update: z.union([ z.lazy(() => CountryUpdateWithoutShippingAddressesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutShippingAddressesInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutShippingAddressesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutShippingAddressesInputSchema) ]),
  where: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const CountryUpdateToOneWithWhereWithoutShippingAddressesInputSchema: z.ZodType<Prisma.CountryUpdateToOneWithWhereWithoutShippingAddressesInput> = z.object({
  where: z.lazy(() => CountryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CountryUpdateWithoutShippingAddressesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutShippingAddressesInputSchema) ]),
}).strict();

export const CountryUpdateWithoutShippingAddressesInputSchema: z.ZodType<Prisma.CountryUpdateWithoutShippingAddressesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutCountryNestedInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutShippingAddressesInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutShippingAddressesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryCreateWithoutShippingRatesInputSchema: z.ZodType<Prisma.CountryCreateWithoutShippingRatesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryCreateNestedManyWithoutCountryInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutShippingRatesInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutShippingRatesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutShippingRatesInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutShippingRatesInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutShippingRatesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutShippingRatesInputSchema) ]),
}).strict();

export const StoreCreateWithoutShippingRatesInputSchema: z.ZodType<Prisma.StoreCreateWithoutShippingRatesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutStoresInputSchema),
  products: z.lazy(() => ProductCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUncheckedCreateWithoutShippingRatesInputSchema: z.ZodType<Prisma.StoreUncheckedCreateWithoutShippingRatesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userId: z.string(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreCreateOrConnectWithoutShippingRatesInputSchema: z.ZodType<Prisma.StoreCreateOrConnectWithoutShippingRatesInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StoreCreateWithoutShippingRatesInputSchema),z.lazy(() => StoreUncheckedCreateWithoutShippingRatesInputSchema) ]),
}).strict();

export const CountryUpsertWithoutShippingRatesInputSchema: z.ZodType<Prisma.CountryUpsertWithoutShippingRatesInput> = z.object({
  update: z.union([ z.lazy(() => CountryUpdateWithoutShippingRatesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutShippingRatesInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutShippingRatesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutShippingRatesInputSchema) ]),
  where: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const CountryUpdateToOneWithWhereWithoutShippingRatesInputSchema: z.ZodType<Prisma.CountryUpdateToOneWithWhereWithoutShippingRatesInput> = z.object({
  where: z.lazy(() => CountryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CountryUpdateWithoutShippingRatesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutShippingRatesInputSchema) ]),
}).strict();

export const CountryUpdateWithoutShippingRatesInputSchema: z.ZodType<Prisma.CountryUpdateWithoutShippingRatesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUpdateManyWithoutCountryNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutShippingRatesInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutShippingRatesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingCountries: z.lazy(() => FreeShippingCountryUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const StoreUpsertWithoutShippingRatesInputSchema: z.ZodType<Prisma.StoreUpsertWithoutShippingRatesInput> = z.object({
  update: z.union([ z.lazy(() => StoreUpdateWithoutShippingRatesInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutShippingRatesInputSchema) ]),
  create: z.union([ z.lazy(() => StoreCreateWithoutShippingRatesInputSchema),z.lazy(() => StoreUncheckedCreateWithoutShippingRatesInputSchema) ]),
  where: z.lazy(() => StoreWhereInputSchema).optional()
}).strict();

export const StoreUpdateToOneWithWhereWithoutShippingRatesInputSchema: z.ZodType<Prisma.StoreUpdateToOneWithWhereWithoutShippingRatesInput> = z.object({
  where: z.lazy(() => StoreWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StoreUpdateWithoutShippingRatesInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutShippingRatesInputSchema) ]),
}).strict();

export const StoreUpdateWithoutShippingRatesInputSchema: z.ZodType<Prisma.StoreUpdateWithoutShippingRatesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateWithoutShippingRatesInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateWithoutShippingRatesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const WishlistCreateWithoutSizeInputSchema: z.ZodType<Prisma.WishlistCreateWithoutSizeInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutWishlistInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutWishlistInputSchema),
  variant: z.lazy(() => ProductVariantCreateNestedOneWithoutWishlistInputSchema)
}).strict();

export const WishlistUncheckedCreateWithoutSizeInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateWithoutSizeInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  productId: z.string(),
  variantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistCreateOrConnectWithoutSizeInputSchema: z.ZodType<Prisma.WishlistCreateOrConnectWithoutSizeInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WishlistCreateWithoutSizeInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema) ]),
}).strict();

export const WishlistCreateManySizeInputEnvelopeSchema: z.ZodType<Prisma.WishlistCreateManySizeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WishlistCreateManySizeInputSchema),z.lazy(() => WishlistCreateManySizeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductVariantCreateWithoutSizesInputSchema: z.ZodType<Prisma.ProductVariantCreateWithoutSizesInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutVariantsInputSchema),
  images: z.lazy(() => ProductVariantImageCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantUncheckedCreateWithoutSizesInputSchema: z.ZodType<Prisma.ProductVariantUncheckedCreateWithoutSizesInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  images: z.lazy(() => ProductVariantImageUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantCreateOrConnectWithoutSizesInputSchema: z.ZodType<Prisma.ProductVariantCreateOrConnectWithoutSizesInput> = z.object({
  where: z.lazy(() => ProductVariantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutSizesInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutSizesInputSchema) ]),
}).strict();

export const WishlistUpsertWithWhereUniqueWithoutSizeInputSchema: z.ZodType<Prisma.WishlistUpsertWithWhereUniqueWithoutSizeInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WishlistUpdateWithoutSizeInputSchema),z.lazy(() => WishlistUncheckedUpdateWithoutSizeInputSchema) ]),
  create: z.union([ z.lazy(() => WishlistCreateWithoutSizeInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutSizeInputSchema) ]),
}).strict();

export const WishlistUpdateWithWhereUniqueWithoutSizeInputSchema: z.ZodType<Prisma.WishlistUpdateWithWhereUniqueWithoutSizeInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WishlistUpdateWithoutSizeInputSchema),z.lazy(() => WishlistUncheckedUpdateWithoutSizeInputSchema) ]),
}).strict();

export const WishlistUpdateManyWithWhereWithoutSizeInputSchema: z.ZodType<Prisma.WishlistUpdateManyWithWhereWithoutSizeInput> = z.object({
  where: z.lazy(() => WishlistScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WishlistUpdateManyMutationInputSchema),z.lazy(() => WishlistUncheckedUpdateManyWithoutSizeInputSchema) ]),
}).strict();

export const ProductVariantUpsertWithoutSizesInputSchema: z.ZodType<Prisma.ProductVariantUpsertWithoutSizesInput> = z.object({
  update: z.union([ z.lazy(() => ProductVariantUpdateWithoutSizesInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutSizesInputSchema) ]),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutSizesInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutSizesInputSchema) ]),
  where: z.lazy(() => ProductVariantWhereInputSchema).optional()
}).strict();

export const ProductVariantUpdateToOneWithWhereWithoutSizesInputSchema: z.ZodType<Prisma.ProductVariantUpdateToOneWithWhereWithoutSizesInput> = z.object({
  where: z.lazy(() => ProductVariantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductVariantUpdateWithoutSizesInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutSizesInputSchema) ]),
}).strict();

export const ProductVariantUpdateWithoutSizesInputSchema: z.ZodType<Prisma.ProductVariantUpdateWithoutSizesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutVariantsNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantUncheckedUpdateWithoutSizesInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateWithoutSizesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductCreateWithoutSpecsInputSchema: z.ZodType<Prisma.ProductCreateWithoutSpecsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutSpecsInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutSpecsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutSpecsInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutSpecsInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutSpecsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSpecsInputSchema) ]),
}).strict();

export const ProductVariantCreateWithoutSpecsInputSchema: z.ZodType<Prisma.ProductVariantCreateWithoutSpecsInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutVariantsInputSchema),
  sizes: z.lazy(() => SizeCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorCreateNestedManyWithoutProductVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantUncheckedCreateWithoutSpecsInputSchema: z.ZodType<Prisma.ProductVariantUncheckedCreateWithoutSpecsInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sizes: z.lazy(() => SizeUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantCreateOrConnectWithoutSpecsInputSchema: z.ZodType<Prisma.ProductVariantCreateOrConnectWithoutSpecsInput> = z.object({
  where: z.lazy(() => ProductVariantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutSpecsInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutSpecsInputSchema) ]),
}).strict();

export const ProductUpsertWithoutSpecsInputSchema: z.ZodType<Prisma.ProductUpsertWithoutSpecsInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutSpecsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutSpecsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutSpecsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSpecsInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutSpecsInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutSpecsInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutSpecsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutSpecsInputSchema) ]),
}).strict();

export const ProductUpdateWithoutSpecsInputSchema: z.ZodType<Prisma.ProductUpdateWithoutSpecsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutSpecsInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutSpecsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductVariantUpsertWithoutSpecsInputSchema: z.ZodType<Prisma.ProductVariantUpsertWithoutSpecsInput> = z.object({
  update: z.union([ z.lazy(() => ProductVariantUpdateWithoutSpecsInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutSpecsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutSpecsInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutSpecsInputSchema) ]),
  where: z.lazy(() => ProductVariantWhereInputSchema).optional()
}).strict();

export const ProductVariantUpdateToOneWithWhereWithoutSpecsInputSchema: z.ZodType<Prisma.ProductVariantUpdateToOneWithWhereWithoutSpecsInput> = z.object({
  where: z.lazy(() => ProductVariantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductVariantUpdateWithoutSpecsInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutSpecsInputSchema) ]),
}).strict();

export const ProductVariantUpdateWithoutSpecsInputSchema: z.ZodType<Prisma.ProductVariantUpdateWithoutSpecsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutVariantsNestedInputSchema).optional(),
  sizes: z.lazy(() => SizeUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantUncheckedUpdateWithoutSpecsInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateWithoutSpecsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutStoresInputSchema: z.ZodType<Prisma.UserCreateWithoutStoresInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutStoresInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutStoresInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutStoresInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutStoresInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutStoresInputSchema),z.lazy(() => UserUncheckedCreateWithoutStoresInputSchema) ]),
}).strict();

export const ProductCreateWithoutStoreInputSchema: z.ZodType<Prisma.ProductCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutStoreInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutStoreInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutStoreInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutStoreInputSchema),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const ProductCreateManyStoreInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManyStoreInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManyStoreInputSchema),z.lazy(() => ProductCreateManyStoreInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ShippingRateCreateWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  country: z.lazy(() => CountryCreateNestedOneWithoutShippingRatesInputSchema)
}).strict();

export const ShippingRateUncheckedCreateWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateUncheckedCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingRateCreateOrConnectWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateCreateOrConnectWithoutStoreInput> = z.object({
  where: z.lazy(() => ShippingRateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const ShippingRateCreateManyStoreInputEnvelopeSchema: z.ZodType<Prisma.ShippingRateCreateManyStoreInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ShippingRateCreateManyStoreInputSchema),z.lazy(() => ShippingRateCreateManyStoreInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutFollowingInputSchema: z.ZodType<Prisma.UserCreateWithoutFollowingInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFollowingInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFollowingInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFollowingInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFollowingInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFollowingInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema) ]),
}).strict();

export const CartItemCreateWithoutStoreInputSchema: z.ZodType<Prisma.CartItemCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutCartItemsInputSchema)
}).strict();

export const CartItemUncheckedCreateWithoutStoreInputSchema: z.ZodType<Prisma.CartItemUncheckedCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  cartId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartItemCreateOrConnectWithoutStoreInputSchema: z.ZodType<Prisma.CartItemCreateOrConnectWithoutStoreInput> = z.object({
  where: z.lazy(() => CartItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CartItemCreateWithoutStoreInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const CartItemCreateManyStoreInputEnvelopeSchema: z.ZodType<Prisma.CartItemCreateManyStoreInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CartItemCreateManyStoreInputSchema),z.lazy(() => CartItemCreateManyStoreInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrderGroupCreateWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemCreateNestedManyWithoutOrderGroupInputSchema).optional(),
  order: z.lazy(() => OrderCreateNestedOneWithoutGroupsInputSchema),
  coupon: z.lazy(() => CouponCreateNestedOneWithoutOrdersInputSchema).optional()
}).strict();

export const OrderGroupUncheckedCreateWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupUncheckedCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderId: z.string(),
  couponId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderGroupInputSchema).optional()
}).strict();

export const OrderGroupCreateOrConnectWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupCreateOrConnectWithoutStoreInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const OrderGroupCreateManyStoreInputEnvelopeSchema: z.ZodType<Prisma.OrderGroupCreateManyStoreInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderGroupCreateManyStoreInputSchema),z.lazy(() => OrderGroupCreateManyStoreInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CouponCreateWithoutStoreInputSchema: z.ZodType<Prisma.CouponCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderGroupCreateNestedManyWithoutCouponInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutCouponsInputSchema).optional(),
  carts: z.lazy(() => CartCreateNestedManyWithoutCouponInputSchema).optional()
}).strict();

export const CouponUncheckedCreateWithoutStoreInputSchema: z.ZodType<Prisma.CouponUncheckedCreateWithoutStoreInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutCouponInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutCouponsInputSchema).optional(),
  carts: z.lazy(() => CartUncheckedCreateNestedManyWithoutCouponInputSchema).optional()
}).strict();

export const CouponCreateOrConnectWithoutStoreInputSchema: z.ZodType<Prisma.CouponCreateOrConnectWithoutStoreInput> = z.object({
  where: z.lazy(() => CouponWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CouponCreateWithoutStoreInputSchema),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const CouponCreateManyStoreInputEnvelopeSchema: z.ZodType<Prisma.CouponCreateManyStoreInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CouponCreateManyStoreInputSchema),z.lazy(() => CouponCreateManyStoreInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutStoresInputSchema: z.ZodType<Prisma.UserUpsertWithoutStoresInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutStoresInputSchema),z.lazy(() => UserUncheckedUpdateWithoutStoresInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutStoresInputSchema),z.lazy(() => UserUncheckedCreateWithoutStoresInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutStoresInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutStoresInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutStoresInputSchema),z.lazy(() => UserUncheckedUpdateWithoutStoresInputSchema) ]),
}).strict();

export const UserUpdateWithoutStoresInputSchema: z.ZodType<Prisma.UserUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutStoresInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutStoresInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ProductUpsertWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutStoreInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutStoreInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutStoreInputSchema),z.lazy(() => ProductUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutStoreInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutStoreInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutStoreInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutStoreInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutStoreInputSchema) ]),
}).strict();

export const ShippingRateUpsertWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateUpsertWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => ShippingRateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ShippingRateUpdateWithoutStoreInputSchema),z.lazy(() => ShippingRateUncheckedUpdateWithoutStoreInputSchema) ]),
  create: z.union([ z.lazy(() => ShippingRateCreateWithoutStoreInputSchema),z.lazy(() => ShippingRateUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const ShippingRateUpdateWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateUpdateWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => ShippingRateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ShippingRateUpdateWithoutStoreInputSchema),z.lazy(() => ShippingRateUncheckedUpdateWithoutStoreInputSchema) ]),
}).strict();

export const ShippingRateUpdateManyWithWhereWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateUpdateManyWithWhereWithoutStoreInput> = z.object({
  where: z.lazy(() => ShippingRateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ShippingRateUpdateManyMutationInputSchema),z.lazy(() => ShippingRateUncheckedUpdateManyWithoutStoreInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutFollowingInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutFollowingInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutFollowingInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFollowingInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFollowingInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowingInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutFollowingInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutFollowingInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutFollowingInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFollowingInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutFollowingInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutFollowingInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutFollowingInputSchema) ]),
}).strict();

export const CartItemUpsertWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.CartItemUpsertWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => CartItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CartItemUpdateWithoutStoreInputSchema),z.lazy(() => CartItemUncheckedUpdateWithoutStoreInputSchema) ]),
  create: z.union([ z.lazy(() => CartItemCreateWithoutStoreInputSchema),z.lazy(() => CartItemUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const CartItemUpdateWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.CartItemUpdateWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => CartItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CartItemUpdateWithoutStoreInputSchema),z.lazy(() => CartItemUncheckedUpdateWithoutStoreInputSchema) ]),
}).strict();

export const CartItemUpdateManyWithWhereWithoutStoreInputSchema: z.ZodType<Prisma.CartItemUpdateManyWithWhereWithoutStoreInput> = z.object({
  where: z.lazy(() => CartItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CartItemUpdateManyMutationInputSchema),z.lazy(() => CartItemUncheckedUpdateManyWithoutStoreInputSchema) ]),
}).strict();

export const OrderGroupUpsertWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupUpsertWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderGroupUpdateWithoutStoreInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutStoreInputSchema) ]),
  create: z.union([ z.lazy(() => OrderGroupCreateWithoutStoreInputSchema),z.lazy(() => OrderGroupUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const OrderGroupUpdateWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupUpdateWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => OrderGroupWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderGroupUpdateWithoutStoreInputSchema),z.lazy(() => OrderGroupUncheckedUpdateWithoutStoreInputSchema) ]),
}).strict();

export const OrderGroupUpdateManyWithWhereWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupUpdateManyWithWhereWithoutStoreInput> = z.object({
  where: z.lazy(() => OrderGroupScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderGroupUpdateManyMutationInputSchema),z.lazy(() => OrderGroupUncheckedUpdateManyWithoutStoreInputSchema) ]),
}).strict();

export const CouponUpsertWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.CouponUpsertWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => CouponWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CouponUpdateWithoutStoreInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutStoreInputSchema) ]),
  create: z.union([ z.lazy(() => CouponCreateWithoutStoreInputSchema),z.lazy(() => CouponUncheckedCreateWithoutStoreInputSchema) ]),
}).strict();

export const CouponUpdateWithWhereUniqueWithoutStoreInputSchema: z.ZodType<Prisma.CouponUpdateWithWhereUniqueWithoutStoreInput> = z.object({
  where: z.lazy(() => CouponWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CouponUpdateWithoutStoreInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutStoreInputSchema) ]),
}).strict();

export const CouponUpdateManyWithWhereWithoutStoreInputSchema: z.ZodType<Prisma.CouponUpdateManyWithWhereWithoutStoreInput> = z.object({
  where: z.lazy(() => CouponScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CouponUpdateManyMutationInputSchema),z.lazy(() => CouponUncheckedUpdateManyWithoutStoreInputSchema) ]),
}).strict();

export const CouponScalarWhereInputSchema: z.ZodType<Prisma.CouponScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CouponScalarWhereInputSchema),z.lazy(() => CouponScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CouponScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CouponScalarWhereInputSchema),z.lazy(() => CouponScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  endDate: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  discount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  storeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CategoryCreateWithoutSubCategoriesInputSchema: z.ZodType<Prisma.CategoryCreateWithoutSubCategoriesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUncheckedCreateWithoutSubCategoriesInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateWithoutSubCategoriesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryCreateOrConnectWithoutSubCategoriesInputSchema: z.ZodType<Prisma.CategoryCreateOrConnectWithoutSubCategoriesInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CategoryCreateWithoutSubCategoriesInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutSubCategoriesInputSchema) ]),
}).strict();

export const ProductCreateWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductCreateWithoutSubCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutSubCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutSubCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema) ]),
}).strict();

export const ProductCreateManySubCategoryInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManySubCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManySubCategoryInputSchema),z.lazy(() => ProductCreateManySubCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CategoryUpsertWithoutSubCategoriesInputSchema: z.ZodType<Prisma.CategoryUpsertWithoutSubCategoriesInput> = z.object({
  update: z.union([ z.lazy(() => CategoryUpdateWithoutSubCategoriesInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutSubCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => CategoryCreateWithoutSubCategoriesInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutSubCategoriesInputSchema) ]),
  where: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const CategoryUpdateToOneWithWhereWithoutSubCategoriesInputSchema: z.ZodType<Prisma.CategoryUpdateToOneWithWhereWithoutSubCategoriesInput> = z.object({
  where: z.lazy(() => CategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CategoryUpdateWithoutSubCategoriesInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutSubCategoriesInputSchema) ]),
}).strict();

export const CategoryUpdateWithoutSubCategoriesInputSchema: z.ZodType<Prisma.CategoryUpdateWithoutSubCategoriesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateWithoutSubCategoriesInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateWithoutSubCategoriesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ProductUpsertWithWhereUniqueWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutSubCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutSubCategoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutSubCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutSubCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutSubCategoryInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutSubCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutSubCategoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutSubCategoryInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutSubCategoryInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutSubCategoryInputSchema) ]),
}).strict();

export const StoreCreateWithoutUserInputSchema: z.ZodType<Prisma.StoreCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.StoreUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedCreateNestedManyWithoutFollowingInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.StoreCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StoreCreateWithoutUserInputSchema),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const StoreCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.StoreCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => StoreCreateManyUserInputSchema),z.lazy(() => StoreCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const StoreCreateWithoutFollowersInputSchema: z.ZodType<Prisma.StoreCreateWithoutFollowersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutStoresInputSchema),
  products: z.lazy(() => ProductCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateCreateNestedManyWithoutStoreInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreUncheckedCreateWithoutFollowersInputSchema: z.ZodType<Prisma.StoreUncheckedCreateWithoutFollowersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userId: z.string(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutStoreInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutStoreInputSchema).optional()
}).strict();

export const StoreCreateOrConnectWithoutFollowersInputSchema: z.ZodType<Prisma.StoreCreateOrConnectWithoutFollowersInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StoreCreateWithoutFollowersInputSchema),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema) ]),
}).strict();

export const ReviewCreateWithoutUserInputSchema: z.ZodType<Prisma.ReviewCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  images: z.lazy(() => ReviewImageCreateNestedManyWithoutReviewInputSchema).optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutReviewsInputSchema)
}).strict();

export const ReviewUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ReviewUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  images: z.lazy(() => ReviewImageUncheckedCreateNestedManyWithoutReviewInputSchema).optional()
}).strict();

export const ReviewCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ReviewCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ReviewWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReviewCreateWithoutUserInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ReviewCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ReviewCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReviewCreateManyUserInputSchema),z.lazy(() => ReviewCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CartCreateWithoutUserInputSchema: z.ZodType<Prisma.CartCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  coupon: z.lazy(() => CouponCreateNestedOneWithoutCartsInputSchema).optional(),
  cartItems: z.lazy(() => CartItemCreateNestedManyWithoutCartInputSchema).optional()
}).strict();

export const CartUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.CartUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  couponId: z.string().optional().nullable(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cartItems: z.lazy(() => CartItemUncheckedCreateNestedManyWithoutCartInputSchema).optional()
}).strict();

export const CartCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.CartCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => CartWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CartCreateWithoutUserInputSchema),z.lazy(() => CartUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ShippingAddressCreateWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutShippingAddressInputSchema).optional(),
  country: z.lazy(() => CountryCreateNestedOneWithoutShippingAddressesInputSchema)
}).strict();

export const ShippingAddressUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutShippingAddressInputSchema).optional()
}).strict();

export const ShippingAddressCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ShippingAddressWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ShippingAddressCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ShippingAddressCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ShippingAddressCreateManyUserInputSchema),z.lazy(() => ShippingAddressCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrderCreateWithoutUserInputSchema: z.ZodType<Prisma.OrderCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  groups: z.lazy(() => OrderGroupCreateNestedManyWithoutOrderInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsCreateNestedOneWithoutOrderInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const OrderUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.OrderUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  shippingAddressId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  groups: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutOrderInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUncheckedCreateNestedOneWithoutOrderInputSchema).optional()
}).strict();

export const OrderCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.OrderCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderCreateWithoutUserInputSchema),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const OrderCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.OrderCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderCreateManyUserInputSchema),z.lazy(() => OrderCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WishlistCreateWithoutUserInputSchema: z.ZodType<Prisma.WishlistCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutWishlistInputSchema),
  variant: z.lazy(() => ProductVariantCreateNestedOneWithoutWishlistInputSchema),
  size: z.lazy(() => SizeCreateNestedOneWithoutWishlistInputSchema).optional()
}).strict();

export const WishlistUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.WishlistUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.WishlistCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WishlistCreateWithoutUserInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const WishlistCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.WishlistCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WishlistCreateManyUserInputSchema),z.lazy(() => WishlistCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PaymentDetailsCreateWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  order: z.lazy(() => OrderCreateNestedOneWithoutPaymentDetailsInputSchema)
}).strict();

export const PaymentDetailsUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  orderId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentDetailsCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PaymentDetailsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PaymentDetailsCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PaymentDetailsCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PaymentDetailsCreateManyUserInputSchema),z.lazy(() => PaymentDetailsCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CouponCreateWithoutUsersInputSchema: z.ZodType<Prisma.CouponCreateWithoutUsersInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutCouponsInputSchema),
  orders: z.lazy(() => OrderGroupCreateNestedManyWithoutCouponInputSchema).optional(),
  carts: z.lazy(() => CartCreateNestedManyWithoutCouponInputSchema).optional()
}).strict();

export const CouponUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.CouponUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderGroupUncheckedCreateNestedManyWithoutCouponInputSchema).optional(),
  carts: z.lazy(() => CartUncheckedCreateNestedManyWithoutCouponInputSchema).optional()
}).strict();

export const CouponCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.CouponCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => CouponWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CouponCreateWithoutUsersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const StoreUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.StoreUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => StoreUpdateWithoutUserInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => StoreCreateWithoutUserInputSchema),z.lazy(() => StoreUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const StoreUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.StoreUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => StoreUpdateWithoutUserInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const StoreUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.StoreUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => StoreScalarWhereInputSchema),
  data: z.union([ z.lazy(() => StoreUpdateManyMutationInputSchema),z.lazy(() => StoreUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const StoreScalarWhereInputSchema: z.ZodType<Prisma.StoreScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StoreScalarWhereInputSchema),z.lazy(() => StoreScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StoreScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StoreScalarWhereInputSchema),z.lazy(() => StoreScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cover: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumStoreStatusFilterSchema),z.lazy(() => StoreStatusSchema) ]).optional(),
  averageRating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  numReviews: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  returnPolicy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  defaultShippingService: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  defaultShippingFeePerItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeePerKg: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultShippingFeeFixed: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const StoreUpsertWithWhereUniqueWithoutFollowersInputSchema: z.ZodType<Prisma.StoreUpsertWithWhereUniqueWithoutFollowersInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => StoreUpdateWithoutFollowersInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutFollowersInputSchema) ]),
  create: z.union([ z.lazy(() => StoreCreateWithoutFollowersInputSchema),z.lazy(() => StoreUncheckedCreateWithoutFollowersInputSchema) ]),
}).strict();

export const StoreUpdateWithWhereUniqueWithoutFollowersInputSchema: z.ZodType<Prisma.StoreUpdateWithWhereUniqueWithoutFollowersInput> = z.object({
  where: z.lazy(() => StoreWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => StoreUpdateWithoutFollowersInputSchema),z.lazy(() => StoreUncheckedUpdateWithoutFollowersInputSchema) ]),
}).strict();

export const StoreUpdateManyWithWhereWithoutFollowersInputSchema: z.ZodType<Prisma.StoreUpdateManyWithWhereWithoutFollowersInput> = z.object({
  where: z.lazy(() => StoreScalarWhereInputSchema),
  data: z.union([ z.lazy(() => StoreUpdateManyMutationInputSchema),z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersInputSchema) ]),
}).strict();

export const ReviewUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ReviewUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ReviewWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReviewUpdateWithoutUserInputSchema),z.lazy(() => ReviewUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ReviewCreateWithoutUserInputSchema),z.lazy(() => ReviewUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ReviewUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ReviewUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ReviewWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReviewUpdateWithoutUserInputSchema),z.lazy(() => ReviewUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ReviewUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ReviewUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ReviewScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReviewUpdateManyMutationInputSchema),z.lazy(() => ReviewUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const CartUpsertWithoutUserInputSchema: z.ZodType<Prisma.CartUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => CartUpdateWithoutUserInputSchema),z.lazy(() => CartUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => CartCreateWithoutUserInputSchema),z.lazy(() => CartUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => CartWhereInputSchema).optional()
}).strict();

export const CartUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.CartUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => CartWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CartUpdateWithoutUserInputSchema),z.lazy(() => CartUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const CartUpdateWithoutUserInputSchema: z.ZodType<Prisma.CartUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  coupon: z.lazy(() => CouponUpdateOneWithoutCartsNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutCartNestedInputSchema).optional()
}).strict();

export const CartUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.CartUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutCartNestedInputSchema).optional()
}).strict();

export const ShippingAddressUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ShippingAddressWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ShippingAddressUpdateWithoutUserInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ShippingAddressCreateWithoutUserInputSchema),z.lazy(() => ShippingAddressUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ShippingAddressUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ShippingAddressWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ShippingAddressUpdateWithoutUserInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ShippingAddressUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ShippingAddressScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ShippingAddressUpdateManyMutationInputSchema),z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const OrderUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.OrderUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderUpdateWithoutUserInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => OrderCreateWithoutUserInputSchema),z.lazy(() => OrderUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const OrderUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.OrderUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderUpdateWithoutUserInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const OrderUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.OrderUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => OrderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderUpdateManyMutationInputSchema),z.lazy(() => OrderUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const WishlistUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.WishlistUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WishlistUpdateWithoutUserInputSchema),z.lazy(() => WishlistUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => WishlistCreateWithoutUserInputSchema),z.lazy(() => WishlistUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const WishlistUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.WishlistUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => WishlistWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WishlistUpdateWithoutUserInputSchema),z.lazy(() => WishlistUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const WishlistUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.WishlistUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => WishlistScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WishlistUpdateManyMutationInputSchema),z.lazy(() => WishlistUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PaymentDetailsUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PaymentDetailsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PaymentDetailsUpdateWithoutUserInputSchema),z.lazy(() => PaymentDetailsUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PaymentDetailsCreateWithoutUserInputSchema),z.lazy(() => PaymentDetailsUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PaymentDetailsUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PaymentDetailsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PaymentDetailsUpdateWithoutUserInputSchema),z.lazy(() => PaymentDetailsUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PaymentDetailsUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PaymentDetailsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PaymentDetailsUpdateManyMutationInputSchema),z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PaymentDetailsScalarWhereInputSchema: z.ZodType<Prisma.PaymentDetailsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentDetailsScalarWhereInputSchema),z.lazy(() => PaymentDetailsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentDetailsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentDetailsScalarWhereInputSchema),z.lazy(() => PaymentDetailsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  paymentInetntId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  paymentMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  orderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CouponUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.CouponUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => CouponWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CouponUpdateWithoutUsersInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => CouponCreateWithoutUsersInputSchema),z.lazy(() => CouponUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const CouponUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.CouponUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => CouponWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CouponUpdateWithoutUsersInputSchema),z.lazy(() => CouponUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const CouponUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.CouponUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => CouponScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CouponUpdateManyMutationInputSchema),z.lazy(() => CouponUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const UserCreateWithoutWishlistInputSchema: z.ZodType<Prisma.UserCreateWithoutWishlistInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutWishlistInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutWishlistInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  picture: z.string(),
  role: z.lazy(() => RoleSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  stores: z.lazy(() => StoreUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedCreateNestedManyWithoutFollowersInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutWishlistInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutWishlistInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutWishlistInputSchema),z.lazy(() => UserUncheckedCreateWithoutWishlistInputSchema) ]),
}).strict();

export const ProductCreateWithoutWishlistInputSchema: z.ZodType<Prisma.ProductCreateWithoutWishlistInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  freeShipping: z.lazy(() => FreeShippingCreateNestedOneWithoutProductInputSchema).optional(),
  store: z.lazy(() => StoreCreateNestedOneWithoutProductsInputSchema),
  variants: z.lazy(() => ProductVariantCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutProductsInputSchema),
  subCategory: z.lazy(() => SubCategoryCreateNestedOneWithoutProductsInputSchema),
  offerTag: z.lazy(() => OfferTagCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutWishlistInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutWishlistInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedCreateNestedOneWithoutProductInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutWishlistInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutWishlistInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutWishlistInputSchema),z.lazy(() => ProductUncheckedCreateWithoutWishlistInputSchema) ]),
}).strict();

export const ProductVariantCreateWithoutWishlistInputSchema: z.ZodType<Prisma.ProductVariantCreateWithoutWishlistInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutVariantsInputSchema),
  sizes: z.lazy(() => SizeCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantUncheckedCreateWithoutWishlistInputSchema: z.ZodType<Prisma.ProductVariantUncheckedCreateWithoutWishlistInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sizes: z.lazy(() => SizeUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedCreateNestedManyWithoutProductVariantInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedCreateNestedManyWithoutVariantInputSchema).optional()
}).strict();

export const ProductVariantCreateOrConnectWithoutWishlistInputSchema: z.ZodType<Prisma.ProductVariantCreateOrConnectWithoutWishlistInput> = z.object({
  where: z.lazy(() => ProductVariantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutWishlistInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutWishlistInputSchema) ]),
}).strict();

export const SizeCreateWithoutWishlistInputSchema: z.ZodType<Prisma.SizeCreateWithoutWishlistInput> = z.object({
  id: z.string().uuid().optional(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  productVariant: z.lazy(() => ProductVariantCreateNestedOneWithoutSizesInputSchema)
}).strict();

export const SizeUncheckedCreateWithoutWishlistInputSchema: z.ZodType<Prisma.SizeUncheckedCreateWithoutWishlistInput> = z.object({
  id: z.string().uuid().optional(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number().optional(),
  productVariantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SizeCreateOrConnectWithoutWishlistInputSchema: z.ZodType<Prisma.SizeCreateOrConnectWithoutWishlistInput> = z.object({
  where: z.lazy(() => SizeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SizeCreateWithoutWishlistInputSchema),z.lazy(() => SizeUncheckedCreateWithoutWishlistInputSchema) ]),
}).strict();

export const UserUpsertWithoutWishlistInputSchema: z.ZodType<Prisma.UserUpsertWithoutWishlistInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutWishlistInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWishlistInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutWishlistInputSchema),z.lazy(() => UserUncheckedCreateWithoutWishlistInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutWishlistInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutWishlistInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutWishlistInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWishlistInputSchema) ]),
}).strict();

export const UserUpdateWithoutWishlistInputSchema: z.ZodType<Prisma.UserUpdateWithoutWishlistInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutWishlistInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutWishlistInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ProductUpsertWithoutWishlistInputSchema: z.ZodType<Prisma.ProductUpsertWithoutWishlistInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutWishlistInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutWishlistInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutWishlistInputSchema),z.lazy(() => ProductUncheckedCreateWithoutWishlistInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutWishlistInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutWishlistInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutWishlistInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutWishlistInputSchema) ]),
}).strict();

export const ProductUpdateWithoutWishlistInputSchema: z.ZodType<Prisma.ProductUpdateWithoutWishlistInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutWishlistInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutWishlistInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductVariantUpsertWithoutWishlistInputSchema: z.ZodType<Prisma.ProductVariantUpsertWithoutWishlistInput> = z.object({
  update: z.union([ z.lazy(() => ProductVariantUpdateWithoutWishlistInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutWishlistInputSchema) ]),
  create: z.union([ z.lazy(() => ProductVariantCreateWithoutWishlistInputSchema),z.lazy(() => ProductVariantUncheckedCreateWithoutWishlistInputSchema) ]),
  where: z.lazy(() => ProductVariantWhereInputSchema).optional()
}).strict();

export const ProductVariantUpdateToOneWithWhereWithoutWishlistInputSchema: z.ZodType<Prisma.ProductVariantUpdateToOneWithWhereWithoutWishlistInput> = z.object({
  where: z.lazy(() => ProductVariantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductVariantUpdateWithoutWishlistInputSchema),z.lazy(() => ProductVariantUncheckedUpdateWithoutWishlistInputSchema) ]),
}).strict();

export const ProductVariantUpdateWithoutWishlistInputSchema: z.ZodType<Prisma.ProductVariantUpdateWithoutWishlistInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutVariantsNestedInputSchema).optional(),
  sizes: z.lazy(() => SizeUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantUncheckedUpdateWithoutWishlistInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateWithoutWishlistInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const SizeUpsertWithoutWishlistInputSchema: z.ZodType<Prisma.SizeUpsertWithoutWishlistInput> = z.object({
  update: z.union([ z.lazy(() => SizeUpdateWithoutWishlistInputSchema),z.lazy(() => SizeUncheckedUpdateWithoutWishlistInputSchema) ]),
  create: z.union([ z.lazy(() => SizeCreateWithoutWishlistInputSchema),z.lazy(() => SizeUncheckedCreateWithoutWishlistInputSchema) ]),
  where: z.lazy(() => SizeWhereInputSchema).optional()
}).strict();

export const SizeUpdateToOneWithWhereWithoutWishlistInputSchema: z.ZodType<Prisma.SizeUpdateToOneWithWhereWithoutWishlistInput> = z.object({
  where: z.lazy(() => SizeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SizeUpdateWithoutWishlistInputSchema),z.lazy(() => SizeUncheckedUpdateWithoutWishlistInputSchema) ]),
}).strict();

export const SizeUpdateWithoutWishlistInputSchema: z.ZodType<Prisma.SizeUpdateWithoutWishlistInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  productVariant: z.lazy(() => ProductVariantUpdateOneRequiredWithoutSizesNestedInputSchema).optional()
}).strict();

export const SizeUncheckedUpdateWithoutWishlistInputSchema: z.ZodType<Prisma.SizeUncheckedUpdateWithoutWishlistInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  productVariantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartItemCreateManyCartInputSchema: z.ZodType<Prisma.CartItemCreateManyCartInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartItemUpdateWithoutCartInputSchema: z.ZodType<Prisma.CartItemUpdateWithoutCartInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutCartItemsNestedInputSchema).optional()
}).strict();

export const CartItemUncheckedUpdateWithoutCartInputSchema: z.ZodType<Prisma.CartItemUncheckedUpdateWithoutCartInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartItemUncheckedUpdateManyWithoutCartInputSchema: z.ZodType<Prisma.CartItemUncheckedUpdateManyWithoutCartInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubCategoryCreateManyCategoryInputSchema: z.ZodType<Prisma.SubCategoryCreateManyCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  image: z.string(),
  url: z.string(),
  featured: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductCreateManyCategoryInputSchema: z.ZodType<Prisma.ProductCreateManyCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable()
}).strict();

export const SubCategoryUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutSubCategoryNestedInputSchema).optional()
}).strict();

export const SubCategoryUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutSubCategoryNestedInputSchema).optional()
}).strict();

export const SubCategoryUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.SubCategoryUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ShippingRateCreateManyCountryInputSchema: z.ZodType<Prisma.ShippingRateCreateManyCountryInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FreeShippingCountryCreateManyCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateManyCountryInput> = z.object({
  id: z.string().uuid().optional(),
  freeShippingId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingAddressCreateManyCountryInputSchema: z.ZodType<Prisma.ShippingAddressCreateManyCountryInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingRateUpdateWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutShippingRatesNestedInputSchema).optional()
}).strict();

export const ShippingRateUncheckedUpdateWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateUncheckedUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingRateUncheckedUpdateManyWithoutCountryInputSchema: z.ZodType<Prisma.ShippingRateUncheckedUpdateManyWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryUpdateWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneRequiredWithoutEligibaleCountriesNestedInputSchema).optional()
}).strict();

export const FreeShippingCountryUncheckedUpdateWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryUncheckedUpdateManyWithoutCountryInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedUpdateManyWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingAddressUpdateWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutShippingAddressNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutShippingAddressesNestedInputSchema).optional()
}).strict();

export const ShippingAddressUncheckedUpdateWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutShippingAddressNestedInputSchema).optional()
}).strict();

export const ShippingAddressUncheckedUpdateManyWithoutCountryInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateManyWithoutCountryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderGroupCreateManyCouponInputSchema: z.ZodType<Prisma.OrderGroupCreateManyCouponInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderId: z.string(),
  storeId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartCreateManyCouponInputSchema: z.ZodType<Prisma.CartCreateManyCouponInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  shippingFees: z.number().optional(),
  subTotal: z.number(),
  total: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderGroupUpdateWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupUpdateWithoutCouponInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUpdateManyWithoutOrderGroupNestedInputSchema).optional(),
  order: z.lazy(() => OrderUpdateOneRequiredWithoutGroupsNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutOrderGroupsNestedInputSchema).optional()
}).strict();

export const OrderGroupUncheckedUpdateWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateWithoutCouponInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderGroupNestedInputSchema).optional()
}).strict();

export const OrderGroupUncheckedUpdateManyWithoutCouponInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateManyWithoutCouponInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateWithoutCouponsInputSchema: z.ZodType<Prisma.UserUpdateWithoutCouponsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCouponsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCouponsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  following: z.lazy(() => StoreUncheckedUpdateManyWithoutFollowersNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutCouponsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutCouponsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartUpdateWithoutCouponInputSchema: z.ZodType<Prisma.CartUpdateWithoutCouponInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutCartNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutCartNestedInputSchema).optional()
}).strict();

export const CartUncheckedUpdateWithoutCouponInputSchema: z.ZodType<Prisma.CartUncheckedUpdateWithoutCouponInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutCartNestedInputSchema).optional()
}).strict();

export const CartUncheckedUpdateManyWithoutCouponInputSchema: z.ZodType<Prisma.CartUncheckedUpdateManyWithoutCouponInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryCreateManyFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryCreateManyFreeShippingInput> = z.object({
  id: z.string().uuid().optional(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FreeShippingCountryUpdateWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryUpdateWithoutFreeShippingInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutFreeShippingCountriesNestedInputSchema).optional()
}).strict();

export const FreeShippingCountryUncheckedUpdateWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedUpdateWithoutFreeShippingInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FreeShippingCountryUncheckedUpdateManyWithoutFreeShippingInputSchema: z.ZodType<Prisma.FreeShippingCountryUncheckedUpdateManyWithoutFreeShippingInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCreateManyOfferTagInputSchema: z.ZodType<Prisma.ProductCreateManyOfferTagInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  subCategoryId: z.string()
}).strict();

export const ProductUpdateWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductUpdateWithoutOfferTagInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutOfferTagInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateManyWithoutOfferTagInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutOfferTagInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemCreateManyOrderGroupInputSchema: z.ZodType<Prisma.OrderItemCreateManyOrderGroupInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  price: z.number(),
  totalPrice: z.number(),
  status: z.lazy(() => ProductStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderItemUpdateWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemUpdateWithoutOrderGroupInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => EnumProductStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateWithoutOrderGroupInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => EnumProductStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateManyWithoutOrderGroupInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateManyWithoutOrderGroupInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductStatusSchema),z.lazy(() => EnumProductStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderGroupCreateManyOrderInputSchema: z.ZodType<Prisma.OrderGroupCreateManyOrderInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  storeId: z.string(),
  couponId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderGroupUpdateWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupUpdateWithoutOrderInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUpdateManyWithoutOrderGroupNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutOrderGroupsNestedInputSchema).optional(),
  coupon: z.lazy(() => CouponUpdateOneWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderGroupUncheckedUpdateWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateWithoutOrderInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderGroupNestedInputSchema).optional()
}).strict();

export const OrderGroupUncheckedUpdateManyWithoutOrderInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateManyWithoutOrderInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SizeCreateManyProductVariantInputSchema: z.ZodType<Prisma.SizeCreateManyProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  size: z.string(),
  quantity: z.number().int(),
  price: z.number(),
  discount: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductVariantImageCreateManyProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageCreateManyProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  order: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ColorCreateManyProductVariantInputSchema: z.ZodType<Prisma.ColorCreateManyProductVariantInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecCreateManyVariantInputSchema: z.ZodType<Prisma.SpecCreateManyVariantInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  productId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistCreateManyVariantInputSchema: z.ZodType<Prisma.WishlistCreateManyVariantInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  productId: z.string(),
  sizeId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SizeUpdateWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeUpdateWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutSizeNestedInputSchema).optional()
}).strict();

export const SizeUncheckedUpdateWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeUncheckedUpdateWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutSizeNestedInputSchema).optional()
}).strict();

export const SizeUncheckedUpdateManyWithoutProductVariantInputSchema: z.ZodType<Prisma.SizeUncheckedUpdateManyWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantImageUpdateWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageUpdateWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantImageUncheckedUpdateWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageUncheckedUpdateWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantImageUncheckedUpdateManyWithoutProductVariantInputSchema: z.ZodType<Prisma.ProductVariantImageUncheckedUpdateManyWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ColorUpdateWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorUpdateWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ColorUncheckedUpdateWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorUncheckedUpdateWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ColorUncheckedUpdateManyWithoutProductVariantInputSchema: z.ZodType<Prisma.ColorUncheckedUpdateManyWithoutProductVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecUpdateWithoutVariantInputSchema: z.ZodType<Prisma.SpecUpdateWithoutVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneWithoutSpecsNestedInputSchema).optional()
}).strict();

export const SpecUncheckedUpdateWithoutVariantInputSchema: z.ZodType<Prisma.SpecUncheckedUpdateWithoutVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecUncheckedUpdateManyWithoutVariantInputSchema: z.ZodType<Prisma.SpecUncheckedUpdateManyWithoutVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistUpdateWithoutVariantInputSchema: z.ZodType<Prisma.WishlistUpdateWithoutVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  size: z.lazy(() => SizeUpdateOneWithoutWishlistNestedInputSchema).optional()
}).strict();

export const WishlistUncheckedUpdateWithoutVariantInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateWithoutVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyWithoutVariantInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyWithoutVariantInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductVariantCreateManyProductInputSchema: z.ZodType<Prisma.ProductVariantCreateManyProductInput> = z.object({
  id: z.string().uuid().optional(),
  variantName: z.string(),
  variantDescription: z.string().optional().nullable(),
  variantImage: z.string(),
  slug: z.string(),
  isSale: z.boolean().optional(),
  saleEndDate: z.string().optional().nullable(),
  sku: z.string(),
  keywords: z.string(),
  sales: z.number().int().optional(),
  weight: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecCreateManyProductInputSchema: z.ZodType<Prisma.SpecCreateManyProductInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  value: z.string(),
  variantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuestionCreateManyProductInputSchema: z.ZodType<Prisma.QuestionCreateManyProductInput> = z.object({
  id: z.string().uuid().optional(),
  question: z.string(),
  answer: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewCreateManyProductInputSchema: z.ZodType<Prisma.ReviewCreateManyProductInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistCreateManyProductInputSchema: z.ZodType<Prisma.WishlistCreateManyProductInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  variantId: z.string(),
  sizeId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductVariantUpdateWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sizes: z.lazy(() => SizeUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  images: z.lazy(() => ProductVariantImageUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  colors: z.lazy(() => ColorUncheckedUpdateManyWithoutProductVariantNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutVariantNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutVariantNestedInputSchema).optional()
}).strict();

export const ProductVariantUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.ProductVariantUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  variantImage: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSale: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  saleEndDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecUpdateWithoutProductInputSchema: z.ZodType<Prisma.SpecUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.lazy(() => ProductVariantUpdateOneWithoutSpecsNestedInputSchema).optional()
}).strict();

export const SpecUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.SpecUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.SpecUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionUpdateWithoutProductInputSchema: z.ZodType<Prisma.QuestionUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewUpdateWithoutProductInputSchema: z.ZodType<Prisma.ReviewUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  images: z.lazy(() => ReviewImageUpdateManyWithoutReviewNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutReviewsNestedInputSchema).optional()
}).strict();

export const ReviewUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  images: z.lazy(() => ReviewImageUncheckedUpdateManyWithoutReviewNestedInputSchema).optional()
}).strict();

export const ReviewUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistUpdateWithoutProductInputSchema: z.ZodType<Prisma.WishlistUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  variant: z.lazy(() => ProductVariantUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  size: z.lazy(() => SizeUpdateOneWithoutWishlistNestedInputSchema).optional()
}).strict();

export const WishlistUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewImageCreateManyReviewInputSchema: z.ZodType<Prisma.ReviewImageCreateManyReviewInput> = z.object({
  id: z.string().uuid().optional(),
  url: z.string(),
  alt: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewImageUpdateWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageUpdateWithoutReviewInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewImageUncheckedUpdateWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageUncheckedUpdateWithoutReviewInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewImageUncheckedUpdateManyWithoutReviewInputSchema: z.ZodType<Prisma.ReviewImageUncheckedUpdateManyWithoutReviewInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alt: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderCreateManyShippingAddressInputSchema: z.ZodType<Prisma.OrderCreateManyShippingAddressInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderUpdateWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderUpdateWithoutShippingAddressInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  groups: z.lazy(() => OrderGroupUpdateManyWithoutOrderNestedInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUpdateOneWithoutOrderNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateWithoutShippingAddressInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  groups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutOrderNestedInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUncheckedUpdateOneWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateManyWithoutShippingAddressInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyWithoutShippingAddressInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistCreateManySizeInputSchema: z.ZodType<Prisma.WishlistCreateManySizeInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  productId: z.string(),
  variantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistUpdateWithoutSizeInputSchema: z.ZodType<Prisma.WishlistUpdateWithoutSizeInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  variant: z.lazy(() => ProductVariantUpdateOneRequiredWithoutWishlistNestedInputSchema).optional()
}).strict();

export const WishlistUncheckedUpdateWithoutSizeInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateWithoutSizeInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyWithoutSizeInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyWithoutSizeInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCreateManyStoreInputSchema: z.ZodType<Prisma.ProductCreateManyStoreInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  categoryId: z.string(),
  subCategoryId: z.string(),
  offerTagId: z.string().optional().nullable()
}).strict();

export const ShippingRateCreateManyStoreInputSchema: z.ZodType<Prisma.ShippingRateCreateManyStoreInput> = z.object({
  id: z.string().uuid().optional(),
  shippingService: z.string(),
  shippingFeePerItem: z.number(),
  shippingFeeForAdditionalItem: z.number(),
  shippingFeePerKg: z.number(),
  shippingFeeFixed: z.number(),
  deliveryTimeMin: z.number().int(),
  deliveryTimeMax: z.number().int(),
  returnPolicy: z.string(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CartItemCreateManyStoreInputSchema: z.ZodType<Prisma.CartItemCreateManyStoreInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string(),
  productSlug: z.string(),
  variantSlug: z.string(),
  sku: z.string(),
  name: z.string(),
  image: z.string(),
  size: z.string(),
  price: z.number(),
  quantity: z.number().int().optional(),
  shippingFee: z.number().optional(),
  totalPrice: z.number(),
  cartId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderGroupCreateManyStoreInputSchema: z.ZodType<Prisma.OrderGroupCreateManyStoreInput> = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => OrderStatusSchema).optional(),
  shippingService: z.string(),
  shippingDeliveryMin: z.number().int(),
  shippingDeliveryMax: z.number().int(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderId: z.string(),
  couponId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CouponCreateManyStoreInputSchema: z.ZodType<Prisma.CouponCreateManyStoreInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discount: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductUpdateWithoutStoreInputSchema: z.ZodType<Prisma.ProductUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  subCategory: z.lazy(() => SubCategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutStoreInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateManyWithoutStoreInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subCategoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ShippingRateUpdateWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutShippingRatesNestedInputSchema).optional()
}).strict();

export const ShippingRateUncheckedUpdateWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateUncheckedUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingRateUncheckedUpdateManyWithoutStoreInputSchema: z.ZodType<Prisma.ShippingRateUncheckedUpdateManyWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateWithoutFollowingInputSchema: z.ZodType<Prisma.UserUpdateWithoutFollowingInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUpdateManyWithoutUserNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFollowingInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFollowingInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  stores: z.lazy(() => StoreUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  cart: z.lazy(() => CartUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  shippingAddresses: z.lazy(() => ShippingAddressUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentDetailsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutFollowingInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutFollowingInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  picture: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartItemUpdateWithoutStoreInputSchema: z.ZodType<Prisma.CartItemUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cart: z.lazy(() => CartUpdateOneRequiredWithoutCartItemsNestedInputSchema).optional()
}).strict();

export const CartItemUncheckedUpdateWithoutStoreInputSchema: z.ZodType<Prisma.CartItemUncheckedUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cartId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CartItemUncheckedUpdateManyWithoutStoreInputSchema: z.ZodType<Prisma.CartItemUncheckedUpdateManyWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantSlug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sku: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFee: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cartId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderGroupUpdateWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUpdateManyWithoutOrderGroupNestedInputSchema).optional(),
  order: z.lazy(() => OrderUpdateOneRequiredWithoutGroupsNestedInputSchema).optional(),
  coupon: z.lazy(() => CouponUpdateOneWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderGroupUncheckedUpdateWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderGroupNestedInputSchema).optional()
}).strict();

export const OrderGroupUncheckedUpdateManyWithoutStoreInputSchema: z.ZodType<Prisma.OrderGroupUncheckedUpdateManyWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  shippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingDeliveryMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  couponId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CouponUpdateWithoutStoreInputSchema: z.ZodType<Prisma.CouponUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderGroupUpdateManyWithoutCouponNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutCouponsNestedInputSchema).optional(),
  carts: z.lazy(() => CartUpdateManyWithoutCouponNestedInputSchema).optional()
}).strict();

export const CouponUncheckedUpdateWithoutStoreInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutCouponNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutCouponsNestedInputSchema).optional(),
  carts: z.lazy(() => CartUncheckedUpdateManyWithoutCouponNestedInputSchema).optional()
}).strict();

export const CouponUncheckedUpdateManyWithoutStoreInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateManyWithoutStoreInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCreateManySubCategoryInputSchema: z.ZodType<Prisma.ProductCreateManySubCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  slug: z.string(),
  brand: z.string(),
  rating: z.number().optional(),
  sales: z.number().int().optional(),
  numReviews: z.number().int().optional(),
  shippingFeeMethod: z.lazy(() => ShippingFeeMethodSchema).optional(),
  views: z.number().int().optional(),
  freeShippingForAllCountries: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  storeId: z.string(),
  categoryId: z.string(),
  offerTagId: z.string().optional().nullable()
}).strict();

export const ProductUpdateWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductUpdateWithoutSubCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  freeShipping: z.lazy(() => FreeShippingUpdateOneWithoutProductNestedInputSchema).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  offerTag: z.lazy(() => OfferTagUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutSubCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  freeShipping: z.lazy(() => FreeShippingUncheckedUpdateOneWithoutProductNestedInputSchema).optional(),
  variants: z.lazy(() => ProductVariantUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  specs: z.lazy(() => SpecUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  reviews: z.lazy(() => ReviewUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  wishlist: z.lazy(() => WishlistUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateManyWithoutSubCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutSubCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  brand: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sales: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFeeMethod: z.union([ z.lazy(() => ShippingFeeMethodSchema),z.lazy(() => EnumShippingFeeMethodFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  freeShippingForAllCountries: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offerTagId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StoreCreateManyUserInputSchema: z.ZodType<Prisma.StoreCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string(),
  email: z.string(),
  phone: z.string(),
  url: z.string(),
  logo: z.string(),
  cover: z.string(),
  status: z.lazy(() => StoreStatusSchema).optional(),
  averageRating: z.number().optional(),
  numReviews: z.number().int().optional(),
  featured: z.boolean().optional(),
  returnPolicy: z.string().optional(),
  defaultShippingService: z.string().optional(),
  defaultShippingFeePerItem: z.number().optional(),
  defaultShippingFeeForAdditionalItem: z.number().optional(),
  defaultShippingFeePerKg: z.number().optional(),
  defaultShippingFeeFixed: z.number().optional(),
  defaultDeliveryTimeMin: z.number().int().optional(),
  defaultDeliveryTimeMax: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ReviewCreateManyUserInputSchema: z.ZodType<Prisma.ReviewCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  variant: z.string(),
  review: z.string(),
  rating: z.number(),
  color: z.string(),
  size: z.string(),
  quantity: z.string(),
  likes: z.number().int().optional(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShippingAddressCreateManyUserInputSchema: z.ZodType<Prisma.ShippingAddressCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional().nullable(),
  state: z.string(),
  city: z.string(),
  zip_code: z.string(),
  default: z.boolean().optional(),
  countryId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderCreateManyUserInputSchema: z.ZodType<Prisma.OrderCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  shippingFees: z.number(),
  subTotal: z.number(),
  total: z.number(),
  orderStatus: z.lazy(() => OrderStatusSchema).optional(),
  paymentStatus: z.lazy(() => PaymentStatusSchema).optional(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional().nullable(),
  shippingAddressId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WishlistCreateManyUserInputSchema: z.ZodType<Prisma.WishlistCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  productId: z.string(),
  variantId: z.string(),
  sizeId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentDetailsCreateManyUserInputSchema: z.ZodType<Prisma.PaymentDetailsCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  paymentInetntId: z.string(),
  paymentMethod: z.string(),
  status: z.string(),
  amount: z.number(),
  currency: z.string(),
  orderId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const StoreUpdateWithoutUserInputSchema: z.ZodType<Prisma.StoreUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  followers: z.lazy(() => UserUncheckedUpdateManyWithoutFollowingNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StoreUpdateWithoutFollowersInputSchema: z.ZodType<Prisma.StoreUpdateWithoutFollowersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutStoresNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUpdateManyWithoutStoreNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateWithoutFollowersInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateWithoutFollowersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  shippingRates: z.lazy(() => ShippingRateUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  cartItems: z.lazy(() => CartItemUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  orderGroups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutStoreNestedInputSchema).optional(),
  coupons: z.lazy(() => CouponUncheckedUpdateManyWithoutStoreNestedInputSchema).optional()
}).strict();

export const StoreUncheckedUpdateManyWithoutFollowersInputSchema: z.ZodType<Prisma.StoreUncheckedUpdateManyWithoutFollowersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cover: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => StoreStatusSchema),z.lazy(() => EnumStoreStatusFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  numReviews: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  returnPolicy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingService: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeForAdditionalItem: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeePerKg: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultShippingFeeFixed: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMin: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  defaultDeliveryTimeMax: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReviewUpdateWithoutUserInputSchema: z.ZodType<Prisma.ReviewUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  images: z.lazy(() => ReviewImageUpdateManyWithoutReviewNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutReviewsNestedInputSchema).optional()
}).strict();

export const ReviewUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  images: z.lazy(() => ReviewImageUncheckedUpdateManyWithoutReviewNestedInputSchema).optional()
}).strict();

export const ReviewUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.ReviewUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variant: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  review: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShippingAddressUpdateWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutShippingAddressNestedInputSchema).optional(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutShippingAddressesNestedInputSchema).optional()
}).strict();

export const ShippingAddressUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutShippingAddressNestedInputSchema).optional()
}).strict();

export const ShippingAddressUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.ShippingAddressUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address1: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zip_code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  default: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderUpdateWithoutUserInputSchema: z.ZodType<Prisma.OrderUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  groups: z.lazy(() => OrderGroupUpdateManyWithoutOrderNestedInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUpdateOneWithoutOrderNestedInputSchema).optional(),
  shippingAddress: z.lazy(() => ShippingAddressUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  groups: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutOrderNestedInputSchema).optional(),
  paymentDetails: z.lazy(() => PaymentDetailsUncheckedUpdateOneWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shippingFees: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  subTotal: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  orderStatus: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentStatus: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NullableEnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  shippingAddressId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistUpdateWithoutUserInputSchema: z.ZodType<Prisma.WishlistUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  variant: z.lazy(() => ProductVariantUpdateOneRequiredWithoutWishlistNestedInputSchema).optional(),
  size: z.lazy(() => SizeUpdateOneWithoutWishlistNestedInputSchema).optional()
}).strict();

export const WishlistUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WishlistUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.WishlistUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sizeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentDetailsUpdateWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.lazy(() => OrderUpdateOneRequiredWithoutPaymentDetailsNestedInputSchema).optional()
}).strict();

export const PaymentDetailsUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentDetailsUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PaymentDetailsUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentInetntId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  paymentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CouponUpdateWithoutUsersInputSchema: z.ZodType<Prisma.CouponUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  store: z.lazy(() => StoreUpdateOneRequiredWithoutCouponsNestedInputSchema).optional(),
  orders: z.lazy(() => OrderGroupUpdateManyWithoutCouponNestedInputSchema).optional(),
  carts: z.lazy(() => CartUpdateManyWithoutCouponNestedInputSchema).optional()
}).strict();

export const CouponUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderGroupUncheckedUpdateManyWithoutCouponNestedInputSchema).optional(),
  carts: z.lazy(() => CartUncheckedUpdateManyWithoutCouponNestedInputSchema).optional()
}).strict();

export const CouponUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.CouponUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  storeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const CartFindFirstArgsSchema: z.ZodType<Prisma.CartFindFirstArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  where: CartWhereInputSchema.optional(),
  orderBy: z.union([ CartOrderByWithRelationInputSchema.array(),CartOrderByWithRelationInputSchema ]).optional(),
  cursor: CartWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CartScalarFieldEnumSchema,CartScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CartFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CartFindFirstOrThrowArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  where: CartWhereInputSchema.optional(),
  orderBy: z.union([ CartOrderByWithRelationInputSchema.array(),CartOrderByWithRelationInputSchema ]).optional(),
  cursor: CartWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CartScalarFieldEnumSchema,CartScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CartFindManyArgsSchema: z.ZodType<Prisma.CartFindManyArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  where: CartWhereInputSchema.optional(),
  orderBy: z.union([ CartOrderByWithRelationInputSchema.array(),CartOrderByWithRelationInputSchema ]).optional(),
  cursor: CartWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CartScalarFieldEnumSchema,CartScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CartAggregateArgsSchema: z.ZodType<Prisma.CartAggregateArgs> = z.object({
  where: CartWhereInputSchema.optional(),
  orderBy: z.union([ CartOrderByWithRelationInputSchema.array(),CartOrderByWithRelationInputSchema ]).optional(),
  cursor: CartWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CartGroupByArgsSchema: z.ZodType<Prisma.CartGroupByArgs> = z.object({
  where: CartWhereInputSchema.optional(),
  orderBy: z.union([ CartOrderByWithAggregationInputSchema.array(),CartOrderByWithAggregationInputSchema ]).optional(),
  by: CartScalarFieldEnumSchema.array(),
  having: CartScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CartFindUniqueArgsSchema: z.ZodType<Prisma.CartFindUniqueArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  where: CartWhereUniqueInputSchema,
}).strict() ;

export const CartFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CartFindUniqueOrThrowArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  where: CartWhereUniqueInputSchema,
}).strict() ;

export const CartItemFindFirstArgsSchema: z.ZodType<Prisma.CartItemFindFirstArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  where: CartItemWhereInputSchema.optional(),
  orderBy: z.union([ CartItemOrderByWithRelationInputSchema.array(),CartItemOrderByWithRelationInputSchema ]).optional(),
  cursor: CartItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CartItemScalarFieldEnumSchema,CartItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CartItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CartItemFindFirstOrThrowArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  where: CartItemWhereInputSchema.optional(),
  orderBy: z.union([ CartItemOrderByWithRelationInputSchema.array(),CartItemOrderByWithRelationInputSchema ]).optional(),
  cursor: CartItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CartItemScalarFieldEnumSchema,CartItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CartItemFindManyArgsSchema: z.ZodType<Prisma.CartItemFindManyArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  where: CartItemWhereInputSchema.optional(),
  orderBy: z.union([ CartItemOrderByWithRelationInputSchema.array(),CartItemOrderByWithRelationInputSchema ]).optional(),
  cursor: CartItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CartItemScalarFieldEnumSchema,CartItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CartItemAggregateArgsSchema: z.ZodType<Prisma.CartItemAggregateArgs> = z.object({
  where: CartItemWhereInputSchema.optional(),
  orderBy: z.union([ CartItemOrderByWithRelationInputSchema.array(),CartItemOrderByWithRelationInputSchema ]).optional(),
  cursor: CartItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CartItemGroupByArgsSchema: z.ZodType<Prisma.CartItemGroupByArgs> = z.object({
  where: CartItemWhereInputSchema.optional(),
  orderBy: z.union([ CartItemOrderByWithAggregationInputSchema.array(),CartItemOrderByWithAggregationInputSchema ]).optional(),
  by: CartItemScalarFieldEnumSchema.array(),
  having: CartItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CartItemFindUniqueArgsSchema: z.ZodType<Prisma.CartItemFindUniqueArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  where: CartItemWhereUniqueInputSchema,
}).strict() ;

export const CartItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CartItemFindUniqueOrThrowArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  where: CartItemWhereUniqueInputSchema,
}).strict() ;

export const CategoryFindFirstArgsSchema: z.ZodType<Prisma.CategoryFindFirstArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CategoryFindFirstOrThrowArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryFindManyArgsSchema: z.ZodType<Prisma.CategoryFindManyArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryAggregateArgsSchema: z.ZodType<Prisma.CategoryAggregateArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CategoryGroupByArgsSchema: z.ZodType<Prisma.CategoryGroupByArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithAggregationInputSchema.array(),CategoryOrderByWithAggregationInputSchema ]).optional(),
  by: CategoryScalarFieldEnumSchema.array(),
  having: CategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CategoryFindUniqueArgsSchema: z.ZodType<Prisma.CategoryFindUniqueArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CategoryFindUniqueOrThrowArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const ColorFindFirstArgsSchema: z.ZodType<Prisma.ColorFindFirstArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  where: ColorWhereInputSchema.optional(),
  orderBy: z.union([ ColorOrderByWithRelationInputSchema.array(),ColorOrderByWithRelationInputSchema ]).optional(),
  cursor: ColorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ColorScalarFieldEnumSchema,ColorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ColorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ColorFindFirstOrThrowArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  where: ColorWhereInputSchema.optional(),
  orderBy: z.union([ ColorOrderByWithRelationInputSchema.array(),ColorOrderByWithRelationInputSchema ]).optional(),
  cursor: ColorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ColorScalarFieldEnumSchema,ColorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ColorFindManyArgsSchema: z.ZodType<Prisma.ColorFindManyArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  where: ColorWhereInputSchema.optional(),
  orderBy: z.union([ ColorOrderByWithRelationInputSchema.array(),ColorOrderByWithRelationInputSchema ]).optional(),
  cursor: ColorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ColorScalarFieldEnumSchema,ColorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ColorAggregateArgsSchema: z.ZodType<Prisma.ColorAggregateArgs> = z.object({
  where: ColorWhereInputSchema.optional(),
  orderBy: z.union([ ColorOrderByWithRelationInputSchema.array(),ColorOrderByWithRelationInputSchema ]).optional(),
  cursor: ColorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ColorGroupByArgsSchema: z.ZodType<Prisma.ColorGroupByArgs> = z.object({
  where: ColorWhereInputSchema.optional(),
  orderBy: z.union([ ColorOrderByWithAggregationInputSchema.array(),ColorOrderByWithAggregationInputSchema ]).optional(),
  by: ColorScalarFieldEnumSchema.array(),
  having: ColorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ColorFindUniqueArgsSchema: z.ZodType<Prisma.ColorFindUniqueArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  where: ColorWhereUniqueInputSchema,
}).strict() ;

export const ColorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ColorFindUniqueOrThrowArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  where: ColorWhereUniqueInputSchema,
}).strict() ;

export const CountryFindFirstArgsSchema: z.ZodType<Prisma.CountryFindFirstArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CountryFindFirstOrThrowArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryFindManyArgsSchema: z.ZodType<Prisma.CountryFindManyArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryAggregateArgsSchema: z.ZodType<Prisma.CountryAggregateArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountryGroupByArgsSchema: z.ZodType<Prisma.CountryGroupByArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithAggregationInputSchema.array(),CountryOrderByWithAggregationInputSchema ]).optional(),
  by: CountryScalarFieldEnumSchema.array(),
  having: CountryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountryFindUniqueArgsSchema: z.ZodType<Prisma.CountryFindUniqueArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CountryFindUniqueOrThrowArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CouponFindFirstArgsSchema: z.ZodType<Prisma.CouponFindFirstArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  where: CouponWhereInputSchema.optional(),
  orderBy: z.union([ CouponOrderByWithRelationInputSchema.array(),CouponOrderByWithRelationInputSchema ]).optional(),
  cursor: CouponWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CouponScalarFieldEnumSchema,CouponScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CouponFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CouponFindFirstOrThrowArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  where: CouponWhereInputSchema.optional(),
  orderBy: z.union([ CouponOrderByWithRelationInputSchema.array(),CouponOrderByWithRelationInputSchema ]).optional(),
  cursor: CouponWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CouponScalarFieldEnumSchema,CouponScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CouponFindManyArgsSchema: z.ZodType<Prisma.CouponFindManyArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  where: CouponWhereInputSchema.optional(),
  orderBy: z.union([ CouponOrderByWithRelationInputSchema.array(),CouponOrderByWithRelationInputSchema ]).optional(),
  cursor: CouponWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CouponScalarFieldEnumSchema,CouponScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CouponAggregateArgsSchema: z.ZodType<Prisma.CouponAggregateArgs> = z.object({
  where: CouponWhereInputSchema.optional(),
  orderBy: z.union([ CouponOrderByWithRelationInputSchema.array(),CouponOrderByWithRelationInputSchema ]).optional(),
  cursor: CouponWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CouponGroupByArgsSchema: z.ZodType<Prisma.CouponGroupByArgs> = z.object({
  where: CouponWhereInputSchema.optional(),
  orderBy: z.union([ CouponOrderByWithAggregationInputSchema.array(),CouponOrderByWithAggregationInputSchema ]).optional(),
  by: CouponScalarFieldEnumSchema.array(),
  having: CouponScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CouponFindUniqueArgsSchema: z.ZodType<Prisma.CouponFindUniqueArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  where: CouponWhereUniqueInputSchema,
}).strict() ;

export const CouponFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CouponFindUniqueOrThrowArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  where: CouponWhereUniqueInputSchema,
}).strict() ;

export const FreeShippingCountryFindFirstArgsSchema: z.ZodType<Prisma.FreeShippingCountryFindFirstArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  where: FreeShippingCountryWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingCountryOrderByWithRelationInputSchema.array(),FreeShippingCountryOrderByWithRelationInputSchema ]).optional(),
  cursor: FreeShippingCountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FreeShippingCountryScalarFieldEnumSchema,FreeShippingCountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FreeShippingCountryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FreeShippingCountryFindFirstOrThrowArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  where: FreeShippingCountryWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingCountryOrderByWithRelationInputSchema.array(),FreeShippingCountryOrderByWithRelationInputSchema ]).optional(),
  cursor: FreeShippingCountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FreeShippingCountryScalarFieldEnumSchema,FreeShippingCountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FreeShippingCountryFindManyArgsSchema: z.ZodType<Prisma.FreeShippingCountryFindManyArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  where: FreeShippingCountryWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingCountryOrderByWithRelationInputSchema.array(),FreeShippingCountryOrderByWithRelationInputSchema ]).optional(),
  cursor: FreeShippingCountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FreeShippingCountryScalarFieldEnumSchema,FreeShippingCountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FreeShippingCountryAggregateArgsSchema: z.ZodType<Prisma.FreeShippingCountryAggregateArgs> = z.object({
  where: FreeShippingCountryWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingCountryOrderByWithRelationInputSchema.array(),FreeShippingCountryOrderByWithRelationInputSchema ]).optional(),
  cursor: FreeShippingCountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FreeShippingCountryGroupByArgsSchema: z.ZodType<Prisma.FreeShippingCountryGroupByArgs> = z.object({
  where: FreeShippingCountryWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingCountryOrderByWithAggregationInputSchema.array(),FreeShippingCountryOrderByWithAggregationInputSchema ]).optional(),
  by: FreeShippingCountryScalarFieldEnumSchema.array(),
  having: FreeShippingCountryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FreeShippingCountryFindUniqueArgsSchema: z.ZodType<Prisma.FreeShippingCountryFindUniqueArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  where: FreeShippingCountryWhereUniqueInputSchema,
}).strict() ;

export const FreeShippingCountryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FreeShippingCountryFindUniqueOrThrowArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  where: FreeShippingCountryWhereUniqueInputSchema,
}).strict() ;

export const FreeShippingFindFirstArgsSchema: z.ZodType<Prisma.FreeShippingFindFirstArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  where: FreeShippingWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingOrderByWithRelationInputSchema.array(),FreeShippingOrderByWithRelationInputSchema ]).optional(),
  cursor: FreeShippingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FreeShippingScalarFieldEnumSchema,FreeShippingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FreeShippingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FreeShippingFindFirstOrThrowArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  where: FreeShippingWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingOrderByWithRelationInputSchema.array(),FreeShippingOrderByWithRelationInputSchema ]).optional(),
  cursor: FreeShippingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FreeShippingScalarFieldEnumSchema,FreeShippingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FreeShippingFindManyArgsSchema: z.ZodType<Prisma.FreeShippingFindManyArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  where: FreeShippingWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingOrderByWithRelationInputSchema.array(),FreeShippingOrderByWithRelationInputSchema ]).optional(),
  cursor: FreeShippingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FreeShippingScalarFieldEnumSchema,FreeShippingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FreeShippingAggregateArgsSchema: z.ZodType<Prisma.FreeShippingAggregateArgs> = z.object({
  where: FreeShippingWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingOrderByWithRelationInputSchema.array(),FreeShippingOrderByWithRelationInputSchema ]).optional(),
  cursor: FreeShippingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FreeShippingGroupByArgsSchema: z.ZodType<Prisma.FreeShippingGroupByArgs> = z.object({
  where: FreeShippingWhereInputSchema.optional(),
  orderBy: z.union([ FreeShippingOrderByWithAggregationInputSchema.array(),FreeShippingOrderByWithAggregationInputSchema ]).optional(),
  by: FreeShippingScalarFieldEnumSchema.array(),
  having: FreeShippingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FreeShippingFindUniqueArgsSchema: z.ZodType<Prisma.FreeShippingFindUniqueArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  where: FreeShippingWhereUniqueInputSchema,
}).strict() ;

export const FreeShippingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FreeShippingFindUniqueOrThrowArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  where: FreeShippingWhereUniqueInputSchema,
}).strict() ;

export const OfferTagFindFirstArgsSchema: z.ZodType<Prisma.OfferTagFindFirstArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  where: OfferTagWhereInputSchema.optional(),
  orderBy: z.union([ OfferTagOrderByWithRelationInputSchema.array(),OfferTagOrderByWithRelationInputSchema ]).optional(),
  cursor: OfferTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OfferTagScalarFieldEnumSchema,OfferTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OfferTagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OfferTagFindFirstOrThrowArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  where: OfferTagWhereInputSchema.optional(),
  orderBy: z.union([ OfferTagOrderByWithRelationInputSchema.array(),OfferTagOrderByWithRelationInputSchema ]).optional(),
  cursor: OfferTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OfferTagScalarFieldEnumSchema,OfferTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OfferTagFindManyArgsSchema: z.ZodType<Prisma.OfferTagFindManyArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  where: OfferTagWhereInputSchema.optional(),
  orderBy: z.union([ OfferTagOrderByWithRelationInputSchema.array(),OfferTagOrderByWithRelationInputSchema ]).optional(),
  cursor: OfferTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OfferTagScalarFieldEnumSchema,OfferTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OfferTagAggregateArgsSchema: z.ZodType<Prisma.OfferTagAggregateArgs> = z.object({
  where: OfferTagWhereInputSchema.optional(),
  orderBy: z.union([ OfferTagOrderByWithRelationInputSchema.array(),OfferTagOrderByWithRelationInputSchema ]).optional(),
  cursor: OfferTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OfferTagGroupByArgsSchema: z.ZodType<Prisma.OfferTagGroupByArgs> = z.object({
  where: OfferTagWhereInputSchema.optional(),
  orderBy: z.union([ OfferTagOrderByWithAggregationInputSchema.array(),OfferTagOrderByWithAggregationInputSchema ]).optional(),
  by: OfferTagScalarFieldEnumSchema.array(),
  having: OfferTagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OfferTagFindUniqueArgsSchema: z.ZodType<Prisma.OfferTagFindUniqueArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  where: OfferTagWhereUniqueInputSchema,
}).strict() ;

export const OfferTagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OfferTagFindUniqueOrThrowArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  where: OfferTagWhereUniqueInputSchema,
}).strict() ;

export const OrderGroupFindFirstArgsSchema: z.ZodType<Prisma.OrderGroupFindFirstArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  where: OrderGroupWhereInputSchema.optional(),
  orderBy: z.union([ OrderGroupOrderByWithRelationInputSchema.array(),OrderGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderGroupScalarFieldEnumSchema,OrderGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderGroupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrderGroupFindFirstOrThrowArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  where: OrderGroupWhereInputSchema.optional(),
  orderBy: z.union([ OrderGroupOrderByWithRelationInputSchema.array(),OrderGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderGroupScalarFieldEnumSchema,OrderGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderGroupFindManyArgsSchema: z.ZodType<Prisma.OrderGroupFindManyArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  where: OrderGroupWhereInputSchema.optional(),
  orderBy: z.union([ OrderGroupOrderByWithRelationInputSchema.array(),OrderGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderGroupScalarFieldEnumSchema,OrderGroupScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderGroupAggregateArgsSchema: z.ZodType<Prisma.OrderGroupAggregateArgs> = z.object({
  where: OrderGroupWhereInputSchema.optional(),
  orderBy: z.union([ OrderGroupOrderByWithRelationInputSchema.array(),OrderGroupOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderGroupWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderGroupGroupByArgsSchema: z.ZodType<Prisma.OrderGroupGroupByArgs> = z.object({
  where: OrderGroupWhereInputSchema.optional(),
  orderBy: z.union([ OrderGroupOrderByWithAggregationInputSchema.array(),OrderGroupOrderByWithAggregationInputSchema ]).optional(),
  by: OrderGroupScalarFieldEnumSchema.array(),
  having: OrderGroupScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderGroupFindUniqueArgsSchema: z.ZodType<Prisma.OrderGroupFindUniqueArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  where: OrderGroupWhereUniqueInputSchema,
}).strict() ;

export const OrderGroupFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrderGroupFindUniqueOrThrowArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  where: OrderGroupWhereUniqueInputSchema,
}).strict() ;

export const OrderItemFindFirstArgsSchema: z.ZodType<Prisma.OrderItemFindFirstArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithRelationInputSchema.array(),OrderItemOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderItemScalarFieldEnumSchema,OrderItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrderItemFindFirstOrThrowArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithRelationInputSchema.array(),OrderItemOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderItemScalarFieldEnumSchema,OrderItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderItemFindManyArgsSchema: z.ZodType<Prisma.OrderItemFindManyArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithRelationInputSchema.array(),OrderItemOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderItemScalarFieldEnumSchema,OrderItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderItemAggregateArgsSchema: z.ZodType<Prisma.OrderItemAggregateArgs> = z.object({
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithRelationInputSchema.array(),OrderItemOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderItemGroupByArgsSchema: z.ZodType<Prisma.OrderItemGroupByArgs> = z.object({
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithAggregationInputSchema.array(),OrderItemOrderByWithAggregationInputSchema ]).optional(),
  by: OrderItemScalarFieldEnumSchema.array(),
  having: OrderItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderItemFindUniqueArgsSchema: z.ZodType<Prisma.OrderItemFindUniqueArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
}).strict() ;

export const OrderItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrderItemFindUniqueOrThrowArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
}).strict() ;

export const OrderFindFirstArgsSchema: z.ZodType<Prisma.OrderFindFirstArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithRelationInputSchema.array(),OrderOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderScalarFieldEnumSchema,OrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrderFindFirstOrThrowArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithRelationInputSchema.array(),OrderOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderScalarFieldEnumSchema,OrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderFindManyArgsSchema: z.ZodType<Prisma.OrderFindManyArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithRelationInputSchema.array(),OrderOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderScalarFieldEnumSchema,OrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderAggregateArgsSchema: z.ZodType<Prisma.OrderAggregateArgs> = z.object({
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithRelationInputSchema.array(),OrderOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderGroupByArgsSchema: z.ZodType<Prisma.OrderGroupByArgs> = z.object({
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithAggregationInputSchema.array(),OrderOrderByWithAggregationInputSchema ]).optional(),
  by: OrderScalarFieldEnumSchema.array(),
  having: OrderScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderFindUniqueArgsSchema: z.ZodType<Prisma.OrderFindUniqueArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
}).strict() ;

export const OrderFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrderFindUniqueOrThrowArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
}).strict() ;

export const PaymentDetailsFindFirstArgsSchema: z.ZodType<Prisma.PaymentDetailsFindFirstArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  where: PaymentDetailsWhereInputSchema.optional(),
  orderBy: z.union([ PaymentDetailsOrderByWithRelationInputSchema.array(),PaymentDetailsOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentDetailsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentDetailsScalarFieldEnumSchema,PaymentDetailsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentDetailsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PaymentDetailsFindFirstOrThrowArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  where: PaymentDetailsWhereInputSchema.optional(),
  orderBy: z.union([ PaymentDetailsOrderByWithRelationInputSchema.array(),PaymentDetailsOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentDetailsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentDetailsScalarFieldEnumSchema,PaymentDetailsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentDetailsFindManyArgsSchema: z.ZodType<Prisma.PaymentDetailsFindManyArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  where: PaymentDetailsWhereInputSchema.optional(),
  orderBy: z.union([ PaymentDetailsOrderByWithRelationInputSchema.array(),PaymentDetailsOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentDetailsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentDetailsScalarFieldEnumSchema,PaymentDetailsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentDetailsAggregateArgsSchema: z.ZodType<Prisma.PaymentDetailsAggregateArgs> = z.object({
  where: PaymentDetailsWhereInputSchema.optional(),
  orderBy: z.union([ PaymentDetailsOrderByWithRelationInputSchema.array(),PaymentDetailsOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentDetailsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PaymentDetailsGroupByArgsSchema: z.ZodType<Prisma.PaymentDetailsGroupByArgs> = z.object({
  where: PaymentDetailsWhereInputSchema.optional(),
  orderBy: z.union([ PaymentDetailsOrderByWithAggregationInputSchema.array(),PaymentDetailsOrderByWithAggregationInputSchema ]).optional(),
  by: PaymentDetailsScalarFieldEnumSchema.array(),
  having: PaymentDetailsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PaymentDetailsFindUniqueArgsSchema: z.ZodType<Prisma.PaymentDetailsFindUniqueArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  where: PaymentDetailsWhereUniqueInputSchema,
}).strict() ;

export const PaymentDetailsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PaymentDetailsFindUniqueOrThrowArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  where: PaymentDetailsWhereUniqueInputSchema,
}).strict() ;

export const ProductVariantFindFirstArgsSchema: z.ZodType<Prisma.ProductVariantFindFirstArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  where: ProductVariantWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantOrderByWithRelationInputSchema.array(),ProductVariantOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductVariantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductVariantScalarFieldEnumSchema,ProductVariantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductVariantFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProductVariantFindFirstOrThrowArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  where: ProductVariantWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantOrderByWithRelationInputSchema.array(),ProductVariantOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductVariantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductVariantScalarFieldEnumSchema,ProductVariantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductVariantFindManyArgsSchema: z.ZodType<Prisma.ProductVariantFindManyArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  where: ProductVariantWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantOrderByWithRelationInputSchema.array(),ProductVariantOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductVariantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductVariantScalarFieldEnumSchema,ProductVariantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductVariantAggregateArgsSchema: z.ZodType<Prisma.ProductVariantAggregateArgs> = z.object({
  where: ProductVariantWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantOrderByWithRelationInputSchema.array(),ProductVariantOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductVariantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductVariantGroupByArgsSchema: z.ZodType<Prisma.ProductVariantGroupByArgs> = z.object({
  where: ProductVariantWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantOrderByWithAggregationInputSchema.array(),ProductVariantOrderByWithAggregationInputSchema ]).optional(),
  by: ProductVariantScalarFieldEnumSchema.array(),
  having: ProductVariantScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductVariantFindUniqueArgsSchema: z.ZodType<Prisma.ProductVariantFindUniqueArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  where: ProductVariantWhereUniqueInputSchema,
}).strict() ;

export const ProductVariantFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProductVariantFindUniqueOrThrowArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  where: ProductVariantWhereUniqueInputSchema,
}).strict() ;

export const ProductFindFirstArgsSchema: z.ZodType<Prisma.ProductFindFirstArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProductFindFirstOrThrowArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindManyArgsSchema: z.ZodType<Prisma.ProductFindManyArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductAggregateArgsSchema: z.ZodType<Prisma.ProductAggregateArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductGroupByArgsSchema: z.ZodType<Prisma.ProductGroupByArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithAggregationInputSchema.array(),ProductOrderByWithAggregationInputSchema ]).optional(),
  by: ProductScalarFieldEnumSchema.array(),
  having: ProductScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductFindUniqueArgsSchema: z.ZodType<Prisma.ProductFindUniqueArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProductFindUniqueOrThrowArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductVariantImageFindFirstArgsSchema: z.ZodType<Prisma.ProductVariantImageFindFirstArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  where: ProductVariantImageWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantImageOrderByWithRelationInputSchema.array(),ProductVariantImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductVariantImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductVariantImageScalarFieldEnumSchema,ProductVariantImageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductVariantImageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProductVariantImageFindFirstOrThrowArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  where: ProductVariantImageWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantImageOrderByWithRelationInputSchema.array(),ProductVariantImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductVariantImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductVariantImageScalarFieldEnumSchema,ProductVariantImageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductVariantImageFindManyArgsSchema: z.ZodType<Prisma.ProductVariantImageFindManyArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  where: ProductVariantImageWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantImageOrderByWithRelationInputSchema.array(),ProductVariantImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductVariantImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductVariantImageScalarFieldEnumSchema,ProductVariantImageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductVariantImageAggregateArgsSchema: z.ZodType<Prisma.ProductVariantImageAggregateArgs> = z.object({
  where: ProductVariantImageWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantImageOrderByWithRelationInputSchema.array(),ProductVariantImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductVariantImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductVariantImageGroupByArgsSchema: z.ZodType<Prisma.ProductVariantImageGroupByArgs> = z.object({
  where: ProductVariantImageWhereInputSchema.optional(),
  orderBy: z.union([ ProductVariantImageOrderByWithAggregationInputSchema.array(),ProductVariantImageOrderByWithAggregationInputSchema ]).optional(),
  by: ProductVariantImageScalarFieldEnumSchema.array(),
  having: ProductVariantImageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductVariantImageFindUniqueArgsSchema: z.ZodType<Prisma.ProductVariantImageFindUniqueArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  where: ProductVariantImageWhereUniqueInputSchema,
}).strict() ;

export const ProductVariantImageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProductVariantImageFindUniqueOrThrowArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  where: ProductVariantImageWhereUniqueInputSchema,
}).strict() ;

export const QuestionFindFirstArgsSchema: z.ZodType<Prisma.QuestionFindFirstArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithRelationInputSchema.array(),QuestionOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionScalarFieldEnumSchema,QuestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.QuestionFindFirstOrThrowArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithRelationInputSchema.array(),QuestionOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionScalarFieldEnumSchema,QuestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionFindManyArgsSchema: z.ZodType<Prisma.QuestionFindManyArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithRelationInputSchema.array(),QuestionOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionScalarFieldEnumSchema,QuestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionAggregateArgsSchema: z.ZodType<Prisma.QuestionAggregateArgs> = z.object({
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithRelationInputSchema.array(),QuestionOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QuestionGroupByArgsSchema: z.ZodType<Prisma.QuestionGroupByArgs> = z.object({
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithAggregationInputSchema.array(),QuestionOrderByWithAggregationInputSchema ]).optional(),
  by: QuestionScalarFieldEnumSchema.array(),
  having: QuestionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QuestionFindUniqueArgsSchema: z.ZodType<Prisma.QuestionFindUniqueArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereUniqueInputSchema,
}).strict() ;

export const QuestionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.QuestionFindUniqueOrThrowArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereUniqueInputSchema,
}).strict() ;

export const ReviewImageFindFirstArgsSchema: z.ZodType<Prisma.ReviewImageFindFirstArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  where: ReviewImageWhereInputSchema.optional(),
  orderBy: z.union([ ReviewImageOrderByWithRelationInputSchema.array(),ReviewImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ReviewImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReviewImageScalarFieldEnumSchema,ReviewImageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReviewImageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ReviewImageFindFirstOrThrowArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  where: ReviewImageWhereInputSchema.optional(),
  orderBy: z.union([ ReviewImageOrderByWithRelationInputSchema.array(),ReviewImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ReviewImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReviewImageScalarFieldEnumSchema,ReviewImageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReviewImageFindManyArgsSchema: z.ZodType<Prisma.ReviewImageFindManyArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  where: ReviewImageWhereInputSchema.optional(),
  orderBy: z.union([ ReviewImageOrderByWithRelationInputSchema.array(),ReviewImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ReviewImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReviewImageScalarFieldEnumSchema,ReviewImageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReviewImageAggregateArgsSchema: z.ZodType<Prisma.ReviewImageAggregateArgs> = z.object({
  where: ReviewImageWhereInputSchema.optional(),
  orderBy: z.union([ ReviewImageOrderByWithRelationInputSchema.array(),ReviewImageOrderByWithRelationInputSchema ]).optional(),
  cursor: ReviewImageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReviewImageGroupByArgsSchema: z.ZodType<Prisma.ReviewImageGroupByArgs> = z.object({
  where: ReviewImageWhereInputSchema.optional(),
  orderBy: z.union([ ReviewImageOrderByWithAggregationInputSchema.array(),ReviewImageOrderByWithAggregationInputSchema ]).optional(),
  by: ReviewImageScalarFieldEnumSchema.array(),
  having: ReviewImageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReviewImageFindUniqueArgsSchema: z.ZodType<Prisma.ReviewImageFindUniqueArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  where: ReviewImageWhereUniqueInputSchema,
}).strict() ;

export const ReviewImageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ReviewImageFindUniqueOrThrowArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  where: ReviewImageWhereUniqueInputSchema,
}).strict() ;

export const ReviewFindFirstArgsSchema: z.ZodType<Prisma.ReviewFindFirstArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  where: ReviewWhereInputSchema.optional(),
  orderBy: z.union([ ReviewOrderByWithRelationInputSchema.array(),ReviewOrderByWithRelationInputSchema ]).optional(),
  cursor: ReviewWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReviewScalarFieldEnumSchema,ReviewScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReviewFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ReviewFindFirstOrThrowArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  where: ReviewWhereInputSchema.optional(),
  orderBy: z.union([ ReviewOrderByWithRelationInputSchema.array(),ReviewOrderByWithRelationInputSchema ]).optional(),
  cursor: ReviewWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReviewScalarFieldEnumSchema,ReviewScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReviewFindManyArgsSchema: z.ZodType<Prisma.ReviewFindManyArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  where: ReviewWhereInputSchema.optional(),
  orderBy: z.union([ ReviewOrderByWithRelationInputSchema.array(),ReviewOrderByWithRelationInputSchema ]).optional(),
  cursor: ReviewWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReviewScalarFieldEnumSchema,ReviewScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReviewAggregateArgsSchema: z.ZodType<Prisma.ReviewAggregateArgs> = z.object({
  where: ReviewWhereInputSchema.optional(),
  orderBy: z.union([ ReviewOrderByWithRelationInputSchema.array(),ReviewOrderByWithRelationInputSchema ]).optional(),
  cursor: ReviewWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReviewGroupByArgsSchema: z.ZodType<Prisma.ReviewGroupByArgs> = z.object({
  where: ReviewWhereInputSchema.optional(),
  orderBy: z.union([ ReviewOrderByWithAggregationInputSchema.array(),ReviewOrderByWithAggregationInputSchema ]).optional(),
  by: ReviewScalarFieldEnumSchema.array(),
  having: ReviewScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReviewFindUniqueArgsSchema: z.ZodType<Prisma.ReviewFindUniqueArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  where: ReviewWhereUniqueInputSchema,
}).strict() ;

export const ReviewFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ReviewFindUniqueOrThrowArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  where: ReviewWhereUniqueInputSchema,
}).strict() ;

export const ShippingAddressFindFirstArgsSchema: z.ZodType<Prisma.ShippingAddressFindFirstArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  where: ShippingAddressWhereInputSchema.optional(),
  orderBy: z.union([ ShippingAddressOrderByWithRelationInputSchema.array(),ShippingAddressOrderByWithRelationInputSchema ]).optional(),
  cursor: ShippingAddressWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShippingAddressScalarFieldEnumSchema,ShippingAddressScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShippingAddressFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ShippingAddressFindFirstOrThrowArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  where: ShippingAddressWhereInputSchema.optional(),
  orderBy: z.union([ ShippingAddressOrderByWithRelationInputSchema.array(),ShippingAddressOrderByWithRelationInputSchema ]).optional(),
  cursor: ShippingAddressWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShippingAddressScalarFieldEnumSchema,ShippingAddressScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShippingAddressFindManyArgsSchema: z.ZodType<Prisma.ShippingAddressFindManyArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  where: ShippingAddressWhereInputSchema.optional(),
  orderBy: z.union([ ShippingAddressOrderByWithRelationInputSchema.array(),ShippingAddressOrderByWithRelationInputSchema ]).optional(),
  cursor: ShippingAddressWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShippingAddressScalarFieldEnumSchema,ShippingAddressScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShippingAddressAggregateArgsSchema: z.ZodType<Prisma.ShippingAddressAggregateArgs> = z.object({
  where: ShippingAddressWhereInputSchema.optional(),
  orderBy: z.union([ ShippingAddressOrderByWithRelationInputSchema.array(),ShippingAddressOrderByWithRelationInputSchema ]).optional(),
  cursor: ShippingAddressWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShippingAddressGroupByArgsSchema: z.ZodType<Prisma.ShippingAddressGroupByArgs> = z.object({
  where: ShippingAddressWhereInputSchema.optional(),
  orderBy: z.union([ ShippingAddressOrderByWithAggregationInputSchema.array(),ShippingAddressOrderByWithAggregationInputSchema ]).optional(),
  by: ShippingAddressScalarFieldEnumSchema.array(),
  having: ShippingAddressScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShippingAddressFindUniqueArgsSchema: z.ZodType<Prisma.ShippingAddressFindUniqueArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  where: ShippingAddressWhereUniqueInputSchema,
}).strict() ;

export const ShippingAddressFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ShippingAddressFindUniqueOrThrowArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  where: ShippingAddressWhereUniqueInputSchema,
}).strict() ;

export const ShippingRateFindFirstArgsSchema: z.ZodType<Prisma.ShippingRateFindFirstArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  where: ShippingRateWhereInputSchema.optional(),
  orderBy: z.union([ ShippingRateOrderByWithRelationInputSchema.array(),ShippingRateOrderByWithRelationInputSchema ]).optional(),
  cursor: ShippingRateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShippingRateScalarFieldEnumSchema,ShippingRateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShippingRateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ShippingRateFindFirstOrThrowArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  where: ShippingRateWhereInputSchema.optional(),
  orderBy: z.union([ ShippingRateOrderByWithRelationInputSchema.array(),ShippingRateOrderByWithRelationInputSchema ]).optional(),
  cursor: ShippingRateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShippingRateScalarFieldEnumSchema,ShippingRateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShippingRateFindManyArgsSchema: z.ZodType<Prisma.ShippingRateFindManyArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  where: ShippingRateWhereInputSchema.optional(),
  orderBy: z.union([ ShippingRateOrderByWithRelationInputSchema.array(),ShippingRateOrderByWithRelationInputSchema ]).optional(),
  cursor: ShippingRateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShippingRateScalarFieldEnumSchema,ShippingRateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShippingRateAggregateArgsSchema: z.ZodType<Prisma.ShippingRateAggregateArgs> = z.object({
  where: ShippingRateWhereInputSchema.optional(),
  orderBy: z.union([ ShippingRateOrderByWithRelationInputSchema.array(),ShippingRateOrderByWithRelationInputSchema ]).optional(),
  cursor: ShippingRateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShippingRateGroupByArgsSchema: z.ZodType<Prisma.ShippingRateGroupByArgs> = z.object({
  where: ShippingRateWhereInputSchema.optional(),
  orderBy: z.union([ ShippingRateOrderByWithAggregationInputSchema.array(),ShippingRateOrderByWithAggregationInputSchema ]).optional(),
  by: ShippingRateScalarFieldEnumSchema.array(),
  having: ShippingRateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShippingRateFindUniqueArgsSchema: z.ZodType<Prisma.ShippingRateFindUniqueArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  where: ShippingRateWhereUniqueInputSchema,
}).strict() ;

export const ShippingRateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ShippingRateFindUniqueOrThrowArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  where: ShippingRateWhereUniqueInputSchema,
}).strict() ;

export const SizeFindFirstArgsSchema: z.ZodType<Prisma.SizeFindFirstArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  where: SizeWhereInputSchema.optional(),
  orderBy: z.union([ SizeOrderByWithRelationInputSchema.array(),SizeOrderByWithRelationInputSchema ]).optional(),
  cursor: SizeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SizeScalarFieldEnumSchema,SizeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SizeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SizeFindFirstOrThrowArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  where: SizeWhereInputSchema.optional(),
  orderBy: z.union([ SizeOrderByWithRelationInputSchema.array(),SizeOrderByWithRelationInputSchema ]).optional(),
  cursor: SizeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SizeScalarFieldEnumSchema,SizeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SizeFindManyArgsSchema: z.ZodType<Prisma.SizeFindManyArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  where: SizeWhereInputSchema.optional(),
  orderBy: z.union([ SizeOrderByWithRelationInputSchema.array(),SizeOrderByWithRelationInputSchema ]).optional(),
  cursor: SizeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SizeScalarFieldEnumSchema,SizeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SizeAggregateArgsSchema: z.ZodType<Prisma.SizeAggregateArgs> = z.object({
  where: SizeWhereInputSchema.optional(),
  orderBy: z.union([ SizeOrderByWithRelationInputSchema.array(),SizeOrderByWithRelationInputSchema ]).optional(),
  cursor: SizeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SizeGroupByArgsSchema: z.ZodType<Prisma.SizeGroupByArgs> = z.object({
  where: SizeWhereInputSchema.optional(),
  orderBy: z.union([ SizeOrderByWithAggregationInputSchema.array(),SizeOrderByWithAggregationInputSchema ]).optional(),
  by: SizeScalarFieldEnumSchema.array(),
  having: SizeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SizeFindUniqueArgsSchema: z.ZodType<Prisma.SizeFindUniqueArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  where: SizeWhereUniqueInputSchema,
}).strict() ;

export const SizeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SizeFindUniqueOrThrowArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  where: SizeWhereUniqueInputSchema,
}).strict() ;

export const SpecFindFirstArgsSchema: z.ZodType<Prisma.SpecFindFirstArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  where: SpecWhereInputSchema.optional(),
  orderBy: z.union([ SpecOrderByWithRelationInputSchema.array(),SpecOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecScalarFieldEnumSchema,SpecScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SpecFindFirstOrThrowArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  where: SpecWhereInputSchema.optional(),
  orderBy: z.union([ SpecOrderByWithRelationInputSchema.array(),SpecOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecScalarFieldEnumSchema,SpecScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecFindManyArgsSchema: z.ZodType<Prisma.SpecFindManyArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  where: SpecWhereInputSchema.optional(),
  orderBy: z.union([ SpecOrderByWithRelationInputSchema.array(),SpecOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecScalarFieldEnumSchema,SpecScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecAggregateArgsSchema: z.ZodType<Prisma.SpecAggregateArgs> = z.object({
  where: SpecWhereInputSchema.optional(),
  orderBy: z.union([ SpecOrderByWithRelationInputSchema.array(),SpecOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpecGroupByArgsSchema: z.ZodType<Prisma.SpecGroupByArgs> = z.object({
  where: SpecWhereInputSchema.optional(),
  orderBy: z.union([ SpecOrderByWithAggregationInputSchema.array(),SpecOrderByWithAggregationInputSchema ]).optional(),
  by: SpecScalarFieldEnumSchema.array(),
  having: SpecScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpecFindUniqueArgsSchema: z.ZodType<Prisma.SpecFindUniqueArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  where: SpecWhereUniqueInputSchema,
}).strict() ;

export const SpecFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SpecFindUniqueOrThrowArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  where: SpecWhereUniqueInputSchema,
}).strict() ;

export const StoreFindFirstArgsSchema: z.ZodType<Prisma.StoreFindFirstArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  where: StoreWhereInputSchema.optional(),
  orderBy: z.union([ StoreOrderByWithRelationInputSchema.array(),StoreOrderByWithRelationInputSchema ]).optional(),
  cursor: StoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StoreScalarFieldEnumSchema,StoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StoreFindFirstOrThrowArgsSchema: z.ZodType<Prisma.StoreFindFirstOrThrowArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  where: StoreWhereInputSchema.optional(),
  orderBy: z.union([ StoreOrderByWithRelationInputSchema.array(),StoreOrderByWithRelationInputSchema ]).optional(),
  cursor: StoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StoreScalarFieldEnumSchema,StoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StoreFindManyArgsSchema: z.ZodType<Prisma.StoreFindManyArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  where: StoreWhereInputSchema.optional(),
  orderBy: z.union([ StoreOrderByWithRelationInputSchema.array(),StoreOrderByWithRelationInputSchema ]).optional(),
  cursor: StoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StoreScalarFieldEnumSchema,StoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StoreAggregateArgsSchema: z.ZodType<Prisma.StoreAggregateArgs> = z.object({
  where: StoreWhereInputSchema.optional(),
  orderBy: z.union([ StoreOrderByWithRelationInputSchema.array(),StoreOrderByWithRelationInputSchema ]).optional(),
  cursor: StoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const StoreGroupByArgsSchema: z.ZodType<Prisma.StoreGroupByArgs> = z.object({
  where: StoreWhereInputSchema.optional(),
  orderBy: z.union([ StoreOrderByWithAggregationInputSchema.array(),StoreOrderByWithAggregationInputSchema ]).optional(),
  by: StoreScalarFieldEnumSchema.array(),
  having: StoreScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const StoreFindUniqueArgsSchema: z.ZodType<Prisma.StoreFindUniqueArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  where: StoreWhereUniqueInputSchema,
}).strict() ;

export const StoreFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.StoreFindUniqueOrThrowArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  where: StoreWhereUniqueInputSchema,
}).strict() ;

export const SubCategoryFindFirstArgsSchema: z.ZodType<Prisma.SubCategoryFindFirstArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  where: SubCategoryWhereInputSchema.optional(),
  orderBy: z.union([ SubCategoryOrderByWithRelationInputSchema.array(),SubCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: SubCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubCategoryScalarFieldEnumSchema,SubCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubCategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SubCategoryFindFirstOrThrowArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  where: SubCategoryWhereInputSchema.optional(),
  orderBy: z.union([ SubCategoryOrderByWithRelationInputSchema.array(),SubCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: SubCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubCategoryScalarFieldEnumSchema,SubCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubCategoryFindManyArgsSchema: z.ZodType<Prisma.SubCategoryFindManyArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  where: SubCategoryWhereInputSchema.optional(),
  orderBy: z.union([ SubCategoryOrderByWithRelationInputSchema.array(),SubCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: SubCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubCategoryScalarFieldEnumSchema,SubCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubCategoryAggregateArgsSchema: z.ZodType<Prisma.SubCategoryAggregateArgs> = z.object({
  where: SubCategoryWhereInputSchema.optional(),
  orderBy: z.union([ SubCategoryOrderByWithRelationInputSchema.array(),SubCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: SubCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SubCategoryGroupByArgsSchema: z.ZodType<Prisma.SubCategoryGroupByArgs> = z.object({
  where: SubCategoryWhereInputSchema.optional(),
  orderBy: z.union([ SubCategoryOrderByWithAggregationInputSchema.array(),SubCategoryOrderByWithAggregationInputSchema ]).optional(),
  by: SubCategoryScalarFieldEnumSchema.array(),
  having: SubCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SubCategoryFindUniqueArgsSchema: z.ZodType<Prisma.SubCategoryFindUniqueArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  where: SubCategoryWhereUniqueInputSchema,
}).strict() ;

export const SubCategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SubCategoryFindUniqueOrThrowArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  where: SubCategoryWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const WishlistFindFirstArgsSchema: z.ZodType<Prisma.WishlistFindFirstArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  where: WishlistWhereInputSchema.optional(),
  orderBy: z.union([ WishlistOrderByWithRelationInputSchema.array(),WishlistOrderByWithRelationInputSchema ]).optional(),
  cursor: WishlistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WishlistScalarFieldEnumSchema,WishlistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WishlistFindFirstOrThrowArgsSchema: z.ZodType<Prisma.WishlistFindFirstOrThrowArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  where: WishlistWhereInputSchema.optional(),
  orderBy: z.union([ WishlistOrderByWithRelationInputSchema.array(),WishlistOrderByWithRelationInputSchema ]).optional(),
  cursor: WishlistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WishlistScalarFieldEnumSchema,WishlistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WishlistFindManyArgsSchema: z.ZodType<Prisma.WishlistFindManyArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  where: WishlistWhereInputSchema.optional(),
  orderBy: z.union([ WishlistOrderByWithRelationInputSchema.array(),WishlistOrderByWithRelationInputSchema ]).optional(),
  cursor: WishlistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WishlistScalarFieldEnumSchema,WishlistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WishlistAggregateArgsSchema: z.ZodType<Prisma.WishlistAggregateArgs> = z.object({
  where: WishlistWhereInputSchema.optional(),
  orderBy: z.union([ WishlistOrderByWithRelationInputSchema.array(),WishlistOrderByWithRelationInputSchema ]).optional(),
  cursor: WishlistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WishlistGroupByArgsSchema: z.ZodType<Prisma.WishlistGroupByArgs> = z.object({
  where: WishlistWhereInputSchema.optional(),
  orderBy: z.union([ WishlistOrderByWithAggregationInputSchema.array(),WishlistOrderByWithAggregationInputSchema ]).optional(),
  by: WishlistScalarFieldEnumSchema.array(),
  having: WishlistScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WishlistFindUniqueArgsSchema: z.ZodType<Prisma.WishlistFindUniqueArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  where: WishlistWhereUniqueInputSchema,
}).strict() ;

export const WishlistFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.WishlistFindUniqueOrThrowArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  where: WishlistWhereUniqueInputSchema,
}).strict() ;

export const CartCreateArgsSchema: z.ZodType<Prisma.CartCreateArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  data: z.union([ CartCreateInputSchema,CartUncheckedCreateInputSchema ]),
}).strict() ;

export const CartUpsertArgsSchema: z.ZodType<Prisma.CartUpsertArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  where: CartWhereUniqueInputSchema,
  create: z.union([ CartCreateInputSchema,CartUncheckedCreateInputSchema ]),
  update: z.union([ CartUpdateInputSchema,CartUncheckedUpdateInputSchema ]),
}).strict() ;

export const CartCreateManyArgsSchema: z.ZodType<Prisma.CartCreateManyArgs> = z.object({
  data: z.union([ CartCreateManyInputSchema,CartCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CartCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CartCreateManyAndReturnArgs> = z.object({
  data: z.union([ CartCreateManyInputSchema,CartCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CartDeleteArgsSchema: z.ZodType<Prisma.CartDeleteArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  where: CartWhereUniqueInputSchema,
}).strict() ;

export const CartUpdateArgsSchema: z.ZodType<Prisma.CartUpdateArgs> = z.object({
  select: CartSelectSchema.optional(),
  include: CartIncludeSchema.optional(),
  data: z.union([ CartUpdateInputSchema,CartUncheckedUpdateInputSchema ]),
  where: CartWhereUniqueInputSchema,
}).strict() ;

export const CartUpdateManyArgsSchema: z.ZodType<Prisma.CartUpdateManyArgs> = z.object({
  data: z.union([ CartUpdateManyMutationInputSchema,CartUncheckedUpdateManyInputSchema ]),
  where: CartWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CartUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CartUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CartUpdateManyMutationInputSchema,CartUncheckedUpdateManyInputSchema ]),
  where: CartWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CartDeleteManyArgsSchema: z.ZodType<Prisma.CartDeleteManyArgs> = z.object({
  where: CartWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CartItemCreateArgsSchema: z.ZodType<Prisma.CartItemCreateArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  data: z.union([ CartItemCreateInputSchema,CartItemUncheckedCreateInputSchema ]),
}).strict() ;

export const CartItemUpsertArgsSchema: z.ZodType<Prisma.CartItemUpsertArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  where: CartItemWhereUniqueInputSchema,
  create: z.union([ CartItemCreateInputSchema,CartItemUncheckedCreateInputSchema ]),
  update: z.union([ CartItemUpdateInputSchema,CartItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const CartItemCreateManyArgsSchema: z.ZodType<Prisma.CartItemCreateManyArgs> = z.object({
  data: z.union([ CartItemCreateManyInputSchema,CartItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CartItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CartItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ CartItemCreateManyInputSchema,CartItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CartItemDeleteArgsSchema: z.ZodType<Prisma.CartItemDeleteArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  where: CartItemWhereUniqueInputSchema,
}).strict() ;

export const CartItemUpdateArgsSchema: z.ZodType<Prisma.CartItemUpdateArgs> = z.object({
  select: CartItemSelectSchema.optional(),
  include: CartItemIncludeSchema.optional(),
  data: z.union([ CartItemUpdateInputSchema,CartItemUncheckedUpdateInputSchema ]),
  where: CartItemWhereUniqueInputSchema,
}).strict() ;

export const CartItemUpdateManyArgsSchema: z.ZodType<Prisma.CartItemUpdateManyArgs> = z.object({
  data: z.union([ CartItemUpdateManyMutationInputSchema,CartItemUncheckedUpdateManyInputSchema ]),
  where: CartItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CartItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CartItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CartItemUpdateManyMutationInputSchema,CartItemUncheckedUpdateManyInputSchema ]),
  where: CartItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CartItemDeleteManyArgsSchema: z.ZodType<Prisma.CartItemDeleteManyArgs> = z.object({
  where: CartItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CategoryCreateArgsSchema: z.ZodType<Prisma.CategoryCreateArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  data: z.union([ CategoryCreateInputSchema,CategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const CategoryUpsertArgsSchema: z.ZodType<Prisma.CategoryUpsertArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
  create: z.union([ CategoryCreateInputSchema,CategoryUncheckedCreateInputSchema ]),
  update: z.union([ CategoryUpdateInputSchema,CategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const CategoryCreateManyArgsSchema: z.ZodType<Prisma.CategoryCreateManyArgs> = z.object({
  data: z.union([ CategoryCreateManyInputSchema,CategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ CategoryCreateManyInputSchema,CategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CategoryDeleteArgsSchema: z.ZodType<Prisma.CategoryDeleteArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryUpdateArgsSchema: z.ZodType<Prisma.CategoryUpdateArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  data: z.union([ CategoryUpdateInputSchema,CategoryUncheckedUpdateInputSchema ]),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryUpdateManyArgsSchema: z.ZodType<Prisma.CategoryUpdateManyArgs> = z.object({
  data: z.union([ CategoryUpdateManyMutationInputSchema,CategoryUncheckedUpdateManyInputSchema ]),
  where: CategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CategoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CategoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CategoryUpdateManyMutationInputSchema,CategoryUncheckedUpdateManyInputSchema ]),
  where: CategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CategoryDeleteManyArgsSchema: z.ZodType<Prisma.CategoryDeleteManyArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ColorCreateArgsSchema: z.ZodType<Prisma.ColorCreateArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  data: z.union([ ColorCreateInputSchema,ColorUncheckedCreateInputSchema ]),
}).strict() ;

export const ColorUpsertArgsSchema: z.ZodType<Prisma.ColorUpsertArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  where: ColorWhereUniqueInputSchema,
  create: z.union([ ColorCreateInputSchema,ColorUncheckedCreateInputSchema ]),
  update: z.union([ ColorUpdateInputSchema,ColorUncheckedUpdateInputSchema ]),
}).strict() ;

export const ColorCreateManyArgsSchema: z.ZodType<Prisma.ColorCreateManyArgs> = z.object({
  data: z.union([ ColorCreateManyInputSchema,ColorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ColorCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ColorCreateManyAndReturnArgs> = z.object({
  data: z.union([ ColorCreateManyInputSchema,ColorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ColorDeleteArgsSchema: z.ZodType<Prisma.ColorDeleteArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  where: ColorWhereUniqueInputSchema,
}).strict() ;

export const ColorUpdateArgsSchema: z.ZodType<Prisma.ColorUpdateArgs> = z.object({
  select: ColorSelectSchema.optional(),
  include: ColorIncludeSchema.optional(),
  data: z.union([ ColorUpdateInputSchema,ColorUncheckedUpdateInputSchema ]),
  where: ColorWhereUniqueInputSchema,
}).strict() ;

export const ColorUpdateManyArgsSchema: z.ZodType<Prisma.ColorUpdateManyArgs> = z.object({
  data: z.union([ ColorUpdateManyMutationInputSchema,ColorUncheckedUpdateManyInputSchema ]),
  where: ColorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ColorUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ColorUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ColorUpdateManyMutationInputSchema,ColorUncheckedUpdateManyInputSchema ]),
  where: ColorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ColorDeleteManyArgsSchema: z.ZodType<Prisma.ColorDeleteManyArgs> = z.object({
  where: ColorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryCreateArgsSchema: z.ZodType<Prisma.CountryCreateArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  data: z.union([ CountryCreateInputSchema,CountryUncheckedCreateInputSchema ]),
}).strict() ;

export const CountryUpsertArgsSchema: z.ZodType<Prisma.CountryUpsertArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
  create: z.union([ CountryCreateInputSchema,CountryUncheckedCreateInputSchema ]),
  update: z.union([ CountryUpdateInputSchema,CountryUncheckedUpdateInputSchema ]),
}).strict() ;

export const CountryCreateManyArgsSchema: z.ZodType<Prisma.CountryCreateManyArgs> = z.object({
  data: z.union([ CountryCreateManyInputSchema,CountryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CountryCreateManyAndReturnArgs> = z.object({
  data: z.union([ CountryCreateManyInputSchema,CountryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountryDeleteArgsSchema: z.ZodType<Prisma.CountryDeleteArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryUpdateArgsSchema: z.ZodType<Prisma.CountryUpdateArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  data: z.union([ CountryUpdateInputSchema,CountryUncheckedUpdateInputSchema ]),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryUpdateManyArgsSchema: z.ZodType<Prisma.CountryUpdateManyArgs> = z.object({
  data: z.union([ CountryUpdateManyMutationInputSchema,CountryUncheckedUpdateManyInputSchema ]),
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CountryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CountryUpdateManyMutationInputSchema,CountryUncheckedUpdateManyInputSchema ]),
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryDeleteManyArgsSchema: z.ZodType<Prisma.CountryDeleteManyArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CouponCreateArgsSchema: z.ZodType<Prisma.CouponCreateArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  data: z.union([ CouponCreateInputSchema,CouponUncheckedCreateInputSchema ]),
}).strict() ;

export const CouponUpsertArgsSchema: z.ZodType<Prisma.CouponUpsertArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  where: CouponWhereUniqueInputSchema,
  create: z.union([ CouponCreateInputSchema,CouponUncheckedCreateInputSchema ]),
  update: z.union([ CouponUpdateInputSchema,CouponUncheckedUpdateInputSchema ]),
}).strict() ;

export const CouponCreateManyArgsSchema: z.ZodType<Prisma.CouponCreateManyArgs> = z.object({
  data: z.union([ CouponCreateManyInputSchema,CouponCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CouponCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CouponCreateManyAndReturnArgs> = z.object({
  data: z.union([ CouponCreateManyInputSchema,CouponCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CouponDeleteArgsSchema: z.ZodType<Prisma.CouponDeleteArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  where: CouponWhereUniqueInputSchema,
}).strict() ;

export const CouponUpdateArgsSchema: z.ZodType<Prisma.CouponUpdateArgs> = z.object({
  select: CouponSelectSchema.optional(),
  include: CouponIncludeSchema.optional(),
  data: z.union([ CouponUpdateInputSchema,CouponUncheckedUpdateInputSchema ]),
  where: CouponWhereUniqueInputSchema,
}).strict() ;

export const CouponUpdateManyArgsSchema: z.ZodType<Prisma.CouponUpdateManyArgs> = z.object({
  data: z.union([ CouponUpdateManyMutationInputSchema,CouponUncheckedUpdateManyInputSchema ]),
  where: CouponWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CouponUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CouponUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CouponUpdateManyMutationInputSchema,CouponUncheckedUpdateManyInputSchema ]),
  where: CouponWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CouponDeleteManyArgsSchema: z.ZodType<Prisma.CouponDeleteManyArgs> = z.object({
  where: CouponWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FreeShippingCountryCreateArgsSchema: z.ZodType<Prisma.FreeShippingCountryCreateArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  data: z.union([ FreeShippingCountryCreateInputSchema,FreeShippingCountryUncheckedCreateInputSchema ]),
}).strict() ;

export const FreeShippingCountryUpsertArgsSchema: z.ZodType<Prisma.FreeShippingCountryUpsertArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  where: FreeShippingCountryWhereUniqueInputSchema,
  create: z.union([ FreeShippingCountryCreateInputSchema,FreeShippingCountryUncheckedCreateInputSchema ]),
  update: z.union([ FreeShippingCountryUpdateInputSchema,FreeShippingCountryUncheckedUpdateInputSchema ]),
}).strict() ;

export const FreeShippingCountryCreateManyArgsSchema: z.ZodType<Prisma.FreeShippingCountryCreateManyArgs> = z.object({
  data: z.union([ FreeShippingCountryCreateManyInputSchema,FreeShippingCountryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FreeShippingCountryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FreeShippingCountryCreateManyAndReturnArgs> = z.object({
  data: z.union([ FreeShippingCountryCreateManyInputSchema,FreeShippingCountryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FreeShippingCountryDeleteArgsSchema: z.ZodType<Prisma.FreeShippingCountryDeleteArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  where: FreeShippingCountryWhereUniqueInputSchema,
}).strict() ;

export const FreeShippingCountryUpdateArgsSchema: z.ZodType<Prisma.FreeShippingCountryUpdateArgs> = z.object({
  select: FreeShippingCountrySelectSchema.optional(),
  include: FreeShippingCountryIncludeSchema.optional(),
  data: z.union([ FreeShippingCountryUpdateInputSchema,FreeShippingCountryUncheckedUpdateInputSchema ]),
  where: FreeShippingCountryWhereUniqueInputSchema,
}).strict() ;

export const FreeShippingCountryUpdateManyArgsSchema: z.ZodType<Prisma.FreeShippingCountryUpdateManyArgs> = z.object({
  data: z.union([ FreeShippingCountryUpdateManyMutationInputSchema,FreeShippingCountryUncheckedUpdateManyInputSchema ]),
  where: FreeShippingCountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FreeShippingCountryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.FreeShippingCountryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ FreeShippingCountryUpdateManyMutationInputSchema,FreeShippingCountryUncheckedUpdateManyInputSchema ]),
  where: FreeShippingCountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FreeShippingCountryDeleteManyArgsSchema: z.ZodType<Prisma.FreeShippingCountryDeleteManyArgs> = z.object({
  where: FreeShippingCountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FreeShippingCreateArgsSchema: z.ZodType<Prisma.FreeShippingCreateArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  data: z.union([ FreeShippingCreateInputSchema,FreeShippingUncheckedCreateInputSchema ]),
}).strict() ;

export const FreeShippingUpsertArgsSchema: z.ZodType<Prisma.FreeShippingUpsertArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  where: FreeShippingWhereUniqueInputSchema,
  create: z.union([ FreeShippingCreateInputSchema,FreeShippingUncheckedCreateInputSchema ]),
  update: z.union([ FreeShippingUpdateInputSchema,FreeShippingUncheckedUpdateInputSchema ]),
}).strict() ;

export const FreeShippingCreateManyArgsSchema: z.ZodType<Prisma.FreeShippingCreateManyArgs> = z.object({
  data: z.union([ FreeShippingCreateManyInputSchema,FreeShippingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FreeShippingCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FreeShippingCreateManyAndReturnArgs> = z.object({
  data: z.union([ FreeShippingCreateManyInputSchema,FreeShippingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FreeShippingDeleteArgsSchema: z.ZodType<Prisma.FreeShippingDeleteArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  where: FreeShippingWhereUniqueInputSchema,
}).strict() ;

export const FreeShippingUpdateArgsSchema: z.ZodType<Prisma.FreeShippingUpdateArgs> = z.object({
  select: FreeShippingSelectSchema.optional(),
  include: FreeShippingIncludeSchema.optional(),
  data: z.union([ FreeShippingUpdateInputSchema,FreeShippingUncheckedUpdateInputSchema ]),
  where: FreeShippingWhereUniqueInputSchema,
}).strict() ;

export const FreeShippingUpdateManyArgsSchema: z.ZodType<Prisma.FreeShippingUpdateManyArgs> = z.object({
  data: z.union([ FreeShippingUpdateManyMutationInputSchema,FreeShippingUncheckedUpdateManyInputSchema ]),
  where: FreeShippingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FreeShippingUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.FreeShippingUpdateManyAndReturnArgs> = z.object({
  data: z.union([ FreeShippingUpdateManyMutationInputSchema,FreeShippingUncheckedUpdateManyInputSchema ]),
  where: FreeShippingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FreeShippingDeleteManyArgsSchema: z.ZodType<Prisma.FreeShippingDeleteManyArgs> = z.object({
  where: FreeShippingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OfferTagCreateArgsSchema: z.ZodType<Prisma.OfferTagCreateArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  data: z.union([ OfferTagCreateInputSchema,OfferTagUncheckedCreateInputSchema ]),
}).strict() ;

export const OfferTagUpsertArgsSchema: z.ZodType<Prisma.OfferTagUpsertArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  where: OfferTagWhereUniqueInputSchema,
  create: z.union([ OfferTagCreateInputSchema,OfferTagUncheckedCreateInputSchema ]),
  update: z.union([ OfferTagUpdateInputSchema,OfferTagUncheckedUpdateInputSchema ]),
}).strict() ;

export const OfferTagCreateManyArgsSchema: z.ZodType<Prisma.OfferTagCreateManyArgs> = z.object({
  data: z.union([ OfferTagCreateManyInputSchema,OfferTagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OfferTagCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OfferTagCreateManyAndReturnArgs> = z.object({
  data: z.union([ OfferTagCreateManyInputSchema,OfferTagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OfferTagDeleteArgsSchema: z.ZodType<Prisma.OfferTagDeleteArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  where: OfferTagWhereUniqueInputSchema,
}).strict() ;

export const OfferTagUpdateArgsSchema: z.ZodType<Prisma.OfferTagUpdateArgs> = z.object({
  select: OfferTagSelectSchema.optional(),
  include: OfferTagIncludeSchema.optional(),
  data: z.union([ OfferTagUpdateInputSchema,OfferTagUncheckedUpdateInputSchema ]),
  where: OfferTagWhereUniqueInputSchema,
}).strict() ;

export const OfferTagUpdateManyArgsSchema: z.ZodType<Prisma.OfferTagUpdateManyArgs> = z.object({
  data: z.union([ OfferTagUpdateManyMutationInputSchema,OfferTagUncheckedUpdateManyInputSchema ]),
  where: OfferTagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OfferTagUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OfferTagUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OfferTagUpdateManyMutationInputSchema,OfferTagUncheckedUpdateManyInputSchema ]),
  where: OfferTagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OfferTagDeleteManyArgsSchema: z.ZodType<Prisma.OfferTagDeleteManyArgs> = z.object({
  where: OfferTagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderGroupCreateArgsSchema: z.ZodType<Prisma.OrderGroupCreateArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  data: z.union([ OrderGroupCreateInputSchema,OrderGroupUncheckedCreateInputSchema ]),
}).strict() ;

export const OrderGroupUpsertArgsSchema: z.ZodType<Prisma.OrderGroupUpsertArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  where: OrderGroupWhereUniqueInputSchema,
  create: z.union([ OrderGroupCreateInputSchema,OrderGroupUncheckedCreateInputSchema ]),
  update: z.union([ OrderGroupUpdateInputSchema,OrderGroupUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrderGroupCreateManyArgsSchema: z.ZodType<Prisma.OrderGroupCreateManyArgs> = z.object({
  data: z.union([ OrderGroupCreateManyInputSchema,OrderGroupCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderGroupCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderGroupCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrderGroupCreateManyInputSchema,OrderGroupCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderGroupDeleteArgsSchema: z.ZodType<Prisma.OrderGroupDeleteArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  where: OrderGroupWhereUniqueInputSchema,
}).strict() ;

export const OrderGroupUpdateArgsSchema: z.ZodType<Prisma.OrderGroupUpdateArgs> = z.object({
  select: OrderGroupSelectSchema.optional(),
  include: OrderGroupIncludeSchema.optional(),
  data: z.union([ OrderGroupUpdateInputSchema,OrderGroupUncheckedUpdateInputSchema ]),
  where: OrderGroupWhereUniqueInputSchema,
}).strict() ;

export const OrderGroupUpdateManyArgsSchema: z.ZodType<Prisma.OrderGroupUpdateManyArgs> = z.object({
  data: z.union([ OrderGroupUpdateManyMutationInputSchema,OrderGroupUncheckedUpdateManyInputSchema ]),
  where: OrderGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderGroupUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderGroupUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrderGroupUpdateManyMutationInputSchema,OrderGroupUncheckedUpdateManyInputSchema ]),
  where: OrderGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderGroupDeleteManyArgsSchema: z.ZodType<Prisma.OrderGroupDeleteManyArgs> = z.object({
  where: OrderGroupWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderItemCreateArgsSchema: z.ZodType<Prisma.OrderItemCreateArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  data: z.union([ OrderItemCreateInputSchema,OrderItemUncheckedCreateInputSchema ]),
}).strict() ;

export const OrderItemUpsertArgsSchema: z.ZodType<Prisma.OrderItemUpsertArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
  create: z.union([ OrderItemCreateInputSchema,OrderItemUncheckedCreateInputSchema ]),
  update: z.union([ OrderItemUpdateInputSchema,OrderItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrderItemCreateManyArgsSchema: z.ZodType<Prisma.OrderItemCreateManyArgs> = z.object({
  data: z.union([ OrderItemCreateManyInputSchema,OrderItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrderItemCreateManyInputSchema,OrderItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderItemDeleteArgsSchema: z.ZodType<Prisma.OrderItemDeleteArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
}).strict() ;

export const OrderItemUpdateArgsSchema: z.ZodType<Prisma.OrderItemUpdateArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  data: z.union([ OrderItemUpdateInputSchema,OrderItemUncheckedUpdateInputSchema ]),
  where: OrderItemWhereUniqueInputSchema,
}).strict() ;

export const OrderItemUpdateManyArgsSchema: z.ZodType<Prisma.OrderItemUpdateManyArgs> = z.object({
  data: z.union([ OrderItemUpdateManyMutationInputSchema,OrderItemUncheckedUpdateManyInputSchema ]),
  where: OrderItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrderItemUpdateManyMutationInputSchema,OrderItemUncheckedUpdateManyInputSchema ]),
  where: OrderItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderItemDeleteManyArgsSchema: z.ZodType<Prisma.OrderItemDeleteManyArgs> = z.object({
  where: OrderItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderCreateArgsSchema: z.ZodType<Prisma.OrderCreateArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  data: z.union([ OrderCreateInputSchema,OrderUncheckedCreateInputSchema ]),
}).strict() ;

export const OrderUpsertArgsSchema: z.ZodType<Prisma.OrderUpsertArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
  create: z.union([ OrderCreateInputSchema,OrderUncheckedCreateInputSchema ]),
  update: z.union([ OrderUpdateInputSchema,OrderUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrderCreateManyArgsSchema: z.ZodType<Prisma.OrderCreateManyArgs> = z.object({
  data: z.union([ OrderCreateManyInputSchema,OrderCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrderCreateManyInputSchema,OrderCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderDeleteArgsSchema: z.ZodType<Prisma.OrderDeleteArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
}).strict() ;

export const OrderUpdateArgsSchema: z.ZodType<Prisma.OrderUpdateArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  data: z.union([ OrderUpdateInputSchema,OrderUncheckedUpdateInputSchema ]),
  where: OrderWhereUniqueInputSchema,
}).strict() ;

export const OrderUpdateManyArgsSchema: z.ZodType<Prisma.OrderUpdateManyArgs> = z.object({
  data: z.union([ OrderUpdateManyMutationInputSchema,OrderUncheckedUpdateManyInputSchema ]),
  where: OrderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrderUpdateManyMutationInputSchema,OrderUncheckedUpdateManyInputSchema ]),
  where: OrderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderDeleteManyArgsSchema: z.ZodType<Prisma.OrderDeleteManyArgs> = z.object({
  where: OrderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PaymentDetailsCreateArgsSchema: z.ZodType<Prisma.PaymentDetailsCreateArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  data: z.union([ PaymentDetailsCreateInputSchema,PaymentDetailsUncheckedCreateInputSchema ]),
}).strict() ;

export const PaymentDetailsUpsertArgsSchema: z.ZodType<Prisma.PaymentDetailsUpsertArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  where: PaymentDetailsWhereUniqueInputSchema,
  create: z.union([ PaymentDetailsCreateInputSchema,PaymentDetailsUncheckedCreateInputSchema ]),
  update: z.union([ PaymentDetailsUpdateInputSchema,PaymentDetailsUncheckedUpdateInputSchema ]),
}).strict() ;

export const PaymentDetailsCreateManyArgsSchema: z.ZodType<Prisma.PaymentDetailsCreateManyArgs> = z.object({
  data: z.union([ PaymentDetailsCreateManyInputSchema,PaymentDetailsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PaymentDetailsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PaymentDetailsCreateManyAndReturnArgs> = z.object({
  data: z.union([ PaymentDetailsCreateManyInputSchema,PaymentDetailsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PaymentDetailsDeleteArgsSchema: z.ZodType<Prisma.PaymentDetailsDeleteArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  where: PaymentDetailsWhereUniqueInputSchema,
}).strict() ;

export const PaymentDetailsUpdateArgsSchema: z.ZodType<Prisma.PaymentDetailsUpdateArgs> = z.object({
  select: PaymentDetailsSelectSchema.optional(),
  include: PaymentDetailsIncludeSchema.optional(),
  data: z.union([ PaymentDetailsUpdateInputSchema,PaymentDetailsUncheckedUpdateInputSchema ]),
  where: PaymentDetailsWhereUniqueInputSchema,
}).strict() ;

export const PaymentDetailsUpdateManyArgsSchema: z.ZodType<Prisma.PaymentDetailsUpdateManyArgs> = z.object({
  data: z.union([ PaymentDetailsUpdateManyMutationInputSchema,PaymentDetailsUncheckedUpdateManyInputSchema ]),
  where: PaymentDetailsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PaymentDetailsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PaymentDetailsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PaymentDetailsUpdateManyMutationInputSchema,PaymentDetailsUncheckedUpdateManyInputSchema ]),
  where: PaymentDetailsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PaymentDetailsDeleteManyArgsSchema: z.ZodType<Prisma.PaymentDetailsDeleteManyArgs> = z.object({
  where: PaymentDetailsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductVariantCreateArgsSchema: z.ZodType<Prisma.ProductVariantCreateArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  data: z.union([ ProductVariantCreateInputSchema,ProductVariantUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductVariantUpsertArgsSchema: z.ZodType<Prisma.ProductVariantUpsertArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  where: ProductVariantWhereUniqueInputSchema,
  create: z.union([ ProductVariantCreateInputSchema,ProductVariantUncheckedCreateInputSchema ]),
  update: z.union([ ProductVariantUpdateInputSchema,ProductVariantUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductVariantCreateManyArgsSchema: z.ZodType<Prisma.ProductVariantCreateManyArgs> = z.object({
  data: z.union([ ProductVariantCreateManyInputSchema,ProductVariantCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductVariantCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductVariantCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductVariantCreateManyInputSchema,ProductVariantCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductVariantDeleteArgsSchema: z.ZodType<Prisma.ProductVariantDeleteArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  where: ProductVariantWhereUniqueInputSchema,
}).strict() ;

export const ProductVariantUpdateArgsSchema: z.ZodType<Prisma.ProductVariantUpdateArgs> = z.object({
  select: ProductVariantSelectSchema.optional(),
  include: ProductVariantIncludeSchema.optional(),
  data: z.union([ ProductVariantUpdateInputSchema,ProductVariantUncheckedUpdateInputSchema ]),
  where: ProductVariantWhereUniqueInputSchema,
}).strict() ;

export const ProductVariantUpdateManyArgsSchema: z.ZodType<Prisma.ProductVariantUpdateManyArgs> = z.object({
  data: z.union([ ProductVariantUpdateManyMutationInputSchema,ProductVariantUncheckedUpdateManyInputSchema ]),
  where: ProductVariantWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductVariantUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductVariantUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProductVariantUpdateManyMutationInputSchema,ProductVariantUncheckedUpdateManyInputSchema ]),
  where: ProductVariantWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductVariantDeleteManyArgsSchema: z.ZodType<Prisma.ProductVariantDeleteManyArgs> = z.object({
  where: ProductVariantWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductCreateArgsSchema: z.ZodType<Prisma.ProductCreateArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  data: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductUpsertArgsSchema: z.ZodType<Prisma.ProductUpsertArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
  create: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
  update: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductCreateManyArgsSchema: z.ZodType<Prisma.ProductCreateManyArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductDeleteArgsSchema: z.ZodType<Prisma.ProductDeleteArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateArgsSchema: z.ZodType<Prisma.ProductUpdateArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  data: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateManyArgsSchema: z.ZodType<Prisma.ProductUpdateManyArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductDeleteManyArgsSchema: z.ZodType<Prisma.ProductDeleteManyArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductVariantImageCreateArgsSchema: z.ZodType<Prisma.ProductVariantImageCreateArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  data: z.union([ ProductVariantImageCreateInputSchema,ProductVariantImageUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductVariantImageUpsertArgsSchema: z.ZodType<Prisma.ProductVariantImageUpsertArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  where: ProductVariantImageWhereUniqueInputSchema,
  create: z.union([ ProductVariantImageCreateInputSchema,ProductVariantImageUncheckedCreateInputSchema ]),
  update: z.union([ ProductVariantImageUpdateInputSchema,ProductVariantImageUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductVariantImageCreateManyArgsSchema: z.ZodType<Prisma.ProductVariantImageCreateManyArgs> = z.object({
  data: z.union([ ProductVariantImageCreateManyInputSchema,ProductVariantImageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductVariantImageCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductVariantImageCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductVariantImageCreateManyInputSchema,ProductVariantImageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductVariantImageDeleteArgsSchema: z.ZodType<Prisma.ProductVariantImageDeleteArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  where: ProductVariantImageWhereUniqueInputSchema,
}).strict() ;

export const ProductVariantImageUpdateArgsSchema: z.ZodType<Prisma.ProductVariantImageUpdateArgs> = z.object({
  select: ProductVariantImageSelectSchema.optional(),
  include: ProductVariantImageIncludeSchema.optional(),
  data: z.union([ ProductVariantImageUpdateInputSchema,ProductVariantImageUncheckedUpdateInputSchema ]),
  where: ProductVariantImageWhereUniqueInputSchema,
}).strict() ;

export const ProductVariantImageUpdateManyArgsSchema: z.ZodType<Prisma.ProductVariantImageUpdateManyArgs> = z.object({
  data: z.union([ ProductVariantImageUpdateManyMutationInputSchema,ProductVariantImageUncheckedUpdateManyInputSchema ]),
  where: ProductVariantImageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductVariantImageUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductVariantImageUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProductVariantImageUpdateManyMutationInputSchema,ProductVariantImageUncheckedUpdateManyInputSchema ]),
  where: ProductVariantImageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductVariantImageDeleteManyArgsSchema: z.ZodType<Prisma.ProductVariantImageDeleteManyArgs> = z.object({
  where: ProductVariantImageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const QuestionCreateArgsSchema: z.ZodType<Prisma.QuestionCreateArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  data: z.union([ QuestionCreateInputSchema,QuestionUncheckedCreateInputSchema ]),
}).strict() ;

export const QuestionUpsertArgsSchema: z.ZodType<Prisma.QuestionUpsertArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereUniqueInputSchema,
  create: z.union([ QuestionCreateInputSchema,QuestionUncheckedCreateInputSchema ]),
  update: z.union([ QuestionUpdateInputSchema,QuestionUncheckedUpdateInputSchema ]),
}).strict() ;

export const QuestionCreateManyArgsSchema: z.ZodType<Prisma.QuestionCreateManyArgs> = z.object({
  data: z.union([ QuestionCreateManyInputSchema,QuestionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const QuestionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.QuestionCreateManyAndReturnArgs> = z.object({
  data: z.union([ QuestionCreateManyInputSchema,QuestionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const QuestionDeleteArgsSchema: z.ZodType<Prisma.QuestionDeleteArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereUniqueInputSchema,
}).strict() ;

export const QuestionUpdateArgsSchema: z.ZodType<Prisma.QuestionUpdateArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  data: z.union([ QuestionUpdateInputSchema,QuestionUncheckedUpdateInputSchema ]),
  where: QuestionWhereUniqueInputSchema,
}).strict() ;

export const QuestionUpdateManyArgsSchema: z.ZodType<Prisma.QuestionUpdateManyArgs> = z.object({
  data: z.union([ QuestionUpdateManyMutationInputSchema,QuestionUncheckedUpdateManyInputSchema ]),
  where: QuestionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const QuestionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.QuestionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ QuestionUpdateManyMutationInputSchema,QuestionUncheckedUpdateManyInputSchema ]),
  where: QuestionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const QuestionDeleteManyArgsSchema: z.ZodType<Prisma.QuestionDeleteManyArgs> = z.object({
  where: QuestionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReviewImageCreateArgsSchema: z.ZodType<Prisma.ReviewImageCreateArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  data: z.union([ ReviewImageCreateInputSchema,ReviewImageUncheckedCreateInputSchema ]),
}).strict() ;

export const ReviewImageUpsertArgsSchema: z.ZodType<Prisma.ReviewImageUpsertArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  where: ReviewImageWhereUniqueInputSchema,
  create: z.union([ ReviewImageCreateInputSchema,ReviewImageUncheckedCreateInputSchema ]),
  update: z.union([ ReviewImageUpdateInputSchema,ReviewImageUncheckedUpdateInputSchema ]),
}).strict() ;

export const ReviewImageCreateManyArgsSchema: z.ZodType<Prisma.ReviewImageCreateManyArgs> = z.object({
  data: z.union([ ReviewImageCreateManyInputSchema,ReviewImageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ReviewImageCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ReviewImageCreateManyAndReturnArgs> = z.object({
  data: z.union([ ReviewImageCreateManyInputSchema,ReviewImageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ReviewImageDeleteArgsSchema: z.ZodType<Prisma.ReviewImageDeleteArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  where: ReviewImageWhereUniqueInputSchema,
}).strict() ;

export const ReviewImageUpdateArgsSchema: z.ZodType<Prisma.ReviewImageUpdateArgs> = z.object({
  select: ReviewImageSelectSchema.optional(),
  include: ReviewImageIncludeSchema.optional(),
  data: z.union([ ReviewImageUpdateInputSchema,ReviewImageUncheckedUpdateInputSchema ]),
  where: ReviewImageWhereUniqueInputSchema,
}).strict() ;

export const ReviewImageUpdateManyArgsSchema: z.ZodType<Prisma.ReviewImageUpdateManyArgs> = z.object({
  data: z.union([ ReviewImageUpdateManyMutationInputSchema,ReviewImageUncheckedUpdateManyInputSchema ]),
  where: ReviewImageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReviewImageUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ReviewImageUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ReviewImageUpdateManyMutationInputSchema,ReviewImageUncheckedUpdateManyInputSchema ]),
  where: ReviewImageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReviewImageDeleteManyArgsSchema: z.ZodType<Prisma.ReviewImageDeleteManyArgs> = z.object({
  where: ReviewImageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReviewCreateArgsSchema: z.ZodType<Prisma.ReviewCreateArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  data: z.union([ ReviewCreateInputSchema,ReviewUncheckedCreateInputSchema ]),
}).strict() ;

export const ReviewUpsertArgsSchema: z.ZodType<Prisma.ReviewUpsertArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  where: ReviewWhereUniqueInputSchema,
  create: z.union([ ReviewCreateInputSchema,ReviewUncheckedCreateInputSchema ]),
  update: z.union([ ReviewUpdateInputSchema,ReviewUncheckedUpdateInputSchema ]),
}).strict() ;

export const ReviewCreateManyArgsSchema: z.ZodType<Prisma.ReviewCreateManyArgs> = z.object({
  data: z.union([ ReviewCreateManyInputSchema,ReviewCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ReviewCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ReviewCreateManyAndReturnArgs> = z.object({
  data: z.union([ ReviewCreateManyInputSchema,ReviewCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ReviewDeleteArgsSchema: z.ZodType<Prisma.ReviewDeleteArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  where: ReviewWhereUniqueInputSchema,
}).strict() ;

export const ReviewUpdateArgsSchema: z.ZodType<Prisma.ReviewUpdateArgs> = z.object({
  select: ReviewSelectSchema.optional(),
  include: ReviewIncludeSchema.optional(),
  data: z.union([ ReviewUpdateInputSchema,ReviewUncheckedUpdateInputSchema ]),
  where: ReviewWhereUniqueInputSchema,
}).strict() ;

export const ReviewUpdateManyArgsSchema: z.ZodType<Prisma.ReviewUpdateManyArgs> = z.object({
  data: z.union([ ReviewUpdateManyMutationInputSchema,ReviewUncheckedUpdateManyInputSchema ]),
  where: ReviewWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReviewUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ReviewUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ReviewUpdateManyMutationInputSchema,ReviewUncheckedUpdateManyInputSchema ]),
  where: ReviewWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReviewDeleteManyArgsSchema: z.ZodType<Prisma.ReviewDeleteManyArgs> = z.object({
  where: ReviewWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShippingAddressCreateArgsSchema: z.ZodType<Prisma.ShippingAddressCreateArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  data: z.union([ ShippingAddressCreateInputSchema,ShippingAddressUncheckedCreateInputSchema ]),
}).strict() ;

export const ShippingAddressUpsertArgsSchema: z.ZodType<Prisma.ShippingAddressUpsertArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  where: ShippingAddressWhereUniqueInputSchema,
  create: z.union([ ShippingAddressCreateInputSchema,ShippingAddressUncheckedCreateInputSchema ]),
  update: z.union([ ShippingAddressUpdateInputSchema,ShippingAddressUncheckedUpdateInputSchema ]),
}).strict() ;

export const ShippingAddressCreateManyArgsSchema: z.ZodType<Prisma.ShippingAddressCreateManyArgs> = z.object({
  data: z.union([ ShippingAddressCreateManyInputSchema,ShippingAddressCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ShippingAddressCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ShippingAddressCreateManyAndReturnArgs> = z.object({
  data: z.union([ ShippingAddressCreateManyInputSchema,ShippingAddressCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ShippingAddressDeleteArgsSchema: z.ZodType<Prisma.ShippingAddressDeleteArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  where: ShippingAddressWhereUniqueInputSchema,
}).strict() ;

export const ShippingAddressUpdateArgsSchema: z.ZodType<Prisma.ShippingAddressUpdateArgs> = z.object({
  select: ShippingAddressSelectSchema.optional(),
  include: ShippingAddressIncludeSchema.optional(),
  data: z.union([ ShippingAddressUpdateInputSchema,ShippingAddressUncheckedUpdateInputSchema ]),
  where: ShippingAddressWhereUniqueInputSchema,
}).strict() ;

export const ShippingAddressUpdateManyArgsSchema: z.ZodType<Prisma.ShippingAddressUpdateManyArgs> = z.object({
  data: z.union([ ShippingAddressUpdateManyMutationInputSchema,ShippingAddressUncheckedUpdateManyInputSchema ]),
  where: ShippingAddressWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShippingAddressUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ShippingAddressUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ShippingAddressUpdateManyMutationInputSchema,ShippingAddressUncheckedUpdateManyInputSchema ]),
  where: ShippingAddressWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShippingAddressDeleteManyArgsSchema: z.ZodType<Prisma.ShippingAddressDeleteManyArgs> = z.object({
  where: ShippingAddressWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShippingRateCreateArgsSchema: z.ZodType<Prisma.ShippingRateCreateArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  data: z.union([ ShippingRateCreateInputSchema,ShippingRateUncheckedCreateInputSchema ]),
}).strict() ;

export const ShippingRateUpsertArgsSchema: z.ZodType<Prisma.ShippingRateUpsertArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  where: ShippingRateWhereUniqueInputSchema,
  create: z.union([ ShippingRateCreateInputSchema,ShippingRateUncheckedCreateInputSchema ]),
  update: z.union([ ShippingRateUpdateInputSchema,ShippingRateUncheckedUpdateInputSchema ]),
}).strict() ;

export const ShippingRateCreateManyArgsSchema: z.ZodType<Prisma.ShippingRateCreateManyArgs> = z.object({
  data: z.union([ ShippingRateCreateManyInputSchema,ShippingRateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ShippingRateCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ShippingRateCreateManyAndReturnArgs> = z.object({
  data: z.union([ ShippingRateCreateManyInputSchema,ShippingRateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ShippingRateDeleteArgsSchema: z.ZodType<Prisma.ShippingRateDeleteArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  where: ShippingRateWhereUniqueInputSchema,
}).strict() ;

export const ShippingRateUpdateArgsSchema: z.ZodType<Prisma.ShippingRateUpdateArgs> = z.object({
  select: ShippingRateSelectSchema.optional(),
  include: ShippingRateIncludeSchema.optional(),
  data: z.union([ ShippingRateUpdateInputSchema,ShippingRateUncheckedUpdateInputSchema ]),
  where: ShippingRateWhereUniqueInputSchema,
}).strict() ;

export const ShippingRateUpdateManyArgsSchema: z.ZodType<Prisma.ShippingRateUpdateManyArgs> = z.object({
  data: z.union([ ShippingRateUpdateManyMutationInputSchema,ShippingRateUncheckedUpdateManyInputSchema ]),
  where: ShippingRateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShippingRateUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ShippingRateUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ShippingRateUpdateManyMutationInputSchema,ShippingRateUncheckedUpdateManyInputSchema ]),
  where: ShippingRateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShippingRateDeleteManyArgsSchema: z.ZodType<Prisma.ShippingRateDeleteManyArgs> = z.object({
  where: ShippingRateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SizeCreateArgsSchema: z.ZodType<Prisma.SizeCreateArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  data: z.union([ SizeCreateInputSchema,SizeUncheckedCreateInputSchema ]),
}).strict() ;

export const SizeUpsertArgsSchema: z.ZodType<Prisma.SizeUpsertArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  where: SizeWhereUniqueInputSchema,
  create: z.union([ SizeCreateInputSchema,SizeUncheckedCreateInputSchema ]),
  update: z.union([ SizeUpdateInputSchema,SizeUncheckedUpdateInputSchema ]),
}).strict() ;

export const SizeCreateManyArgsSchema: z.ZodType<Prisma.SizeCreateManyArgs> = z.object({
  data: z.union([ SizeCreateManyInputSchema,SizeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SizeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SizeCreateManyAndReturnArgs> = z.object({
  data: z.union([ SizeCreateManyInputSchema,SizeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SizeDeleteArgsSchema: z.ZodType<Prisma.SizeDeleteArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  where: SizeWhereUniqueInputSchema,
}).strict() ;

export const SizeUpdateArgsSchema: z.ZodType<Prisma.SizeUpdateArgs> = z.object({
  select: SizeSelectSchema.optional(),
  include: SizeIncludeSchema.optional(),
  data: z.union([ SizeUpdateInputSchema,SizeUncheckedUpdateInputSchema ]),
  where: SizeWhereUniqueInputSchema,
}).strict() ;

export const SizeUpdateManyArgsSchema: z.ZodType<Prisma.SizeUpdateManyArgs> = z.object({
  data: z.union([ SizeUpdateManyMutationInputSchema,SizeUncheckedUpdateManyInputSchema ]),
  where: SizeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SizeUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SizeUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SizeUpdateManyMutationInputSchema,SizeUncheckedUpdateManyInputSchema ]),
  where: SizeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SizeDeleteManyArgsSchema: z.ZodType<Prisma.SizeDeleteManyArgs> = z.object({
  where: SizeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SpecCreateArgsSchema: z.ZodType<Prisma.SpecCreateArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  data: z.union([ SpecCreateInputSchema,SpecUncheckedCreateInputSchema ]),
}).strict() ;

export const SpecUpsertArgsSchema: z.ZodType<Prisma.SpecUpsertArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  where: SpecWhereUniqueInputSchema,
  create: z.union([ SpecCreateInputSchema,SpecUncheckedCreateInputSchema ]),
  update: z.union([ SpecUpdateInputSchema,SpecUncheckedUpdateInputSchema ]),
}).strict() ;

export const SpecCreateManyArgsSchema: z.ZodType<Prisma.SpecCreateManyArgs> = z.object({
  data: z.union([ SpecCreateManyInputSchema,SpecCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SpecCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SpecCreateManyAndReturnArgs> = z.object({
  data: z.union([ SpecCreateManyInputSchema,SpecCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SpecDeleteArgsSchema: z.ZodType<Prisma.SpecDeleteArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  where: SpecWhereUniqueInputSchema,
}).strict() ;

export const SpecUpdateArgsSchema: z.ZodType<Prisma.SpecUpdateArgs> = z.object({
  select: SpecSelectSchema.optional(),
  include: SpecIncludeSchema.optional(),
  data: z.union([ SpecUpdateInputSchema,SpecUncheckedUpdateInputSchema ]),
  where: SpecWhereUniqueInputSchema,
}).strict() ;

export const SpecUpdateManyArgsSchema: z.ZodType<Prisma.SpecUpdateManyArgs> = z.object({
  data: z.union([ SpecUpdateManyMutationInputSchema,SpecUncheckedUpdateManyInputSchema ]),
  where: SpecWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SpecUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SpecUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SpecUpdateManyMutationInputSchema,SpecUncheckedUpdateManyInputSchema ]),
  where: SpecWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SpecDeleteManyArgsSchema: z.ZodType<Prisma.SpecDeleteManyArgs> = z.object({
  where: SpecWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StoreCreateArgsSchema: z.ZodType<Prisma.StoreCreateArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  data: z.union([ StoreCreateInputSchema,StoreUncheckedCreateInputSchema ]),
}).strict() ;

export const StoreUpsertArgsSchema: z.ZodType<Prisma.StoreUpsertArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  where: StoreWhereUniqueInputSchema,
  create: z.union([ StoreCreateInputSchema,StoreUncheckedCreateInputSchema ]),
  update: z.union([ StoreUpdateInputSchema,StoreUncheckedUpdateInputSchema ]),
}).strict() ;

export const StoreCreateManyArgsSchema: z.ZodType<Prisma.StoreCreateManyArgs> = z.object({
  data: z.union([ StoreCreateManyInputSchema,StoreCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const StoreCreateManyAndReturnArgsSchema: z.ZodType<Prisma.StoreCreateManyAndReturnArgs> = z.object({
  data: z.union([ StoreCreateManyInputSchema,StoreCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const StoreDeleteArgsSchema: z.ZodType<Prisma.StoreDeleteArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  where: StoreWhereUniqueInputSchema,
}).strict() ;

export const StoreUpdateArgsSchema: z.ZodType<Prisma.StoreUpdateArgs> = z.object({
  select: StoreSelectSchema.optional(),
  include: StoreIncludeSchema.optional(),
  data: z.union([ StoreUpdateInputSchema,StoreUncheckedUpdateInputSchema ]),
  where: StoreWhereUniqueInputSchema,
}).strict() ;

export const StoreUpdateManyArgsSchema: z.ZodType<Prisma.StoreUpdateManyArgs> = z.object({
  data: z.union([ StoreUpdateManyMutationInputSchema,StoreUncheckedUpdateManyInputSchema ]),
  where: StoreWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StoreUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.StoreUpdateManyAndReturnArgs> = z.object({
  data: z.union([ StoreUpdateManyMutationInputSchema,StoreUncheckedUpdateManyInputSchema ]),
  where: StoreWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StoreDeleteManyArgsSchema: z.ZodType<Prisma.StoreDeleteManyArgs> = z.object({
  where: StoreWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SubCategoryCreateArgsSchema: z.ZodType<Prisma.SubCategoryCreateArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  data: z.union([ SubCategoryCreateInputSchema,SubCategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const SubCategoryUpsertArgsSchema: z.ZodType<Prisma.SubCategoryUpsertArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  where: SubCategoryWhereUniqueInputSchema,
  create: z.union([ SubCategoryCreateInputSchema,SubCategoryUncheckedCreateInputSchema ]),
  update: z.union([ SubCategoryUpdateInputSchema,SubCategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const SubCategoryCreateManyArgsSchema: z.ZodType<Prisma.SubCategoryCreateManyArgs> = z.object({
  data: z.union([ SubCategoryCreateManyInputSchema,SubCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SubCategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SubCategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ SubCategoryCreateManyInputSchema,SubCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SubCategoryDeleteArgsSchema: z.ZodType<Prisma.SubCategoryDeleteArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  where: SubCategoryWhereUniqueInputSchema,
}).strict() ;

export const SubCategoryUpdateArgsSchema: z.ZodType<Prisma.SubCategoryUpdateArgs> = z.object({
  select: SubCategorySelectSchema.optional(),
  include: SubCategoryIncludeSchema.optional(),
  data: z.union([ SubCategoryUpdateInputSchema,SubCategoryUncheckedUpdateInputSchema ]),
  where: SubCategoryWhereUniqueInputSchema,
}).strict() ;

export const SubCategoryUpdateManyArgsSchema: z.ZodType<Prisma.SubCategoryUpdateManyArgs> = z.object({
  data: z.union([ SubCategoryUpdateManyMutationInputSchema,SubCategoryUncheckedUpdateManyInputSchema ]),
  where: SubCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SubCategoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SubCategoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SubCategoryUpdateManyMutationInputSchema,SubCategoryUncheckedUpdateManyInputSchema ]),
  where: SubCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SubCategoryDeleteManyArgsSchema: z.ZodType<Prisma.SubCategoryDeleteManyArgs> = z.object({
  where: SubCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WishlistCreateArgsSchema: z.ZodType<Prisma.WishlistCreateArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  data: z.union([ WishlistCreateInputSchema,WishlistUncheckedCreateInputSchema ]),
}).strict() ;

export const WishlistUpsertArgsSchema: z.ZodType<Prisma.WishlistUpsertArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  where: WishlistWhereUniqueInputSchema,
  create: z.union([ WishlistCreateInputSchema,WishlistUncheckedCreateInputSchema ]),
  update: z.union([ WishlistUpdateInputSchema,WishlistUncheckedUpdateInputSchema ]),
}).strict() ;

export const WishlistCreateManyArgsSchema: z.ZodType<Prisma.WishlistCreateManyArgs> = z.object({
  data: z.union([ WishlistCreateManyInputSchema,WishlistCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WishlistCreateManyAndReturnArgsSchema: z.ZodType<Prisma.WishlistCreateManyAndReturnArgs> = z.object({
  data: z.union([ WishlistCreateManyInputSchema,WishlistCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WishlistDeleteArgsSchema: z.ZodType<Prisma.WishlistDeleteArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  where: WishlistWhereUniqueInputSchema,
}).strict() ;

export const WishlistUpdateArgsSchema: z.ZodType<Prisma.WishlistUpdateArgs> = z.object({
  select: WishlistSelectSchema.optional(),
  include: WishlistIncludeSchema.optional(),
  data: z.union([ WishlistUpdateInputSchema,WishlistUncheckedUpdateInputSchema ]),
  where: WishlistWhereUniqueInputSchema,
}).strict() ;

export const WishlistUpdateManyArgsSchema: z.ZodType<Prisma.WishlistUpdateManyArgs> = z.object({
  data: z.union([ WishlistUpdateManyMutationInputSchema,WishlistUncheckedUpdateManyInputSchema ]),
  where: WishlistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WishlistUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.WishlistUpdateManyAndReturnArgs> = z.object({
  data: z.union([ WishlistUpdateManyMutationInputSchema,WishlistUncheckedUpdateManyInputSchema ]),
  where: WishlistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WishlistDeleteManyArgsSchema: z.ZodType<Prisma.WishlistDeleteManyArgs> = z.object({
  where: WishlistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;